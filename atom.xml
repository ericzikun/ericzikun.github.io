<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EricKun</title>
  
  
  <link href="https://ericzikun.github.io/atom.xml" rel="self"/>
  
  <link href="https://ericzikun.github.io/"/>
  <updated>2021-06-13T12:46:53.813Z</updated>
  <id>https://ericzikun.github.io/</id>
  
  <author>
    <name>Eric kun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实验室学姐问到可见性细节，被批浮于表面【可见性的原理初探】</title>
    <link href="https://ericzikun.github.io/2021/06/13/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
    <id>https://ericzikun.github.io/2021/06/13/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A04-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/</id>
    <published>2021-06-13T12:32:33.000Z</published>
    <updated>2021-06-13T12:46:53.813Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 之前也只是知道有可见性这么回事，但是原理不算很明白！今天把多线程的可见性原理梳理一下，原理弄懂，而非死记硬背！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 先看多线程例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210613191915845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里启动了一个MyThread线程，并在主线程里面不断的去判断该成员变量a的值是否进行了修改，而实际情况是MyThread线程对值修改之后，主线程中并没有拿到这个最新的值而跳出while循环，那么这又是为啥呢？<br><img src="https://img-blog.csdnimg.cn/20210613192254802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当一个线程启动后，会单独建立一个栈供使用，那么这里就有主线程和新线程两个栈，启动线程后，栈内调用的成员变量、成员方法这些都是从同一个方法区中获取的，比如这里的MyThread.class静态区，拿到的都是方法区中的副本存到自己线程的栈内存当中，所以这个值就应该是线程启动当时的副本状态！只要不修改这个副本文件，就会一直使用这个副本，也不会重新去方法区拿。<br>当修改了副本后，他会立刻同步到方法区中，比如这里的新线程修改使得a=1，那么就会立刻去改方法区中MyThread.class静态区a的值为1，那么这个新线程今后用的值都是这个修改后的副本了，但是对于主线程，它拿到的一直是a修改之前的最开始的那个副本文件，所以对于主线程来说a=0。</p><blockquote><p><strong>总结1：</strong> 每个线程去使用共享内容时候，是把共享的内容复制一份副本到自己的栈内存<br><strong>总结2：</strong> 副本中的值发生改变时，立刻同步到方法区中<br><strong>总结3：</strong> 如果当前线程没有重新从方法区中拷贝副本，那么使用的资源还是上一次拿到的副本文件</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么，如何让主线程也拿到最新修改的方法区呢？也就是说如何再次获取一个最新的副本呢？有以下几个方法：</p><ol><li>让主线程<strong>sleep</strong>一下，那么线程休眠后再启动则会重新复制资源副本到主线程栈内存中。</li><li>给成员变量a设置<strong>volatile</strong>修饰符，保证其可见性！</li><li>使用<strong>同步代码块synchronized</strong>：只要遇到<strong>同步</strong>，那么线程也会重新去方法区拿最新的资源副本</li></ol><p>方法一：让主线程sleep而重新获取资源副本到栈内存当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210613201001340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法二：使用volatile，直接给a变量加即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>方法三：使用同步代码块 synchronized，这里随便对什么加锁都行，都会重新向方法区请求最新资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//            Thread.sleep(1);</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Demo<span class="class">.<span class="keyword">class</span>) </span>&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 之前也只是知道有可见性这么回事，但是原理不算很明白！今天把多线程的可见性原理梳理一下，原理弄懂，而非死记硬背！&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp</summary>
      
    
    
    
    <category term="深入" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/"/>
    
    <category term="Java基础" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="https://ericzikun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="并发" scheme="https://ericzikun.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="提升" scheme="https://ericzikun.github.io/tags/%E6%8F%90%E5%8D%87/"/>
    
    <category term="可见性" scheme="https://ericzikun.github.io/tags/%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>对多线程稍作整理【多线程】</title>
    <link href="https://ericzikun.github.io/2021/06/11/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A03-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://ericzikun.github.io/2021/06/11/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A03-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-06-11T03:11:09.000Z</published>
    <updated>2021-06-13T12:46:57.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><ul><li><p>并发:指两个或多个事件在同一个时间段内发生。</p></li><li><p>并行:指两个或多个事件在同一时刻发生(同时发生)。</p></li></ul><p>注意辨析宏观与微观的理解</p><p><img src="https://img-blog.csdnimg.cn/20210611124507184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;多线程笔记.assets/image-20210605152309555.png&quot; alt=&quot;image-20210605152309555&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有<strong>多个程序</strong>同时运行，这在单 CPU 系统中，每 一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分 时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上(CPU)，实现多任务并行执行， 即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意:单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个 线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><ul><li><p>进程:是指一个内存中运行的应用程序（比如打开一个软件 至少占用1个进程），每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程;进程也是程序的一次执行过程，是系统运行程序的基本单位;系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p>线程:线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p></li></ul><p><strong>简而言之:一个程序运行后至少有一个进程，一个进程中可以包含多个线程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">线程：CPU 可执行的最小任务单元 </span><br><span class="line"></span><br><span class="line">八核CPU -八核16线程  </span><br><span class="line">单核 单线程 CPU </span><br><span class="line"></span><br><span class="line">线程 让程序节省时间，提高效率</span><br><span class="line">多线程的CPU 可以看作可以并行运算的机器 </span><br><span class="line"></span><br><span class="line">单线程 - - 交替运行  不能节省时间提高效率</span><br><span class="line"> --同时运行的效果 </span><br><span class="line">CPU 运算速度特别快 </span><br><span class="line">在两个线程之间实现快速切换执行 </span><br><span class="line"></span><br><span class="line">进程：线程的老大 -- 程序运行</span><br></pre></td></tr></table></figure><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度:"></a>线程调度:</h1><h2 id="分时调度"><a href="#分时调度" class="headerlink" title="分时调度"></a>分时调度</h2><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p><h2 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h2><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为 <strong>抢占式调度</strong>。</p><ul><li><p>设置线程的优先级</p></li><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如:现在我们一边使用编辑器，一边使用腾讯会议软件，同时还开着qq、微信、IDEA等软件。此时，这些程序是 在同时运行，”<strong>感觉这些软件好像在同一时刻运行着“</strong>。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着<strong>高速的切换</strong>。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，<strong>让CPU的使用率更高</strong>。</p></li></ul><h1 id="Java实现线程的三个方法："><a href="#Java实现线程的三个方法：" class="headerlink" title="Java实现线程的三个方法："></a>Java实现线程的三个方法：</h1><h2 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个类 继承 Thread </span><br><span class="line">2、重写run方法</span><br><span class="line">3、此类创建对象调用 start()方法</span><br><span class="line">每个线程对象都只能启动一次</span><br></pre></td></tr></table></figure><h2 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h2><pre><code>1、创建一个类  implements Runnable接口 2、重写run方法3、此类创建对象 交给Thread类对象调用 start()方法4、此类创建对象 交给线程池 调用 start()方法    每个线程对象都可以被Thread类对象重复启动         更轻量 方便 </code></pre><h2 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个类  implements Callable接口 </span><br><span class="line">2、重写call方法</span><br><span class="line">3、此类创建对象 交给线程池 调用 start()方法</span><br><span class="line">可以带有返回值</span><br></pre></td></tr></table></figure><p>三个方法之间的区别，优缺点：</p><table><thead><tr><th>&lt;!– 特点</th><th>Thread</th><th>Runnable</th><th>Callable</th></tr></thead><tbody><tr><td>优点</td><td>方便实现，代码简单</td><td>每个线程对象都可以被Thread类对象重复启动。<br/>实现接口，线程类就还能继承其它类，线程之间资源共享方便，不用加static进行修饰</td><td>实现接口，线程类就还能继承其它类,线程之间资源共享方便，不用加static进行修饰,线程可以有返回值,线程可以抛出异常</td></tr><tr><td>缺点</td><td>每个线程对象都只能启动一次 <br/>必须重写run方法run，方法不能有返回值，run方法不能抛出异常</td><td>必须重写run方法,run方法不能有返回值,run方法不能抛出异常</td><td>线程创建比较麻烦，代码比较复杂 –&gt;</td></tr></tbody></table><!-- ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210611150520309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70) --><h1 id="线程状态："><a href="#线程状态：" class="headerlink" title="线程状态："></a>线程状态：</h1><p>一共有T1、T2、T3三个时间段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动 T1</span><br><span class="line"></span><br><span class="line">运行 </span><br><span class="line">等待消耗小T2</span><br><span class="line">计时等待</span><br><span class="line"></span><br><span class="line">终止 T3</span><br></pre></td></tr></table></figure><p>线程池：–  减少 T1 T3 所占的时间和资源<br><img src="https://img-blog.csdnimg.cn/2021061113283062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和<strong>预期</strong>的是一样的，就是<strong>线程安全的</strong>。<br>这里以小球绘制为例：<br>背景：给画板添加点击事件，点击一次画板屏幕则创建一个小球线程<br>不加锁的情况下：<br>面板绘制主函数：<br>给画板添加点击事件ballLiten</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallUI</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">BallUI()&#123;</span><br><span class="line">setTitle(<span class="string">"运动小球"</span>);</span><br><span class="line">setSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">Graphics g = getGraphics();<span class="comment">// 获取画笔对象</span></span><br><span class="line">BallListener ballLiten =<span class="keyword">new</span> BallListener(g);</span><br><span class="line">addMouseListener(ballLiten);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> BallUI();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写点击方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallListener</span> <span class="keyword">implements</span> <span class="title">MouseListener</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击一次 创建一个球 运动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graphics g;</span><br><span class="line"></span><br><span class="line">BallListener(Graphics g)&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line">&#125;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">Color color = <span class="keyword">new</span> Color(random.nextInt(Integer.MAX_VALUE/<span class="number">200</span>));</span><br><span class="line">DrawBallThread dbt = <span class="keyword">new</span> DrawBallThread(g, e.getX(), e.getY(), <span class="number">30</span>,color);</span><br><span class="line">dbt.num=<span class="number">0</span>;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(dbt);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制运动的小球线程类(不加锁)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * implements Runnable每个线程 实际运行的内容是独立的</span></span><br><span class="line"><span class="comment"> * 成员属性是共享的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawBallThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Graphics g;<span class="comment">// 保证可见</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">50</span>;</span><br><span class="line">Color color = Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DrawBallThread</span><span class="params">(Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, Color color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line"><span class="keyword">this</span>.size = size;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> speedX=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> copynum = num;</span><br><span class="line"><span class="comment">//Random ran = new Random();</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//-------------------------不加锁的情况下--------------------</span></span><br><span class="line"><span class="comment">//g.setColor(new Color(238,238,238)); //灰色 先画背景 相当于清屏</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="keyword">if</span> (copynum ** <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line">x += speedX;</span><br><span class="line">y += speedX;</span><br><span class="line">&#125;</span><br><span class="line">g.setColor(color);</span><br><span class="line">g.fillOval(x, y, size, size);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">30</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/20210611135324644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>分析</strong>：<br>由图可见，在线程执行的方法中由于每个点击事件触发的线程拿到的都是同一个Graphics g对象，在一个线程启动后不久，另外点击而新开的线程拿到的仍然是同一个Graphics g对象，这里的Graphics g对象属于共享变量，它的color属性也是在不断变化的！从而导致各个线程之间的球颜色混乱！如果要解决此问题，则要将线程执行方法中的<strong>Graphics g对象这个共享变量加锁，保证它在当前线程运行结束的情况下才可被其他线程所调用</strong>，如下为加锁情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * implements Runnable每个线程 实际运行的内容是独立的</span></span><br><span class="line"><span class="comment"> * 成员属性是共享的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawBallThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Graphics g;<span class="comment">// 保证可见</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">50</span>;</span><br><span class="line">Color color = Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DrawBallThread</span><span class="params">(Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, Color color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line"><span class="keyword">this</span>.size = size;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> speedX=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> copynum = num;</span><br><span class="line"><span class="comment">//Random ran = new Random();</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//-------------------------加锁的情况下-------------------- synchronized (g) &#123;</span></span><br><span class="line"><span class="comment">//g.setColor(new Color(238,238,238)); //灰色 先画背景 相当于清屏</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">if</span> (copynum ** <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line">x += speedX;</span><br><span class="line">y += speedX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (g) &#123;</span><br><span class="line"><span class="comment">//g.setColor(Color.white);</span></span><br><span class="line"><span class="comment">//g.fillRect(0, 0, 500, 500);</span></span><br><span class="line"></span><br><span class="line">g.setColor(color);</span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 300; i++) &#123;</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">g.fillOval(x, y, size, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">30</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210611135114185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>小结：<br>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量<strong>只有读操作，而无写</strong>操作，一般来说，这个全局变量是<strong>线程安全</strong>的;若有<strong>多个线程同时执行写</strong>操作，一般都需要考虑<strong>线程同步</strong>， 否则的话就可能影响线程安全。</p><h3 id="同步代码块、锁"><a href="#同步代码块、锁" class="headerlink" title="同步代码块、锁"></a>同步代码块、锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 前面先引出了小球的案例，已对锁有了初步了解，现在详细介绍一下同步代码块、锁：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要解决上述多线程并发访问一个资源的安全性问题，Java中提供了同步机制 (synchronized)来解决。</p><p><strong>同步代码块</strong>: synchronized 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。<br>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">synchronized</span>(同步锁)&#123; 需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步锁: 对象的同步锁只是一个概念,可以想象为在对象上<strong>标记了一个锁</strong>。</p><ol><li><strong>锁对象</strong> 可以是任意类型。</li><li>多个线程对象 要使用同一把锁。<blockquote><p>注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着 (BLOCKED)。</p></blockquote></li></ol><p><strong>同步方法</strong>: 使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外<br>等着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123; 可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lock锁</strong>：<code>java.util.concurrent.locks.Lock</code>机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,<br>同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。 Lock锁也称同步锁，加锁与释放锁方法化了，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> :加同步锁。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> :释放同步锁。</span></span><br></pre></td></tr></table></figure><p>举例：<br>在线程执行方法的前后<strong>执行锁对象的lock、unlock</strong>方法达到加锁和释放锁的目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 执行卖票操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">//每个窗口卖票的操作 //窗口 永远开启 while(true)&#123;</span></span><br><span class="line">lock.lock(); </span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line"><span class="comment">//出票操作 //使用sleep模拟一下出票时间 try &#123;</span></span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">e.printStackTrace(); &#125;</span><br><span class="line"><span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">String name = Thread.currentThread().getName(); </span><br><span class="line">System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">&#125;</span><br><span class="line">lock.unlock(); </span><br><span class="line">&#125;</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>几个安全相关的概念普及：</p><p><strong>原子性</strong>：即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。原子性就像数据库里面的事务一样，他们是一个团队，同生共死。</p><p><strong>可见性</strong>：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<strong>常采用volatile</strong>去修饰变量，能够保证各个线程的一致可见性，也就是当一个线程修改了变量值后，别的线程能够看到</p><p><strong>有序性</strong>：即程序执行的顺序按照代码的先后顺序执行。</p><pre><code>num=1;  -- 1 num++  2 num++  数据安全不能保证 volatile    -- 一致可见性 不能保证线程数据安全synchronized -- 重量级锁 性能优秀 -- 不方便 -- 实现锁机制 --  保证原子性 final 原子操作：载入 堆中共享变量  写回变量  lock unlock     保证数据原子性的操作：        一个个来    文件操作：        读 写     所有线程 只读 -- 共享     线程 一个读   一个写 -- 必须实现 锁 排队     所有线程  写 写 - 必须实现 锁        JUC     ArrayList -- 增删查改 -- 原子操作的是：增删改 Redis -- 单线程 方法 ：分别对哪些资源对象进行加锁     方法中使用的变量     方法所在类的对象 </code></pre><p>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并发与并行&quot;&gt;&lt;a href=&quot;#并发与并行&quot; class=&quot;headerlink&quot; title=&quot;并发与并行&quot;&gt;&lt;/a&gt;并发与并行&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;并发:指两个或多个事件在同一个时间段内发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并行:指两个或多个</summary>
      
    
    
    
    <category term="深入" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/"/>
    
    <category term="Java基础" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="https://ericzikun.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="并发" scheme="https://ericzikun.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="提升" scheme="https://ericzikun.github.io/tags/%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>原码、补码，字符串的底层存储都不懂，还敢说学过计算机？【计算机基础：二进制+字节+移位运算】</title>
    <link href="https://ericzikun.github.io/2021/06/08/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A02%EF%BC%9A%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6+%E5%AD%97%E8%8A%82+%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91/"/>
    <id>https://ericzikun.github.io/2021/06/08/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A02%EF%BC%9A%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6+%E5%AD%97%E8%8A%82+%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91/</id>
    <published>2021-06-08T10:11:01.000Z</published>
    <updated>2021-06-13T12:47:00.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>提到二进制，为啥计算机底层数据存储都采用二进制呢？计算机内部事由IC电子部件构成，IC的一个引脚，只能表示两个状态（《程序是怎样跑起来的》第二章）<br><img src="https://img-blog.csdnimg.cn/20210608182649936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h1><p>二进制的数一般是8位、16、32，8位的二进制数被称为一个字节，字节是最基本的信息计量单位，而位是最小单位，字节是基本单位，内存和磁盘都是用字节来储存和读写数据，使用位单位则无法读写数据，因此，字节是基本单位</p><h2 id="位bit"><a href="#位bit" class="headerlink" title="位bit"></a>位bit</h2><p>bit位:位是==计算机存储的最小单位==简称为b也称为比特(bit)例如1b,2b,3b<br>byte字节:byte字节是计算机用于计量存储容量的,一种计量单位<br>1byte= 8bit<br>1byte =1B<br>1byte=存1个字母<br>2byte=存一个汉字</p><p>32位和62位系统有什么区别：</p><ol><li>处理数据能力不同：64位的一次可以处理64位的数据，向下兼容，比如32位 16位</li><li>支持的内存不同，或者说寻址能力不同：32位的最多支持4gb的内存，而64最多支持上百g的内存</li><li>架构不同</li><li>对配置要求不同，32位系统需要32位的配套系统安装</li></ol><p>疑问：既然有32 64，那有没有128位呢？</p><p>字符：电子计算机或者说是无线电通信中字母、数字、符号的统称</p><h2 id="各类型占用比特（bit）"><a href="#各类型占用比特（bit）" class="headerlink" title="各类型占用比特（bit）"></a>各类型占用比特（bit）</h2><p><img src="https://img-blog.csdnimg.cn/2021060818305690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>1个byte（字节）= 8位（bit），每一位就是0、1二进制，那么8位就能储存$2^8=256$个数字，所以1个字节能够代表256个数字，取值范围在-128~127</li><li>以此类推，1个short（短整型）=16位，那么就能储存$2^{16}=65535$个，取值范围就在-32768~32767</li></ul><h2 id="吃透字符："><a href="#吃透字符：" class="headerlink" title="吃透字符："></a>吃透字符：</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>字符的历史比较复杂：<br>分为可见字符和控制字符：</p><ul><li>可见字符：英文字母、数字、标点符号</li><li>控制字符：如 换行、回车等</li></ul><p><img src="https://img-blog.csdnimg.cn/20210608223909373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图，将这0~127（128个）的编号称作==码位==，代表了字符的id信息，再把这每个字符的码位转化二进制信息进行存储，这样的二进制信息为ASCII码：<br><img src="https://img-blog.csdnimg.cn/20210609170132592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是原始128个ASCII码字符过于少，仅满足==美国==需求，为了满足==欧洲等国家==字符集的需求，又对ASCII进行了扩充，从128扩充到255，那么ASCII码也就只能表示256个字符，对于==中国==来说，实在太少！</p><p>因为8位最多只能表示256个字符，对于中文来说，有几千个中文字符，我们则必须用16位表示一个字符了！那么要先设计字符集：</p><h3 id="GB2312字符集"><a href="#GB2312字符集" class="headerlink" title="GB2312字符集"></a>GB2312字符集</h3><p>使用分区管理，共计94个区，每个区含94个位，共8836个码位。<br>先介绍一下码位：<br><img src="https://img-blog.csdnimg.cn/2021060920062834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021060920050574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210609200829267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>前面的ASCII码可以直接转为二进制来存储，GB2312如何存储？<br><img src="https://img-blog.csdnimg.cn/20210609201044655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">GBK2312的高位和低位都大于127，那么计算机只要碰到大于127的字节就是汉字的开始<br><img src="https://img-blog.csdnimg.cn/2021061110542046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么，世界上就会有不同的编码，会非常乱！</p><p><img src="https://img-blog.csdnimg.cn/20210611105453827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ISO组织为了解决这个问题，开始规范化编码！提出了Unicode，目的就是把世界上所有字符放在一起并编号<br><img src="https://img-blog.csdnimg.cn/20210611105733928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是ASCII本来也只需要8位、GB2312只用16位，这里的UCS字符集需要32位，扩大了4倍、2倍，导致Unicode提出后并没有被广泛接受，而后期各国交流更加频繁，从而新生了一个新编码UTF-8<br>UTF-8每次传送8位数据，是一种可变长的编码格式<br><img src="https://img-blog.csdnimg.cn/20210611110356437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算<img src="https://img-blog.csdnimg.cn/20210608183243416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h1><p>移位运算指的是将二进制数值各个数位进行左右移位（shift）的运算，移位有左移、右移两种。<br>左移好理解，就是将原数值乘以2的n次幂，但是右移要注意了！二进制中的最高位表示的是符号（1代表负数，0代表正数），<br>eg：那么-1用8位如何表示呢？<br>大部分人会理解成：1的二进制是00000001，那么-1就是10000001，答案错！正确为：11111111。<br>计算机做减法运算时，实际上内部是加法，那么表示负数，就要用到正数的==补数==表示，补数=正数取反+1；<br>验证：1+（-1）=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000001</span></span><br><span class="line">+<span class="number">1111111</span></span><br><span class="line">   <span class="number">10000000</span></span><br></pre></td></tr></table></figure><p>这里相加后是9位，其中最高位的1溢出，答案为0，符合。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 仔细思考一下补数整个的机制，就不难理解如-32768至32767、 -128至127这些数据表示大范围为何正数最大值都比负数最大小1了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二进制&quot;&gt;&lt;a href=&quot;#二进制&quot; class=&quot;headerlink&quot; title=&quot;二进制&quot;&gt;&lt;/a&gt;二进制&lt;/h1&gt;&lt;p&gt;提到二进制，为啥计算机底层数据存储都采用二进制呢？计算机内部事由IC电子部件构成，IC的一个引脚，只能表示两个状态（《程序是怎样跑起</summary>
      
    
    
    
    <category term="深入" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/"/>
    
    <category term="计算机基础" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://ericzikun.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="程序是怎样跑起来的" scheme="https://ericzikun.github.io/tags/%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84/"/>
    
    <category term="二进制" scheme="https://ericzikun.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
    <category term="字节" scheme="https://ericzikun.github.io/tags/%E5%AD%97%E8%8A%82/"/>
    
    <category term="移位运算" scheme="https://ericzikun.github.io/tags/%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="提升" scheme="https://ericzikun.github.io/tags/%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>儿子到底继承了爸爸哪些优良传统？【OOP+继承+接口】</title>
    <link href="https://ericzikun.github.io/2021/05/28/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A01%EF%BC%9A%E3%80%90OOP-%E7%BB%A7%E6%89%BF-%E6%8E%A5%E5%8F%A3%E3%80%91/"/>
    <id>https://ericzikun.github.io/2021/05/28/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A01%EF%BC%9A%E3%80%90OOP-%E7%BB%A7%E6%89%BF-%E6%8E%A5%E5%8F%A3%E3%80%91/</id>
    <published>2021-05-28T10:22:49.000Z</published>
    <updated>2021-06-13T12:47:04.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在Java中，继承是类与类之间的一种关系，分为父类和子类两种。这里和接口区分一下：一个类只能继承一个父类，而不能继承多个——即单继承关系；而一个类却可以实现多个接口。如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>子类继承了父类的所有内容，但是对于不同访问修饰父类修饰的属性方法，子类所调用的权限也不相同。对于public关键词修饰的属性和方法，子类同一个项目下都可以继承和调用。protected关键词修饰的属性和方法，可以在同包下和子类继承关系下继承和调用。对于缺省关键词的方法和属性，只能在同包下继承的调用，但是对于private修饰符修饰的属性和方法，只能自己该类使用。<br>子类继承父类的方法后，还可以根据需要重写其该方法。重写方法的名称必须与父类相同，访问修饰符可以和父类相同也可以比父类权限更大、返回值类型可以和父类相同也可以是父的子类，这样可以丰富扩展子类继承父类的方法。<br>对于继承父类的子类方法，在初始化方法时可以使用父类容器来初始化子类</p><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="继承的内容"><a href="#继承的内容" class="headerlink" title="继承的内容"></a>继承的内容</h3><ol><li>子类继承到父类的哪些东西？</li></ol><p>所有</p><ol start="2"><li>子类以及子类对象可以调用到继承的哪些属性和方法？</li></ol><p>要看 父类的属性、方法的具体==访问修饰符==：</p><table><thead><tr><th>访问修饰符</th><th>访问范围</th></tr></thead><tbody><tr><td>public</td><td>项目里</td></tr><tr><td>private</td><td>类里</td></tr><tr><td>protected</td><td>包下，不同包的子类</td></tr><tr><td>缺省</td><td>同包下</td></tr></tbody></table><p>那么对于子类来说，</p><p>同包下：</p><p>​    只有private不能调用</p><p>不同包下：</p><p>​    public，protected 可以调用</p><p>==protected== 受保护的，子类不能访问父类的私有字段。不过有时候希望限制<strong>父类中的某个方法只允许子类访问</strong>，或者<strong>希望子类的方法访问超类的某个字段</strong>。</p><h3 id="方法重写："><a href="#方法重写：" class="headerlink" title="方法重写："></a>方法重写：</h3><p>注解格式：除方法体之外与父类一致</p><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><p>子类中重写的方法，与父类权限一致或者大于（因为子类继承，希望它有更强的扩展性，所以权限理应更大）</p><h4 id="返回值类型："><a href="#返回值类型：" class="headerlink" title="返回值类型："></a>返回值类型：</h4><p>与父类方法的返回值类型类/子类</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><p>参数类型 不能修改</p><p>对于子类而言：子类及子类对象可以优先调用重写之后的</p><h4 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h4><p>方法名相同，参数不一致（子类 父类也可以实现重载，并不会归为一种类型）</p><h4 id="自动转型："><a href="#自动转型：" class="headerlink" title="自动转型："></a>自动转型：</h4><p>强制转型：int i = (int)1.2;<br>        A a = new B();<br>        A 是 B 的 父类——&gt; 祖先<br>        向上转型 之后 还会优先调用重写的方法吗？<br>            会</p><p>子类对像  向上 -&gt; 父类类型 ——&gt;向下转回子类类型 【可以】<br>父类对象 –&gt; 向下转型 子类类型 （==对象 无中生有== 子类可能有一些特别的属性方法 父类没有）【不可以】</p><p>==注意==：子类向上转型后，只能调用父类有的方法，并且是调的子类覆盖重写的，而不能调用子类独立的方法；子类独有的方法在父类中根本没有定义，所以父类无法找到子类独有的方法。</p><p>任务：一个类实例化的加载过程：</p><p>顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.加载静态成员&#x2F;代码块：</span><br><span class="line"></span><br><span class="line">先递归地加载父类的静态成员&#x2F;代码块(Object的最先)；再依次加载到本类的静态成员。</span><br><span class="line">同一个类里的静态成员&#x2F;代码块，按写代码的顺序加载。</span><br><span class="line">如果其间调用静态方法，则调用时会先运行静态方法，再继续加载。同一个类里调用静态方法时，可以不理会写代码的顺序。</span><br><span class="line">调用父类的静态成员，可以像调用自己的一样；但调用其子类的静态成员，必须使用“子类名.成员名”来调用。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.加载非静态成员&#x2F;普通代码块，初始化构造方法：（实例块在创建对象时才会被加载。而静态成员在不创建对象时可以加载）</span><br><span class="line"></span><br><span class="line">先递归地加载父类的非静态成员&#x2F;代码块(Object的最先)，非静态成员和代码块按代码出现顺序加载，并在加载完非静态成员后初始化构造方法；再依次加载到本类的非静态成员，并初始化构造方法，默认为无参构造，当然也可以指定父类初始化构造方法，和本类初始化构造方法。在子类构造方法中用super(参数列表);可以指定初始化父类构造方法，默认不写super(参数列表)为初始化父类无参构造方法。</span><br><span class="line">同一个类里的非静态成员&#x2F;普通代码块，按写代码的顺序加载。同一个类里调用方法时，可以不理会写代码的顺序。</span><br><span class="line">但调用属性时，必须注意加载顺序。一般编译就会不通过。</span><br><span class="line">调用父类的非静态成员(private 除外)，也可以像调用自己的一样。</span><br></pre></td></tr></table></figure><p>问题：静态代码块只加载一次，静态方法先于静态代码块？<br>这里要看情况，我这里样例是 由于声明成员变量时调用到了静态方法 所以静态方法优先于静态代码块 但实际上这两者本没有优先区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init Base "</span> + a);</span><br><span class="line">         <span class="comment">//System.out.println("Null Init " + b);</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init Base "</span> + <span class="keyword">this</span>.b);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *一级子类和基类包含的内容一样</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">  <span class="comment">//静态变量、静态块执行顺序，按书写先后顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a1 = getSuperStaticNumber();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b1 = getSuperInstanceNumber();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init SuperClass"</span> + <span class="keyword">this</span>.b1);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init SuperClass"</span> + a1);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSuperStaticNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Static member init"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuperInstanceNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Instance member init"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *二级子类为测试该代码的驱动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a2 = getStaticNumber();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b2 = getInstanceNumber();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init SubClass "</span> + <span class="keyword">this</span>.b2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStaticNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Static member init Sub"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInstanceNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Instance member init Sub"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">2000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init "</span> + a2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 程序入口,main</span></span><br><span class="line"><span class="comment">      * </span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">new</span> Sub();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20210527153502546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>几个面试常见问题：</p><ul><li>请解释hashCode()和equals()方法有什么联系？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java对象的eqauls方法和hashCode方法是这样规定的：</span><br><span class="line"></span><br><span class="line">➀相等（相同）的对象必须具有相等的哈希码（或者散列码）。</span><br><span class="line"></span><br><span class="line">➁如果两个对象的hashCode相同，它们并不一定相同。</span><br></pre></td></tr></table></figure></li><li>若对一个类不重写，它的equals()方法是如何比较的？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址</span><br></pre></td></tr></table></figure></li><li>请说明Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。</span><br><span class="line">与此相对，方法覆盖是说子类重新定义了父类的方法。</span><br><span class="line">方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</span><br></pre></td></tr></table></figure></li><li>请判断，两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，该说法是否正确，为什么？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不对，如果两个对象x和y满足x.equals(y) &#x3D;&#x3D; true，它们的哈希码（hash code）应当相同。</span><br><span class="line">Java对于eqauls方法和hashCode方法是这样规定的：</span><br><span class="line">(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；</span><br><span class="line">(2)如果两个对象的hashCode相同，它们并不一定相同。</span><br><span class="line">当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降</span><br><span class="line">（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）</span><br></pre></td></tr></table></figure></li><li>请判断当一个对象被当作参数传递给一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是值传递。Java 编程语言只有值传递参数。</span><br><span class="line">当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。</span><br><span class="line">对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。</span><br></pre></td></tr></table></figure>==Java是值传递== 就算传的是对象 也是传的对象地址<br><a href="https://www.zhihu.com/question/31203609/answer/164430457" target="_blank" rel="noopener">https://www.zhihu.com/question/31203609/answer/164430457</a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于Java不支持多继承，而有可能某个类或对象要使用分别在几个类或对象里面的方法或属性，现有的单继承机制就不能满足要求。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 与继承相比，接口有更高的灵活性，因为接口中没有任何实现代码。当一个类实现了接口以后，该类要==实现接口里面所有的方法和属性==，并且接口里面的属性在默认状态下面都是public static,所有方法默认情况下是public.一个类可以实现多个接口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在Java中，继承是类与类之间的一种关系，分为父类和子类两种。这里和接口区分一下：一个类只能继承一个父类，而不能继承多个——即单继承关系；而</summary>
      
    
    
    
    <category term="深入" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/"/>
    
    <category term="Java基础" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%85%A5/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="java" scheme="https://ericzikun.github.io/tags/java/"/>
    
    <category term="OOP" scheme="https://ericzikun.github.io/tags/OOP/"/>
    
    <category term="继承" scheme="https://ericzikun.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
    <category term="接口" scheme="https://ericzikun.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
    <category term="提升" scheme="https://ericzikun.github.io/tags/%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>Docker 集成多容器镜像实 践:Jdk8,py37,Mysql,es,采用Dockfile+docker-compose编排</title>
    <link href="https://ericzikun.github.io/2021/01/29/Docker-%E9%9B%86%E6%88%90%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%AE%9E-%E8%B7%B5-Jdk8-py37-Mysql-es-%E9%87%87%E7%94%A8Dockfile-docker-compose%E7%BC%96%E6%8E%92/"/>
    <id>https://ericzikun.github.io/2021/01/29/Docker-%E9%9B%86%E6%88%90%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%AE%9E-%E8%B7%B5-Jdk8-py37-Mysql-es-%E9%87%87%E7%94%A8Dockfile-docker-compose%E7%BC%96%E6%8E%92/</id>
    <published>2021-01-29T13:50:19.000Z</published>
    <updated>2021-05-28T10:28:35.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://img-blog.csdnimg.cn/202101292257120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于一个较大的项目(Jdk8+py37+Mysql+es)，如果仅仅使用一个容器做部署，安装过程可能会极其复杂，并且并不利于后期各模块的更新，为了方便他人，也为了快速生成镜像部署，对于多服务的项目，我采用了Dock-compose技术生成多容器，并进行编排，第一次做，耗时3天成功，有不少经验分享于此，便于以后快速部署环境！</p><h1 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1. Mysql"></a>1. Mysql</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 强烈不建议自己先生成一个干净的centos，然后进到容器里面安装Mysql，这个过程谁试过谁知道，很耗时间并且不易成功！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一开始我已经调通了Springboot和es在一个容器，本想着装一个Mysql就基本结束了，谁料这将会是一个大坑！！<br>最终的Mysql方案，直接采用Dockerhub官方镜像，<br><img src="https://img-blog.csdnimg.cn/20210129220051755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里补充几点，对于Mysql，一般需要初始化sql，可以改动docker-entrypoint.sh文件，并替换进容器里，该文件内容修改地方如下，这里我只是一个空库空表：<br><img src="https://img-blog.csdnimg.cn/20210129220459734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么这个文件如何得到？可以先启动这个容器，然后用cp命令考出来，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  d5200819a46d:/usr/local/bin/docker-entrypoint.sh .</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 启动Docker-compose.yaml中的单个容器，如只启动Mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d mysql</span><br></pre></td></tr></table></figure><h1 id="2-es-amp-Jdk8"><a href="#2-es-amp-Jdk8" class="headerlink" title="2.es &amp; Jdk8"></a>2.es &amp; Jdk8</h1><h2 id="2-1-es"><a href="#2-1-es" class="headerlink" title="2.1 es"></a>2.1 es</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这两个相对容易一点，只需要配好jdk8环境即可，如果都放一个容器里面容易出内存问题，且不方便看两个服务的日志，并不利于调试，故拆成两个容器最好！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; es：本地的整个es文件夹放进容器内即可，这里我先用dockerfile配好了一个含有jdk8及es文件夹的容器，然后commit成一个新的镜像es:vcoustom，再丢进docker-compose进行编排：<br><img src="https://img-blog.csdnimg.cn/20210129221137232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的解释一下为何把9201对宿主机进行了映射，为了方便调试，在localhost:9201下看到es的数据结构页面。<br>es文件夹内的端口配置，elasticsearch.yml<br><img src="https://img-blog.csdnimg.cn/20210129221437303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>tcp端口配置(与Java通信)：<br><img src="https://img-blog.csdnimg.cn/20210129221520837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>es启动的报错：</strong><br>这里的cluster.routing.allocation.disk.threshold_enabled一定要配，否则容易报空间不足的问题<br>如果es启动报内存不足问题，修改config/jvm.options,将1g改小到512m解决问题，减小启动内存的消耗<br><img src="https://img-blog.csdnimg.cn/2021012922184722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>es容器采用dockerfile生成镜像：</strong><br><img src="https://img-blog.csdnimg.cn/20210129222219167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-2-Springboot项目"><a href="#2-2-Springboot项目" class="headerlink" title="2.2 Springboot项目"></a>2.2 Springboot项目</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 很简单，只需要配好jdk8环境即可，这里需要注意一下工作路径，也就是执行最终启动命令的位置，否则jar包启动时不会扫描当前jar包所在目录下的文件<br><img src="https://img-blog.csdnimg.cn/2021012922253052.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该Springboot项目只需jdk9环境。所以和前面的es写的dockerfile类似，只改COPY内容即可</p><h1 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该模块在整个Springboot项目中承担了一个django接口，所以也不难配置，只需拉取一个python37镜像，简单配置<br><img src="https://img-blog.csdnimg.cn/20210129222859352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里我采用了另一种docker-compose的写法，就是直接在yaml里面写好镜像的build方法，CMD在dockerfile里面已经写了，那么docker-compose.yaml内就不用写了<br><img src="https://img-blog.csdnimg.cn/20210129223015878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的几个容器我分别采用了三种方式写docker-compose，殊途同归，但是自己去体会，他的目的以及侧重点还是不一样的！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果我们需要将整个目录发给别人去部署，那么就尽量不要用save命令将自己写的镜像保存成tar 给别人导入，而是尽可能的发给别人少量的文件，让别人能够从docker-hub拉取，如这里的python和mysql镜像，这两个容器内部的原始镜像都是从官方拉取的，那么就不需要自己save了！<br><img src="https://img-blog.csdnimg.cn/20210129223443563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210129223500671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>save方法解释一下：就是将自己配好的镜像save成一个tar包，发给别人，别人通过load命令导入到他电脑的docker镜像库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save frontier2:vpopo -o xxx.tar</span><br><span class="line">docker load -i xxx.tar</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里再解释一下RUN和CMD命令，对于一个镜像的生成，RUN执行于生成镜像的过程中(比如安装相应的系统环境)，CMD命令执行于启动该镜像后系统初始化要执行的命令(比如某个服务的启动)</p><h1 id="Docker-compose-yaml"><a href="#Docker-compose-yaml" class="headerlink" title="Docker-compose.yaml"></a>Docker-compose.yaml</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'mysql:5.7'</span></span><br><span class="line"><span class="comment">#     network_mode: "host"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql/conf.d:/etc/mysql/conf.d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql/logs:/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql//data:/var/lib/mysql</span></span><br><span class="line">    <span class="comment"># - $PWD/schema.sql:/docker-entrypoint-initdb.d/schema.sql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/docker-entrypoint.sh:/docker-entrypoint.sh</span></span><br><span class="line"><span class="comment">#    command: ["mysql","-uroot","-p123456","&lt;","/tmp/schema.sql"]</span></span><br><span class="line">  <span class="attr">es:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'es:vcoustom'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9201:9201"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9301:9301"</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["su","-","es","-c","/usr/app_file/elasticsearch-6.4.2/bin/elasticsearch"]</span></span><br><span class="line">  <span class="attr">python:</span></span><br><span class="line">    <span class="comment"># image: 'python:3.7.4'</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./docker-python</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="comment"># volumes:</span></span><br><span class="line">    <span class="comment"># - $PWD/word_funtion2:/usr/src/app/word_funtion2</span></span><br><span class="line">    <span class="comment"># working_dir: /usr/src/app/word_funtion2</span></span><br><span class="line">    <span class="comment"># # command: ["chmod","u+x","/usr/local/pystart.sh","&amp;&amp;","/usr/local/pystart.sh"]</span></span><br><span class="line">    <span class="comment"># command: </span></span><br><span class="line">    <span class="comment"># - sh</span></span><br><span class="line">    <span class="comment"># - -c </span></span><br><span class="line">    <span class="comment"># - |</span></span><br><span class="line">    <span class="comment">#     pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line">    <span class="comment">#     python manage.py runserver 0.0.0.0:8000</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">  <span class="attr">frontier_prediction:</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="comment"># image: 'frontier2:vpopo'</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"mysql"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"es"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"python"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'frontier_prediction:vcoustom'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">    <span class="comment"># command: ["/usr/local/jdk1.8.0_202/bin/java","-jar","/usr/app_file/agri-1.0-SNAPSHOT.jar"]</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">/usr/app_file/</span> </span><br><span class="line">        <span class="string">/usr/local/jdk1.8.0_202/bin/java</span> <span class="string">-jar</span> <span class="string">agri-1.0-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><h1 id="高频Docker命令"><a href="#高频Docker命令" class="headerlink" title="高频Docker命令"></a>高频Docker命令</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看本机镜像</span><br><span class="line">docker ps #查看目前启动的容器</span><br><span class="line">docker exec -it cab0db06ada2 /bin/bash #进入到某个容器中</span><br><span class="line">docker stop cab0db06ada2</span><br><span class="line">docker logs -f ea504eaaf08e</span><br></pre></td></tr></table></figure><p>将容器提交为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a "popo" -m "popo" b83f55190bf3 frontier2:vpopo</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 解释一下commit，当我们将一个配好的容器提交为一个镜像时，无论你是否开启端口 服务，它保存的是一个静态的系统关机状态，相当于它只保存了这个容器的环境(包括文件改动等)，并不意味着你打开这个镜像，他就已经开好了服务，这里要清晰！这也是之前一直困扰了我的问题，通过实践解决了！<br>这里还有一个高级的奇淫技巧,如果启动容器忘记了挂载，可以中途拷贝容器内的文件出来到本机目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  d5200819a46d:/usr/local/bin/docker-entrypoint.sh .</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker-compose up -d frontier_prediction</span><br><span class="line">docker-compose stop frontier_prediction</span><br><span class="line">docker-compose rm frontier_prediction</span><br></pre></td></tr></table></figure><h1 id="多个容器间通信"><a href="#多个容器间通信" class="headerlink" title="多个容器间通信"></a>多个容器间通信</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里走了很多弯路。其实很简单，如果都是容器与容器通信的话，host直接改为docker-compose.yaml中各个services的名字即可，比如frontier_prediction这个Springboot项目要访问mysql容器的3306端口，只需改项目中的host为：mysql即可，而不是localhost</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/202101292257120.png?x-oss-proces</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Docker/"/>
    
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/tags/Elasticsearch/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/tags/Docker/"/>
    
    <category term="java" scheme="https://ericzikun.github.io/tags/java/"/>
    
    <category term="Docker-compose" scheme="https://ericzikun.github.io/tags/Docker-compose/"/>
    
    <category term="Mysql" scheme="https://ericzikun.github.io/tags/Mysql/"/>
    
    <category term="python" scheme="https://ericzikun.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【Springboot】用户权限框架：Spring security &amp; Shiro</title>
    <link href="https://ericzikun.github.io/2021/01/24/Springboot%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%A1%86%E6%9E%B6%EF%BC%9ASpring-security-Shiro/"/>
    <id>https://ericzikun.github.io/2021/01/24/Springboot%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%A1%86%E6%9E%B6%EF%BC%9ASpring-security-Shiro/</id>
    <published>2021-01-24T04:18:30.000Z</published>
    <updated>2021-01-29T13:45:39.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、Shiro简介"><a href="#1、Shiro简介" class="headerlink" title="1、Shiro简介"></a>1、Shiro简介</h1><h2 id="1-1、Shiro-是什么？"><a href="#1-1、Shiro-是什么？" class="headerlink" title="1.1、Shiro 是什么？"></a>1.1、Shiro 是什么？</h2><ul><li><p>Apache Shiro 是 Java 的一个安全（权限）框架。</p></li><li><p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。</p></li><li><p>Shiro 可以完成：认证、授权、加密、会话管理、与Web 集成、缓存等。</p></li><li><p>下载地址</p><ul><li>官网：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></li><li>github：<a href="https://github.com/apache/shiro" target="_blank" rel="noopener">https://github.com/apache/shiro</a></li></ul></li></ul><h2 id="1-2、有哪些功能？"><a href="#1-2、有哪些功能？" class="headerlink" title="1.2、有哪些功能？"></a>1.2、有哪些功能？</h2><p><img src="https://img-blog.csdnimg.cn/20210129213400955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>Authentication:身份认证/登录，验证用户是不是拥有相应的身份</p></li><li><p>Authorization:授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限</p></li><li><p>Session Management:会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境，也可以是Web 环境的</p></li><li><p>Cryptography:加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储</p></li><li><p>Web Support:Web 支持，可以非常容易的集成到Web 环境</p></li><li><p>Caching:缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率</p></li><li><p>Concurrency:Shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去</p></li><li><p>Testing:提供测试支持</p></li><li><p>“Run As”:允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</p></li><li><p>Remember Me:记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</p></li></ul><h2 id="1-3、Shiro架构-外部"><a href="#1-3、Shiro架构-外部" class="headerlink" title="1.3、Shiro架构(外部)"></a>1.3、Shiro架构(外部)</h2><p>从外部来看Shiro，即从应用程序角度的来观察如何使用Shiro完成工作<br><img src="https://img-blog.csdnimg.cn/20210129213425685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>Subject：应用代码直接交互的对象是Subject，也就是说Shiro的对外API 核心就是Subject。Subject 代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；与Subject 的所有交互都会委托给SecurityManager；Subject 其实是一个门面，SecurityManager才是实际的执行者</p></li><li><p>SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且其管理着所有Subject；可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色</p></li><li><p>Realm：Shiro从Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm 看成DataSource</p></li><li><p>1.4、Shiro架构(内部)<br><img src="https://img-blog.csdnimg.cn/20210129213458977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Subject：任何可以与应用交互的“用户”；</p></li><li><p>SecurityManager：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证、授权、会话及缓存的管理。</p></li><li><p>Authenticator：负责Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p></li><li><p>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p></li><li><p>Realm：可以有1 个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的Realm；</p></li><li><p>SessionManager：管理Session 生命周期的组件；而Shiro并不仅仅可以用在Web 环境，也可以用在如普通的JavaSE环境<br>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</p></li><li><p>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密。</p><h1 id="2、SpringBoot集成"><a href="#2、SpringBoot集成" class="headerlink" title="2、SpringBoot集成"></a>2、SpringBoot集成</h1><p>项目结构：<br><img src="https://img-blog.csdnimg.cn/20210129213729703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>编写ShiroConfig配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean  过滤的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"getDefaultWebSecurityManager"</span>)</span> DefaultWebSecurityManager defaultWebSecurityManager) </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc： 必须认证了才能访问</span></span><br><span class="line"><span class="comment">            user： 必须拥有记住我功能才能用</span></span><br><span class="line"><span class="comment">            perms： 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role： 拥有某个角色权限</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//filterMap.put("/user/add","authc");</span></span><br><span class="line">        <span class="comment">//filterMap.put("/user/update","authc");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权，正常情况下，没有授权会跳转到为授权页面</span></span><br><span class="line">        filterMap.put(<span class="string">"/user/add"</span>,<span class="string">"perms[user:add]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/user/update"</span>,<span class="string">"perms[user:update]"</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">"/user/*"</span>,<span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/toLogin"</span>);  <span class="comment">//设置登录页面 如果没有权限则跳转到此页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为授权页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/noauto"</span>); <span class="comment">//如果没有授权则返回此页面</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager  安全对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(@Qualifier(<span class="string">"userRealm"</span>)</span> UserRealm userRealm) </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联userRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userRealm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的UserRealm：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的UserRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了=&gt;授权doGetAuthorizationInfo"</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//info.addStringPermission("user:add");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User)subject.getPrincipal();<span class="comment">//拿到user对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        System.out.println(<span class="string">"----用户的权限perms----"</span> + currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了=&gt;认证doGetAuthorizationInfo"</span>);</span><br><span class="line">        <span class="comment">// 拿到前端传来的userToken，UsernamePasswordToken在MyController中</span></span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 虚拟用户</span></span><br><span class="line">        <span class="comment">//String name = "root";</span></span><br><span class="line">        <span class="comment">//String password = "123456";</span></span><br><span class="line">        <span class="comment">//if (!userToken.getUsername().equals(name)) &#123;</span></span><br><span class="line">        <span class="comment">//    return null;//抛出异常 UnknownAccountException</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实数据库 用户名、密码， 数据中取</span></span><br><span class="line">        User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;<span class="comment">//没有这个人</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首页</span></span><br><span class="line">        <span class="comment">//Subject currentSubject = SecurityUtils.getSubject();</span></span><br><span class="line">        <span class="comment">//Session session = currentSubject.getSession();</span></span><br><span class="line">        <span class="comment">//session.setAttribute("loginUser",user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以加密：MD5(简单密码可能被破解)，MD5盐值加密(再加上user等信息加密)</span></span><br><span class="line">        <span class="comment">// 密码认证，shiro做，不需要在这里判断密码正确与否，因为密码有可能泄露，根本不让你接触密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021012921415083.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、Shiro简介&quot;&gt;&lt;a href=&quot;#1、Shiro简介&quot; class=&quot;headerlink&quot; title=&quot;1、Shiro简介&quot;&gt;&lt;/a&gt;1、Shiro简介&lt;/h1&gt;&lt;h2 id=&quot;1-1、Shiro-是什么？&quot;&gt;&lt;a href=&quot;#1-1、Shiro-是</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Springboot/"/>
    
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="Shiro" scheme="https://ericzikun.github.io/tags/Shiro/"/>
    
    <category term="权限管理" scheme="https://ericzikun.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Springboot】Mybatis-plus学习笔记：大大简化Mybatis 无须繁琐CRUD</title>
    <link href="https://ericzikun.github.io/2021/01/22/Mybatis-plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%A7%E5%A4%A7%E7%AE%80%E5%8C%96Mybatis/"/>
    <id>https://ericzikun.github.io/2021/01/22/Mybatis-plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%A7%E5%A4%A7%E7%AE%80%E5%8C%96Mybatis/</id>
    <published>2021-01-22T01:17:31.000Z</published>
    <updated>2021-01-29T13:45:48.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus概述"><a href="#MyBatisPlus概述" class="headerlink" title="MyBatisPlus概述"></a>MyBatisPlus概述</h2><p>需要的基础:把我的MyBatis、Spring、SpringMVC就可以学习这个了! 为什么要学习它呢?MyBatisPlus可以节省我们大量工作时间，所有的CRUD代码它都可以自动化完成! JPA 、 tk-mapper、MyBatisPlus<br>偷懒的!</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>是什么? MyBatis 本来就是简化 JDBC 操作的! 官网:<a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a> MyBatis Plus，简化 MyBatis !<br><img src="https://img-blog.csdnimg.cn/20210124161928400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus 是自己开发，并非官方的! --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mapper继承BaseMapper"><a href="#mapper继承BaseMapper" class="headerlink" title="mapper继承BaseMapper"></a>mapper继承BaseMapper</h3><p>之前的Mybatis，需要写mapper接口，还需要写它的实现类，实现类中药写所有的CRUD方法，以下为Mybatis：<br><img src="https://img-blog.csdnimg.cn/20210124162739567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124162908818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在的Mybatis-plus，无须繁琐的CRUD方法，继承了BaseMapper，就已经完成了简单增删改查的方法<br><img src="https://img-blog.csdnimg.cn/20210124162356852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面进行CRUD测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.example.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setBirth(<span class="string">"1997-10-14"</span>);</span><br><span class="line">        user.setGender(<span class="string">"男"</span>);</span><br><span class="line">        user.setName(<span class="string">"小马先生"</span>);</span><br><span class="line">        user.setRole(<span class="string">"admin"</span>);</span><br><span class="line">        user.setSuggestion(<span class="string">"所有的不平凡都来自平凡"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">28</span>);</span><br><span class="line"><span class="comment">//        user.setBirth("1996-10-1");</span></span><br><span class="line">        user.setSuggestion(<span class="string">"所有的不平凡都来自平凡"</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 测试乐观锁  成功案例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1、查询用户信息</span></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2、修改用户信息</span></span><br><span class="line">        user.setName(<span class="string">"刘邦"</span>);</span><br><span class="line">        user.setGender(<span class="string">"女"</span>);</span><br><span class="line">        <span class="comment">//3、执行更新操作</span></span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 测试乐观锁  失败案例---多线程下</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程1</span></span><br><span class="line"></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"刘邦"</span>);</span><br><span class="line">        user.setGender(<span class="string">"女"</span>);</span><br><span class="line">        <span class="comment">//模拟另一个线程执行了插队操作</span></span><br><span class="line">       User user2 = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">       user2.setName(<span class="string">"刘备"</span>);</span><br><span class="line">       user2.setGender(<span class="string">"男"</span>);</span><br><span class="line">       userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//自旋锁来多次尝试提交</span></span><br><span class="line">       userMapper.updateById(user);<span class="comment">// 如果没有乐观锁就会覆盖插队线程的值!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">//批量查询固定id 集合传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBuBatchId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(users.get(1).getName());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//用map来指定字段查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBuBatchId2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"徐淑高"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//测试分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>); <span class="comment">//current当前页 size大小</span></span><br><span class="line">        userMapper.selectPage(page,<span class="keyword">null</span>); <span class="comment">//wrapper是高级查询</span></span><br><span class="line"></span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">28</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"小马先生"</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>实体类User中，可以对该实体类进行表名绑定（如果表名和实体类名不一致时）</p></li><li><p>对于类建立的Getter、Setter、有参无参可以通过lombok注解来简化<br><img src="https://img-blog.csdnimg.cn/20210124163325833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012416350528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>阿里的数据库构建规范中，需要给每个表至少拥有create_time、update_time字段，这个可以通过写一个MyMetaObjectHandler类来实现官方给的MetaObjectHandler接口，覆盖重写插入时候的填充策略、更新时候的填充策略，记得用@Component丢进spring中，即可保证在插入时候、更新时候，create_time、update_time字段同步更新，无须手动写时间<br><img src="https://img-blog.csdnimg.cn/2021012416372831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>乐观锁和分页，按照官网进行配置即可，乐观锁需要加一个version字段，在操作数据库时会判断version版本</p></li></ul><p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁!如果出现了问题， 再次更新值测试<br>悲观锁:故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁!再去操作!</p><p>我们这里主要讲解 乐观锁机制! 乐观锁实现方式:</p><ol><li>取出记录时，获取当前 version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion 如果version不对，就更新失败</li></ol><p>乐观锁和分页插件对应的config：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatisplus.example.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------分页插件</span></span><br><span class="line">    <span class="comment">// 分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MyBatisPlus概述&quot;&gt;&lt;a href=&quot;#MyBatisPlus概述&quot; class=&quot;headerlink&quot; title=&quot;MyBatisPlus概述&quot;&gt;&lt;/a&gt;MyBatisPlus概述&lt;/h2&gt;&lt;p&gt;需要的基础:把我的MyBatis、Spring、Sp</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Springboot/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="Mybatis-plus" scheme="https://ericzikun.github.io/tags/Mybatis-plus/"/>
    
  </entry>
  
  <entry>
    <title>【Springboot】Redis学习笔记</title>
    <link href="https://ericzikun.github.io/2021/01/04/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ericzikun.github.io/2021/01/04/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-04T04:16:51.000Z</published>
    <updated>2021-01-24T08:47:42.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><p> 1、单机Mysql时代</p><p><img src="https://img-blog.csdnimg.cn/20210124122915940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）<br>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！<br><img src="https://img-blog.csdnimg.cn/20210124122903412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><p>3、分库分表 + 水平拆分 + Mysql集群<br>技术和业务在发展的同时，对人的要求也越来越高!<br>本质:数据库(读，写)<br>早些年MyISAM: 表锁，十分影响效率!高并发下就会出现严重的锁问题 转战Innodb:行锁<br>慢慢的就开始使用分库分表来解决写的压力! MySQL 在哪个年代推出 了表分区!这个并没有多少公司 使用!<br>MySQL 的 集群，很好满足哪个年代的所有需求!<br><img src="https://img-blog.csdnimg.cn/20210124123205551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、如今最近的年代<br>2010–2020 十年之间，世界已经发生了翻天覆地的变化;(定位，也是一种数据，音乐，热榜!) MySQL 等关系型数据库就不够用了!数据量很多，变化很快~!<br>MySQL 有的使用它来存储一些比较大的文件，博客，图片!数据库表很大，效率就低了!如果有一种数 据库来专门处理这种数据,<br>MySQL压力就变得十分小(研究如何处理这些问题!)大数据的IO压力下，表几乎没法更大!</p><p>目前一个基本的互联网项目!<br><img src="https://img-blog.csdnimg.cn/20210124123324246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为什么要用NoSQL!<br>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">传统的 RDBMS(关系型数据库)</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中 row col</span><br><span class="line">- 操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Nosql</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP定理和BASE</span><br><span class="line">- 高性能，高可用，高扩展</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>了解：3V + 3高<br>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p><strong>文档型数据库（bson数据格式）：</strong></p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p><strong>列存储数据库</strong></p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p><strong>图关系数据库</strong></p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table><h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis能该干什么？</p></blockquote><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p><h3 id="安装（略）"><a href="#安装（略）" class="headerlink" title="安装（略）"></a>安装（略）</h3><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3></li></ol><p><strong>redis-benchmark：</strong> Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="https://img-blog.csdnimg.cn/20210124133354636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>简单测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210124133436761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>redis默认有16个数据库<br><img src="https://img-blog.csdnimg.cn/20210124133502896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认使用的第0个;</p></blockquote><p>16个数据库为：DB 0~DB 15<br>默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get databases <span class="comment"># 命令行查看数据库数量databases</span></span><br><span class="line">1) <span class="string">"databases"</span></span><br><span class="line">2) <span class="string">"16"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; select 8 <span class="comment"># 切换数据库 DB 8</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SELECT 8</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; get name <span class="comment"># db8中并不能获取db0中的键值对。</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[8]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[8]&gt; SELECT 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"counter:__rand_int__"</span></span><br><span class="line">2) <span class="string">"mylist"</span></span><br><span class="line">3) <span class="string">"name"</span></span><br><span class="line">4) <span class="string">"key:__rand_int__"</span></span><br><span class="line">5) <span class="string">"myset:__rand_int__"</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE <span class="comment"># size和key个数相关</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><blockquote><p><strong>Redis是单线程的，Redis是基于内存操作的。</strong></p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p><strong>Redis为什么单线程还这么快？</strong></p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p><h2 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h2><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html" target="_blank" rel="noopener">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html" target="_blank" rel="noopener">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html" target="_blank" rel="noopener">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html" target="_blank" rel="noopener">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html" target="_blank" rel="noopener">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html" target="_blank" rel="noopener">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html" target="_blank" rel="noopener">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html" target="_blank" rel="noopener">分区</a>。</p><h3 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h3><blockquote><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p></blockquote><p>下面学习的命令：</p><ul><li><code>exists key</code>：判断键是否存在</li><li><code>del key</code>：删除键值对</li><li><code>move key db</code>：将键值对移动到指定数据库</li><li><code>expire key second</code>：设置键值对的过期时间</li><li><code>type key</code>：查看value的数据类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看当前数据库所有key</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qinjiang <span class="comment"># set key</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; move age 1 <span class="comment"># 将键值对移动到指定数据库</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS age <span class="comment"># 判断键是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; del age <span class="comment"># 删除键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 删除个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE age 15 <span class="comment"># 设置键值对的过期时间</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 设置成功 开始计数</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age <span class="comment"># 查看key的过期剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2 <span class="comment"># -2 表示key过期，-1表示key未设置过期时间</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get age <span class="comment"># 过期的key 会被自动delete</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看value的数据类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>关于<code>TTL</code>命令</p><p>Redis的key，通过TTL命令返回key的==过期时间==，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ul><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ul><p>更多命令学习：<a href="https://www.redis.net.cn/order/" target="_blank" rel="noopener">https://www.redis.net.cn/order/</a></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wBVZtGVm-1597890996517)(狂神说 Redis.assets/image-20200813114228439.png)]</p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>普通的set、get直接略过。</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>APPEND key value</code></td><td>向指定的key的value后追加字符串</td><td>127.0.0.1:6379&gt; set msg hello OK 127.0.0.1:6379&gt; append msg “ world” (integer) 11 127.0.0.1:6379&gt; get msg “hello world”</td></tr><tr><td><code>DECR/INCR key</code></td><td>将指定key的value数值进行+1/-1(仅对于数字)</td><td>127.0.0.1:6379&gt; set age 20 OK 127.0.0.1:6379&gt; incr age (integer) 21 127.0.0.1:6379&gt; decr age (integer) 20</td></tr><tr><td><code>INCRBY/DECRBY key n</code></td><td>按指定的步长对数值进行加减</td><td>127.0.0.1:6379&gt; INCRBY age 5 (integer) 25 127.0.0.1:6379&gt; DECRBY age 10 (integer) 15</td></tr><tr><td><code>INCRBYFLOAT key n</code></td><td>为数值加上浮点型数值</td><td>127.0.0.1:6379&gt; INCRBYFLOAT age 5.2 “20.2”</td></tr><tr><td><code>STRLEN key</code></td><td>获取key保存值的字符串长度</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; STRLEN msg (integer) 11</td></tr><tr><td><code>GETRANGE key start end</code></td><td>按起止位置获取字符串（闭区间，起止位置都取）</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; GETRANGE msg 3 9 “lo worl”</td></tr><tr><td><code>SETRANGE key offset value</code></td><td>用指定的value 替换key中 offset开始的值</td><td>127.0.0.1:6379&gt; SETRANGE msg 2 hello (integer) 7 127.0.0.1:6379&gt; get msg “tehello”</td></tr><tr><td><code>GETSET key value</code></td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td><td>127.0.0.1:6379&gt; GETSET msg test “hello world”</td></tr><tr><td><code>SETNX key value</code></td><td>仅当key不存在时进行set</td><td>127.0.0.1:6379&gt; SETNX msg test (integer) 0 127.0.0.1:6379&gt; SETNX name sakura (integer) 1</td></tr><tr><td><code>SETEX key seconds value</code></td><td>set 键值对并设置过期时间</td><td>127.0.0.1:6379&gt; setex name 10 root OK 127.0.0.1:6379&gt; get name (nil)</td></tr><tr><td><code>MSET key1 value1 [key2 value2..]</code></td><td>批量set键值对</td><td>127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 OK</td></tr><tr><td><code>MSETNX key1 value1 [key2 value2..]</code></td><td>批量设置键值对，仅当参数中所有的key都不存在时执行</td><td>127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4 (integer) 0</td></tr><tr><td><code>MGET key1 [key2..]</code></td><td>批量获取多个key保存的值</td><td>127.0.0.1:6379&gt; MGET k1 k2 k3 1) “v1” 2) “v2” 3) “v3”</td></tr><tr><td><code>PSETEX key milliseconds value</code></td><td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td><td></td></tr><tr><td><code>getset key value</code></td><td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td><td></td></tr></tbody></table><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li>计数器</li><li>统计多单位的数量：uid:123666：follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p></blockquote><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等<br><img src="https://img-blog.csdnimg.cn/20210124133604137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>LPUSH/RPUSH key value1[value2..]</code></td><td>从左边/右边向列表中PUSH值(一个或者多个)。</td></tr><tr><td><code>LRANGE key start end</code></td><td>获取list 起止元素==（索引从左往右 递增）==</td></tr><tr><td><code>LPUSHX/RPUSHX key value</code></td><td>向已存在的列名中push值（一个或者多个）</td></tr><tr><td>`LINSERT key BEFORE</td><td>AFTER pivot value`</td></tr><tr><td><code>LLEN key</code></td><td>查看列表长度</td></tr><tr><td><code>LINDEX key index</code></td><td>通过索引获取列表元素</td></tr><tr><td><code>LSET key index value</code></td><td>通过索引为元素设值</td></tr><tr><td><code>LPOP/RPOP key</code></td><td>从最左边/最右边移除值 并返回</td></tr><tr><td><code>RPOPLPUSH source destination</code></td><td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td></tr><tr><td><code>LTRIM key start end</code></td><td>通过下标截取指定范围内的列表</td></tr><tr><td><code>LREM key count value</code></td><td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td></tr><tr><td><code>BLPOP/BRPOP key1[key2] timout</code></td><td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>BRPOPLPUSH source destination timeout</code></td><td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">---------------------------LPUSH---RPUSH---LRANGE--------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k1 <span class="comment"># LPUSH mylist=&gt;&#123;1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k2 <span class="comment"># LPUSH mylist=&gt;&#123;2,1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist k3 <span class="comment"># RPUSH mylist=&gt;&#123;2,1,3&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; get mylist <span class="comment"># 普通的get是无法获取list值的</span></span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 4 <span class="comment"># LRANGE 获取起止位置范围内的元素</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 2</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 1</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1 <span class="comment"># 获取全部元素</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LPUSHX---RPUSHX-----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 <span class="comment"># list不存在 LPUSHX失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 v2  </span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX mylist k4 k5 <span class="comment"># 向mylist中 左边 PUSH k4 k5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"k1"</span></span><br><span class="line">5) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after k2 ins_key1 <span class="comment"># 在k2元素后 插入ins_key1</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"ins_key1"</span></span><br><span class="line">5) <span class="string">"k1"</span></span><br><span class="line">6) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LLEN mylist <span class="comment"># 查看mylist的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 3 <span class="comment"># 获取下标为3的元素</span></span><br><span class="line"><span class="string">"ins_key1"</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 0</span><br><span class="line"><span class="string">"k5"</span></span><br><span class="line">127.0.0.1:6379&gt; LSET mylist 3 k6 <span class="comment"># 将下标3的元素 set值为k6</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"k6"</span></span><br><span class="line">5) <span class="string">"k1"</span></span><br><span class="line">6) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LPOP--RPOP--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPOP mylist <span class="comment"># 左侧(头部)弹出</span></span><br><span class="line"><span class="string">"k5"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP mylist <span class="comment"># 右侧(尾部)弹出</span></span><br><span class="line"><span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------RPOPLPUSH--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k6"</span></span><br><span class="line">4) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist newlist <span class="comment"># 将mylist的最后一个值(k1)弹出，加入到newlist的头部</span></span><br><span class="line"><span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1</span><br><span class="line">1) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k6"</span></span><br><span class="line"></span><br><span class="line">---------------------------LTRIM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 0 1 <span class="comment"># 截取mylist中的 0~1部分</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始 mylist: k2,k2,k2,k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line">---------------------------LREM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist 3 k2 <span class="comment"># 从头部开始搜索 至多删除3个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist -2 k2 <span class="comment">#从尾部开始搜索 至多删除2个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------BLPOP--BRPOP--------------------------</span><br><span class="line"></span><br><span class="line">mylist: k2,k2,k2,k4,k2,k2</span><br><span class="line">newlist: k1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30 <span class="comment"># 从newlist中弹出第一个值，mylist作为候选</span></span><br><span class="line">1) <span class="string">"newlist"</span> <span class="comment"># 弹出</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30</span><br><span class="line">1) <span class="string">"mylist"</span> <span class="comment"># 由于newlist空了 从mylist中弹出</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30</span><br><span class="line">(30.10s) <span class="comment"># 超时了</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30 <span class="comment"># 我们连接另一个客户端向newlist中push了test, 阻塞被解决。</span></span><br><span class="line">1) <span class="string">"newlist"</span></span><br><span class="line">2) <span class="string">"test"</span></span><br><span class="line">(12.54s)</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li><strong>如果key不存在，则创建新的链表</strong></li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p><strong>应用：</strong></p><p><strong>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</strong></p><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><blockquote><p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SADD key member1[member2..]</code></td><td>向集合中无序增加一个/多个成员</td></tr><tr><td><code>SCARD key</code></td><td>获取集合的成员数</td></tr><tr><td><code>SMEMBERS key</code></td><td>返回集合中所有的成员</td></tr><tr><td><code>SISMEMBER key member</code></td><td>查询member元素是否是集合的成员,结果是无序的</td></tr><tr><td><code>SRANDMEMBER key [count]</code></td><td>随机返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SPOP key [count]</code></td><td>随机移除并返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SMOVE source destination member</code></td><td>将source集合的成员member移动到destination集合</td></tr><tr><td><code>SREM key member1[member2..]</code></td><td>移除集合中一个/多个成员</td></tr><tr><td><code>SDIFF key1[key2..]</code></td><td>返回所有集合的差集 key1- key2 - …</td></tr><tr><td><code>SDIFFSTORE destination key1[key2..]</code></td><td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td></tr><tr><td><code>SINTER key1 [key2..]</code></td><td>返回所有集合的交集</td></tr><tr><td><code>SINTERSTORE destination key1[key2..]</code></td><td>在SINTER的基础上，存储结果到集合中。覆盖</td></tr><tr><td><code>SUNION key1 [key2..]</code></td><td>返回所有集合的并集</td></tr><tr><td><code>SUNIONSTORE destination key1 [key2..]</code></td><td>在SUNION的基础上，存储结果到及和张。覆盖</td></tr><tr><td><code>SSCAN KEY [MATCH pattern] [COUNT count]</code></td><td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SADD myset m1 m2 m3 m4 <span class="comment"># 向myset中增加成员 m1~m4</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; SCARD myset <span class="comment"># 获取集合的成员数目</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment"># 获取集合中所有成员</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">4) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m5 <span class="comment"># 查询m5是否是myset的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不是，返回0</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m2</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 是，返回1</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">---------------------SRANDMEMBER--SPOP----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 3 <span class="comment"># 随机返回3个成员</span></span><br><span class="line">1) <span class="string">"m2"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m4"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset <span class="comment"># 随机返回1个成员</span></span><br><span class="line"><span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 2 <span class="comment"># 随机移除并返回2个成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m4"</span></span><br><span class="line"><span class="comment"># 将set还原到&#123;m1,m2,m3,m4&#125;</span></span><br><span class="line"></span><br><span class="line">---------------------SMOVE--SREM----------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset newset m3 <span class="comment"># 将myset中m3成员移动到newset集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m2"</span></span><br><span class="line">3) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">1) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; SREM newset m3 <span class="comment"># 从newset中移除m3元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算</span></span><br><span class="line"><span class="comment"># setx=&gt;&#123;m1,m2,m4,m6&#125;, sety=&gt;&#123;m2,m5,m6&#125;, setz=&gt;&#123;m1,m3,m6&#125;</span></span><br><span class="line"></span><br><span class="line">-----------------------------SDIFF------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety setz <span class="comment"># 等价于setx-sety-setz</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety <span class="comment"># setx - sety</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF sety setx <span class="comment"># sety - setx</span></span><br><span class="line">1) <span class="string">"m5"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------SINTER---------------------------------------</span><br><span class="line"><span class="comment"># 共同关注（交集）</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety setz <span class="comment"># 求 setx、sety、setx的交集</span></span><br><span class="line">1) <span class="string">"m6"</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety <span class="comment"># 求setx sety的交集</span></span><br><span class="line">1) <span class="string">"m2"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line"></span><br><span class="line">-------------------------SUNION---------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety setz <span class="comment"># setx sety setz的并集</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line">3) <span class="string">"m3"</span></span><br><span class="line">4) <span class="string">"m2"</span></span><br><span class="line">5) <span class="string">"m1"</span></span><br><span class="line">6) <span class="string">"m5"</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety <span class="comment"># setx sety 并集</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">4) <span class="string">"m1"</span></span><br><span class="line">5) <span class="string">"m5"</span></span><br></pre></td></tr></table></figure><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>HSET key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td></tr><tr><td><code>HMSET key field1 value1 [field2 value2..]</code></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td><code>HSETNX key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><code>HEXISTS key field</code></td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td><code>HGET key field value</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>HMGET key field1 [field2..]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>HGETALL key</code></td><td>获取在哈希表key 的所有字段和值</td></tr><tr><td><code>HKEYS key</code></td><td>获取哈希表key中所有的字段</td></tr><tr><td><code>HLEN key</code></td><td>获取哈希表中字段的数量</td></tr><tr><td><code>HVALS key</code></td><td>获取哈希表中所有值</td></tr><tr><td><code>HDEL key field1 [field2..]</code></td><td>删除哈希表key中一个/多个field字段</td></tr><tr><td><code>HINCRBY key field n</code></td><td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td></tr><tr><td><code>HINCRBYFLOAT key field n</code></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td></tr><tr><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代哈希表中的键值对。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">------------------------HSET--HMSET--HSETNX----------------</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name sakura <span class="comment"># 将studentx哈希表作为一个对象，设置name为sakura</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name gyc <span class="comment"># 重复设置field进行覆盖，并返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx age 20 <span class="comment"># 设置studentx的age为20</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HMSET studentx sex 1 tel 15623667886 <span class="comment"># 设置sex为1，tel为15623667886</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx name gyc <span class="comment"># HSETNX 设置已存在的field</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 失败</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx email 12345@qq.com</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 成功</span></span><br><span class="line"></span><br><span class="line">----------------------HEXISTS--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx name <span class="comment"># name字段在studentx中是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx addr</span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line"></span><br><span class="line">-------------------HGET--HMGET--HGETALL-----------</span><br><span class="line">127.0.0.1:6379&gt; HGET studentx name <span class="comment"># 获取studentx中name字段的value</span></span><br><span class="line"><span class="string">"gyc"</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET studentx name age tel <span class="comment"># 获取studentx中name、age、tel字段的value</span></span><br><span class="line">1) <span class="string">"gyc"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"15623667886"</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL studentx <span class="comment"># 获取studentx中所有的field及其value</span></span><br><span class="line"> 1) <span class="string">"name"</span></span><br><span class="line"> 2) <span class="string">"gyc"</span></span><br><span class="line"> 3) <span class="string">"age"</span></span><br><span class="line"> 4) <span class="string">"20"</span></span><br><span class="line"> 5) <span class="string">"sex"</span></span><br><span class="line"> 6) <span class="string">"1"</span></span><br><span class="line"> 7) <span class="string">"tel"</span></span><br><span class="line"> 8) <span class="string">"15623667886"</span></span><br><span class="line"> 9) <span class="string">"email"</span></span><br><span class="line">10) <span class="string">"12345@qq.com"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------HKEYS--HLEN--HVALS--------------</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx <span class="comment"># 查看studentx中所有的field</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">3) <span class="string">"sex"</span></span><br><span class="line">4) <span class="string">"tel"</span></span><br><span class="line">5) <span class="string">"email"</span></span><br><span class="line">127.0.0.1:6379&gt; HLEN studentx <span class="comment"># 查看studentx中的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; HVALS studentx <span class="comment"># 查看studentx中所有的value</span></span><br><span class="line">1) <span class="string">"gyc"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"1"</span></span><br><span class="line">4) <span class="string">"15623667886"</span></span><br><span class="line">5) <span class="string">"12345@qq.com"</span></span><br><span class="line"></span><br><span class="line">-------------------------HDEL--------------------------</span><br><span class="line">127.0.0.1:6379&gt; HDEL studentx sex tel <span class="comment"># 删除studentx 中的sex、tel字段</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">3) <span class="string">"email"</span></span><br><span class="line"></span><br><span class="line">-------------HINCRBY--HINCRBYFLOAT------------------------</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx age 1 <span class="comment"># studentx的age字段数值+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx name 1 <span class="comment"># 非整数字型字段不可用</span></span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT studentx weight 0.6 <span class="comment"># weight字段增加0.6</span></span><br><span class="line"><span class="string">"90.8"</span></span><br></pre></td></tr></table></figure><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！<strong>Hash更适合于对象的存储，Sring更加适合字符串存储！</strong></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>ZADD key score member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间score的成员数</td></tr><tr><td><code>ZINCRBY key n member</code></td><td>有序集合中对指定成员的分数加上增量 n</td></tr><tr><td><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><code>ZRANGE key start end</code></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><code>ZRANGEBYLEX key min max</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><code>ZRANGEBYSCORE key min max</code></td><td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td></tr><tr><td><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><code>ZREM key member1 [member2..]</code></td><td>移除有序集合中一个/多个成员</td></tr><tr><td><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><code>ZREVRANGE key start end</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><code>ZREVRANGEBYSCORRE key max min</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><code>ZREVRANGEBYLEX key max min</code></td><td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td></tr><tr><td><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td></tr><tr><td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">-------------------ZADD--ZCARD--ZCOUNT--------------</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 <span class="comment"># 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myzset <span class="comment"># 获取有序集合的成员数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 1 <span class="comment"># 获取score在 [0,1]区间的成员数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line">----------------ZINCRBY--ZSCORE--------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 <span class="comment"># 将成员m2的score +5</span></span><br><span class="line"><span class="string">"7"</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m1 <span class="comment"># 获取成员m1的score</span></span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m2</span><br><span class="line"><span class="string">"7"</span></span><br><span class="line"></span><br><span class="line">--------------ZRANK--ZRANGE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m1 <span class="comment"># 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 1 <span class="comment"># 获取索引在 0~1的成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 -1 <span class="comment"># 获取全部成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#testset=&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0</span></span><br><span class="line">------------------ZRANGEBYLEX---------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + <span class="comment"># 返回所有成员</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">4) <span class="string">"apple"</span></span><br><span class="line">5) <span class="string">"back"</span></span><br><span class="line">6) <span class="string">"java"</span></span><br><span class="line">7) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 <span class="comment"># 分页 按索引显示查询结果的 0,1,2条记录</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 <span class="comment"># 显示 3,4,5条记录</span></span><br><span class="line">1) <span class="string">"apple"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple <span class="comment"># 显示 (-,apple] 区间内的成员</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">4) <span class="string">"apple"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java <span class="comment"># 显示 [apple,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">"apple"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line"></span><br><span class="line">-----------------------ZRANGEBYSCORE---------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 <span class="comment"># 返回score在 [1,10]之间的的成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 5</span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line"></span><br><span class="line">--------------------ZLEXCOUNT-----------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset - +</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREM testset abc <span class="comment"># 移除成员abc</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java <span class="comment"># 移除字典区间[apple,java]中的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 <span class="comment"># 移除排名0~1的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 <span class="comment"># 移除score在 [0,3]的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># testset=&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0</span></span><br><span class="line"><span class="comment"># myzset=&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;</span></span><br><span class="line">----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 <span class="comment"># 按score递减排序，然后按索引，返回结果的 0~3</span></span><br><span class="line">1) <span class="string">"m9"</span></span><br><span class="line">2) <span class="string">"m7"</span></span><br><span class="line">3) <span class="string">"m4"</span></span><br><span class="line">4) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 <span class="comment"># 返回排序结果的 索引的2~4</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 <span class="comment"># 按score递减顺序 返回集合中分数在[2,6]之间的成员</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add <span class="comment"># 按字典倒序 返回集合中(add,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">"java"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"apple"</span></span><br><span class="line">4) <span class="string">"amaze"</span></span><br><span class="line"></span><br><span class="line">-------------------------ZREVRANK------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m7 <span class="comment"># 按score递减顺序，返回成员m7索引</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mathscore=&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩</span></span><br><span class="line"><span class="comment"># enscore=&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩</span></span><br><span class="line">-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore <span class="comment"># 将mathscore enscore进行合并 结果存放到sumscore</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores <span class="comment"># 合并后的score是之前集合中所有score的和</span></span><br><span class="line">1) <span class="string">"xm"</span></span><br><span class="line">2) <span class="string">"160"</span></span><br><span class="line">3) <span class="string">"xg"</span></span><br><span class="line">4) <span class="string">"177"</span></span><br><span class="line">5) <span class="string">"xh"</span></span><br><span class="line">6) <span class="string">"188"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN <span class="comment"># 取两个集合的成员score最小值作为结果的</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores</span><br><span class="line">1) <span class="string">"xm"</span></span><br><span class="line">2) <span class="string">"70"</span></span><br><span class="line">3) <span class="string">"xg"</span></span><br><span class="line">4) <span class="string">"87"</span></span><br><span class="line">5) <span class="string">"xh"</span></span><br><span class="line">6) <span class="string">"93"</span></span><br></pre></td></tr></table></figure><p>应用案例：</p><ul><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ul><h2 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h2><h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial(地理位置)"></a>Geospatial(地理位置)</h3><blockquote><p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td><td>将具体经纬度的坐标存入一个有序集合</td></tr><tr><td><code>geopos key member [member..]</code></td><td>获取集合中的一个/多个成员坐标</td></tr><tr><td><code>geodist key member1 member2 [unit]</code></td><td>返回两个给定位置之间的距离。默认以米作为单位。</td></tr><tr><td>`georadius key longitude latitude radius m</td><td>km</td></tr><tr><td><code>GEORADIUSBYMEMBER key member radius...</code></td><td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td></tr><tr><td><code>geohash key member1 [member2..]</code></td><td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td></tr></tbody></table><p><strong>有效经纬度</strong></p><blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p><strong>关于GEORADIUS的参数</strong></p><blockquote><p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">----------------georadius---------------------</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 120 30 500 km withcoord withdist <span class="comment"># 查询经纬度(120,30)坐标500km半径内的成员</span></span><br><span class="line">1) 1) <span class="string">"hangzhou"</span></span><br><span class="line">   2) <span class="string">"29.4151"</span></span><br><span class="line">   3) 1) <span class="string">"120.20000249147415"</span></span><br><span class="line">      2) <span class="string">"30.199999888333501"</span></span><br><span class="line">2) 1) <span class="string">"shanghai"</span></span><br><span class="line">   2) <span class="string">"205.3611"</span></span><br><span class="line">   3) 1) <span class="string">"121.40000134706497"</span></span><br><span class="line">      2) <span class="string">"31.400000253193539"</span></span><br><span class="line">     </span><br><span class="line">------------geohash---------------------------</span><br><span class="line">127.0.0.1:6379&gt; geohash china:city yichang shanghai <span class="comment"># 获取成员经纬坐标的geohash表示</span></span><br><span class="line">1) <span class="string">"wmrjwbr5250"</span></span><br><span class="line">2) <span class="string">"wtw6ds0y300"</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>数据集中不重复的元素的个数。</p></blockquote><p><strong>应用场景：</strong></p><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><blockquote><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PFADD key element1 [elememt2..]</code></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><code>PFCOUNT key [key]</code></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">----------PFADD--PFCOUNT---------------------</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemx a b c d e f g h i j k <span class="comment"># 添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> myelemx <span class="comment"># hyperloglog底层使用String</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemx <span class="comment"># 估算myelemx的基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemy i j k z m c b v p q s</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemy</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line">----------------PFMERGE-----------------------</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE myelemz myelemx myelemy <span class="comment"># 合并myelemx和myelemy 成为myelemz</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemz <span class="comment"># 估算基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br></pre></td></tr></table></figure><p>如果允许容错，那么一定可以使用Hyperloglog !</p><p>如果不允许容错，就使用set或者自己的数据类型即可 ！</p><h3 id="BitMaps-位图"><a href="#BitMaps-位图" class="headerlink" title="BitMaps(位图)"></a>BitMaps(位图)</h3><blockquote><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p></blockquote><p><strong>应用场景</strong></p><p>签到统计、状态统计</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>setbit key offset value</code></td><td>为指定key的offset位设置值</td></tr><tr><td><code>getbit key offset</code></td><td>获取offset位的值</td></tr><tr><td><code>bitcount key [start end]</code></td><td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td></tr><tr><td><code>bitop operration destkey key[key..]</code></td><td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td></tr><tr><td><code>BITPOS key bit [start] [end]</code></td><td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">------------setbit--getbit--------------</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1 <span class="comment"># 设置sign的第0位为 1 </span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 1 <span class="comment"># 设置sign的第2位为 1  不设置默认 是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> sign</span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2 <span class="comment"># 获取第2位的数值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 4 <span class="comment"># 未设置默认是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">-----------bitcount----------------------------</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign <span class="comment"># 统计sign中为1的位数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><p><strong>bitmaps的底层</strong></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PlszjhS-1597890996519)(D:\我\MyBlog\狂神说 Redis.assets\image-20200803234336175.png)]</p><p>这样设置以后你能get到的值是：<strong>\xA2\x80</strong>，所以bitmaps是一串从左到右的二进制串</p><h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性</p><blockquote><p>Redis事务本质：一组命令的集合。</p><p>—————– 队列 set set set 执行 ——————-</p><p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p><ul><li>一次性</li><li>顺序性</li><li>排他性</li></ul><hr><ol><li>Redis事务没有隔离级别的概念</li><li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li></ol></blockquote><h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul><li>开启事务（<code>multi</code>）</li><li>命令入队</li><li>执行事务（<code>exec</code>）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1 <span class="comment"># 命令入队</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2 <span class="comment"># ..</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 事务执行</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">4) OK</span><br><span class="line">5) 1) <span class="string">"k3"</span></span><br><span class="line">   2) <span class="string">"k2"</span></span><br><span class="line">   3) <span class="string">"k1"</span></span><br></pre></td></tr></table></figure><p><strong>取消事务(<code>discurd</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD <span class="comment"># 放弃事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXEC </span><br><span class="line">(error) ERR EXEC without MULTI <span class="comment"># 当前未开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 <span class="comment"># 被放弃事务中命令并未执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote><p>代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; error k1 <span class="comment"># 这是一条语法错误命令</span></span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> `error`, with args beginning with: `k1`, <span class="comment"># 会报错但是不影响后续命令入队 </span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors. <span class="comment"># 执行报错</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 </span><br><span class="line">(nil) <span class="comment"># 其他命令并没有被执行</span></span><br></pre></td></tr></table></figure><blockquote><p>代码逻辑错误 (运行时异常) *<em>其他命令可以正常执行 *</em> &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1 <span class="comment"># 这条命令逻辑错误（对字符串进行增量）</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 运行时报错</span></span><br><span class="line">4) <span class="string">"v2"</span> <span class="comment"># 其他命令正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。</span></span><br><span class="line"><span class="comment"># 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span></span><br></pre></td></tr></table></figure><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100 <span class="comment"># 设置余额:100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> use 0 <span class="comment"># 支出使用:0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money (上锁)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 监视值没有被中途修改，事务正常执行</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p></blockquote><p>我们启动另外一个客户端模拟插队线程。</p><p>线程1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># money上锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="comment"># 此时事务并没有执行</span></span><br></pre></td></tr></table></figure><p>模拟线程插队，线程2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY money 500 <span class="comment"># 修改了线程一中监视的money</span></span><br><span class="line">(<span class="built_in">integer</span>) 600</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>回到线程1，执行事务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXEC <span class="comment"># 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败</span></span><br><span class="line">(nil) <span class="comment"># 没有结果，说明事务执行失败</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get money <span class="comment"># 线程2 修改生效</span></span><br><span class="line"><span class="string">"600"</span></span><br><span class="line">127.0.0.1:6379&gt; get use <span class="comment"># 线程1事务执行失败，数值没有被修改</span></span><br><span class="line"><span class="string">"0"</span></span><br></pre></td></tr></table></figure><blockquote><p>解锁获取最新值，然后再加锁进行事务。</p><p><code>unwatch</code>进行解锁。</p></blockquote><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><p>SpringBoot 操作数据:spring-data jpa jdbc mongodb redis!<br>SpringData 也是和 SpringBoot 齐名的项目!<br>说明: 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?<br>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接 池! 更像 BIO 模式<br>lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况!可以减少线程数据 了，更像 NIO 模式<br>源码分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>) <span class="comment">// 我们可以自己定义一个 redisTemplate来替换这个默认的!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化!</span></span><br><span class="line"><span class="comment">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt; RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;(); template.setConnectionFactory(redisConnectionFactory);</span></span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一 个bean!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(); template.setConnectionFactory(redisConnectionFactory); <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合：</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置redis </span><br><span class="line">spring.redis.host&#x3D;127.0.0.1 </span><br><span class="line">spring.redis.port&#x3D;6379</span><br></pre></td></tr></table></figure></li><li>测试!<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line"><span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line"><span class="comment">// opsForList 操作List 类似List // opsForSet</span></span><br><span class="line"><span class="comment">// opsForHash</span></span><br><span class="line"><span class="comment">// opsForZSet</span></span><br><span class="line"><span class="comment">// opsForGeo</span></span><br><span class="line"><span class="comment">// opsForHyperLogLog</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//CRUD</span></span><br><span class="line"><span class="comment">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的</span></span><br><span class="line"><span class="comment">//获取redis的连接对象</span></span><br><span class="line"><span class="comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">// connection.flushDb();</span></span><br><span class="line"><span class="comment">// connection.flushAll();</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"mykey"</span>,<span class="string">"关注狂神说公众号"</span>); </span><br><span class="line">System.out.println(redisTemplate.opsForValue().get(<span class="string">"mykey"</span>));</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210124135025661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关于对象的保存:所有的对象需要序列化<br><img src="https://img-blog.csdnimg.cn/20210124135106502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写自己的RedisTemplate：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用! // 自己定义了一个 RedisTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">factory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,</span><br><span class="line">Object&gt;();</span><br><span class="line">template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">// Json序列化配置</span></span><br><span class="line">Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); </span><br><span class="line">om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// String 的序列化</span></span><br><span class="line">StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span></span><br><span class="line">StringRedisSerializer();</span><br><span class="line"><span class="comment">// key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer);</span></span><br><span class="line"><span class="comment">// hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer);</span></span><br><span class="line"><span class="comment">// value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer);</span></span><br><span class="line"><span class="comment">// hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet();</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h2><blockquote><p>容量单位不区分大小写，G和GB有区别<br><img src="https://img-blog.csdnimg.cn/20210124135434997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以使用 include 组合多个配置问题<br><img src="https://img-blog.csdnimg.cn/20210124135450341.png" alt="在这里插入图片描述"><br>网络配置<br><img src="https://img-blog.csdnimg.cn/20210124135512211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>日志输出级别<br><img src="https://img-blog.csdnimg.cn/20210124135532626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通用CENERAL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes # 以守护进程的方式运行，默认是 no，我们需要自己开启为yes!</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid # 如果以后台的方式运行，我们就需要指定一个 pid 文件!</span><br><span class="line"># 日志</span><br><span class="line"># Specify the server verbosity level. # This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development&#x2F;testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably) 生产环境 # warning (only very important &#x2F; critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot; # 日志的文件位置名</span><br><span class="line">databases 16 # 数据库的数量，默认是 16 个数据库</span><br><span class="line">always-show-logo yes # 是否总是显示LOGO</span><br></pre></td></tr></table></figure><p>快照:</p><p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof redis 是内存数据库，如果没有持久化，那么数据断电及失!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 900 1</span><br><span class="line"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 300 10</span><br><span class="line"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 60 10000</span><br><span class="line"># 我们之后学习持久化，会自己定义这个测试!</span><br><span class="line">stop-writes-on-bgsave-error yes </span><br><span class="line"># 持久化如果出错，是否还需要继续工作!</span><br><span class="line"> rdbcompression yes </span><br><span class="line"># 是否压缩 rdb 文件，需要消耗一些cpu资源!</span><br><span class="line">  rdbchecksum yes</span><br><span class="line"># 保存rdb文件的时候，进行错误的检查校验!</span><br><span class="line">dir .&#x2F;     # rdb 文件保存的目录!</span><br></pre></td></tr></table></figure><p>SECURITY 安全:<br>可以在这里设置redis的密码，默认是没有密码!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass # 获取redis的密码</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set requirepass &quot;123456&quot; # 设置redis的密码 OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass # 发现所有的命令都没有权限了 (error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 # 使用密码进行登录!</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;123456&quot;</span><br></pre></td></tr></table></figure><p>限制 CLIENTS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 # 设置能连接上redis的最大客户端的数量</span><br><span class="line">maxmemory &lt;bytes&gt; # redis 配置最大的内存容量</span><br><span class="line">maxmemory-policy noeviction # 内存到达上限之后的处理策略 </span><br><span class="line">1、volatile-lru:只对设置了过期时间的key进行LRU(默认值) </span><br><span class="line">2、allkeys-lru : 删除lru算法的key </span><br><span class="line">3、volatile-random:随机删除即将过期key </span><br><span class="line">4、allkeys-random:随机删除</span><br><span class="line">5、volatile-ttl : 删除即将过期的 </span><br><span class="line">6、noeviction : 永不过期，返回错误</span><br></pre></td></tr></table></figure><p>APPEND ONLY 模式 aof配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下， rdb完全够用!</span><br><span class="line">appendfilename &quot;appendonly.aof&quot; # 持久化的文件的名字</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"># 每次修改都会 sync。消耗性能</span><br><span class="line"># 每秒执行一次 sync，可能会丢失这1s的数据!</span><br><span class="line"># 不执行 sync，这个时候操作系统自己同步数据，速度最快!</span><br></pre></td></tr></table></figure><h2 id="持久化—RDB"><a href="#持久化—RDB" class="headerlink" title="持久化—RDB"></a>持久化—RDB</h2><p>RDB：Redis Databases</p><p>持久化规则<br>由于Redis是基于内存的数据库，需要将数据由内存持久化到文件中</p><p>持久化方式：</p><ul><li>RDB</li><li>AOF</li></ul><h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；<br><img src="https://img-blog.csdnimg.cn/20210124140255237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><hr><p>在进行 <strong><code>RDB</code></strong> 的时候，<strong><code>redis</code></strong> 的主线程是不会做 <strong><code>io</code></strong> 操作的，主线程会 <strong><code>fork</code></strong> 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)<br><img src="https://img-blog.csdnimg.cn/20210124140426860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><hr><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210124140533225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；</p><h4 id="触发持久化规则"><a href="#触发持久化规则" class="headerlink" title="触发持久化规则"></a>触发持久化规则</h4><p>满足配置条件中的触发条件 ；</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。<br><img src="https://img-blog.csdnimg.cn/20210124140607446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124140623863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；<br><img src="https://img-blog.csdnimg.cn/20210124140645467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>bgsave和save对比</strong></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞？</td><td>是</td><td>是（阻塞发生在fock()，通常非常快）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外的内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fock子进程，消耗内存</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点：</strong></p><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h2 id="十一、持久化AOF"><a href="#十一、持久化AOF" class="headerlink" title="十一、持久化AOF"></a>十一、持久化AOF</h2><p><strong>Append Only File</strong></p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Z8wr9lBW-1597890996525)(狂神说 Redis.assets/image-20200818123711375.png)]</p><blockquote><p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><h3 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h3><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>如果要使用AOF，需要修改配置文件：<br><img src="https://img-blog.csdnimg.cn/20210124140719611.png" alt="在这里插入图片描述"><br><code>appendonly no yes</code>则表示启用AOF</p><p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p><p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p><blockquote><p>优点和缺点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes  <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会sync 消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync 可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p><strong>缺点</strong></p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h2 id="十二、RDB和AOP选择"><a href="#十二、RDB和AOP选择" class="headerlink" title="十二、RDB和AOP选择"></a>十二、RDB和AOP选择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr></tbody></table><h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><h2 id="十三、Redis发布与订阅"><a href="#十三、Redis发布与订阅" class="headerlink" title="十三、Redis发布与订阅"></a>十三、Redis发布与订阅</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p><img src="https://img-blog.csdnimg.cn/20210124140904442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的 关系:<br><img src="https://img-blog.csdnimg.cn/20210124140944765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户 端:<br><img src="https://img-blog.csdnimg.cn/20210124141016130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>命令：<br>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。<br><img src="https://img-blog.csdnimg.cn/20210124141049171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试：<br>订阅端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE kuangshenshuo # 订阅一个频道 kuangshenshuo Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;kuangshenshuo&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line"># 等待读取推送的信息</span><br><span class="line">1) &quot;message&quot; # 消息</span><br><span class="line">2) &quot;kuangshenshuo&quot; # 那个频道的消息 3) &quot;hello,kuangshen&quot; # 消息的具体内容</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;kuangshenshuo&quot;</span><br><span class="line">3) &quot;hello,redis&quot;</span><br></pre></td></tr></table></figure><p>发送端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH kuangshenshuo &quot;hello,kuangshen&quot; # 发布者发布消息到频道! (integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH kuangshenshuo &quot;hello,redis&quot; # 发布者发布消息到频道! (integer) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>原理:<br>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍 此加深对 Redis 的理解。<br>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。<br>微信:<br>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道!， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。<br><img src="https://img-blog.csdnimg.cn/20210124141242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。<br><img src="https://img-blog.csdnimg.cn/20210124141419910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)，在Redis中，你可以设定对某一个 key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。<br>使用场景:<br>1、实时消息系统!<br>2、事实聊天!(频道当做聊天室，将信息回显给所有人即可!)<br>3、订阅，关注系统都是可以的!<br>稍微复杂的场景我们就会使用 消息中间件 MQ ()</p><h2 id="十四、Redis主从复制"><a href="#十四、Redis主从复制" class="headerlink" title="十四、Redis主从复制"></a>十四、Redis主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h3 id="为什么使用集群"><a href="#为什么使用集群" class="headerlink" title="为什么使用集群"></a>为什么使用集群</h3><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们在讲解配置文件的时候，注意到有一个<code>replication</code>模块 (见Redis.conf中第8条)</p><p>查看当前库的信息：<code>info replication</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 从机数量</span></span><br><span class="line">master_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcff</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>既然需要启动多个服务，就需要多个配置文件。每个配置文件对应修改以下信息：</p><ul><li>端口号</li><li>pid文件名</li><li>日志文件名</li><li>rdb文件名</li></ul><p>启动单机多服务集群：<br><img src="https://img-blog.csdnimg.cn/20210124141550717.png" alt="在这里插入图片描述"></p><h3 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h3><p>==默认情况下，每台Redis服务器都是主节点；==我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用<code>SLAVEOF host port</code>就可以为从机配置主机了。<br><img src="https://img-blog.csdnimg.cn/20210124141617285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后主机上也能看到从机的状态：<br><img src="https://img-blog.csdnimg.cn/20210124141634331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们这里是使用命令搭建，是暂时的，==真实开发中应该在从机的配置文件中进行配置，==这样的话是永久的。<br><img src="https://img-blog.csdnimg.cn/20210124141657721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ol><li><p>从机只能读，不能写，主机可读可写但是多用于写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 127.0.0.1:6381&gt; <span class="built_in">set</span> name sakura <span class="comment"># 从机6381写入失败</span></span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; set name sakura # 从机6380写入失败</span></span><br><span class="line"><span class="string">(error) READONLY You can'</span>t write against a <span class="built_in">read</span> only replica.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"sakura"</span></span><br></pre></td></tr></table></figure></li><li><p>当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p></li><li><p>当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p></li><li><p>第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令<code>slaveof no one</code>,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul></li></ol><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大呢？手动！</p></blockquote><p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么久重新连接！</p><h2 id="十五、哨兵模式"><a href="#十五、哨兵模式" class="headerlink" title="十五、哨兵模式"></a>十五、哨兵模式</h2><p>(自动选举老大的模式)</p><p>更多信息参考博客：<a href="https://www.jianshu.com/p/06ab9daf921d" target="_blank" rel="noopener">https://www.jianshu.com/p/06ab9daf921d</a></p><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>概述:<br>主从切换技术的方法是:当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵) 架构来解决这个问题。<br>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。 哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独<br>立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。<br><img src="https://img-blog.csdnimg.cn/20210124141957325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。 </li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服 务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。 各个哨兵之间还会进行监控，这样就形成了多哨兵模式。<br><img src="https://img-blog.csdnimg.cn/20210124142056745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认 为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一 定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 客观下线。<br>测试!<br>我们目前的状态是 一主二从! 1、配置哨兵配置文件 sentinel.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sentinel monitor 被监控的名称 host port 1 </span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p> 后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机!</p><p> 2、启动哨兵!<br> <img src="https://img-blog.csdnimg.cn/20210124142300348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124142312270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果Master 节点断开了，这个时候就会从从机中随机选择一个服务器! (这里面有一个投票算法!)<br><img src="https://img-blog.csdnimg.cn/20210124142333889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>哨兵日志!<br><img src="https://img-blog.csdnimg.cn/20210124142353788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则!</p><p>哨兵模式:<br>优点:<br>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有<br>2、 主从可以切换，故障可以转移，系统的可用性就会更好<br>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮!<br>缺点:<br>1、Redis 不好啊在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦! 2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择!</p><p>哨兵模式的全部配置!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379</span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel的工作目录</span><br><span class="line">dir &#x2F;tmp</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span><br><span class="line"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。  </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="line"># 默认三分钟</span><br><span class="line"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"># SCRIPTS EXECUTION</span><br><span class="line"> </span><br><span class="line">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><span class="line">#对于脚本的运行结果有以下规则：</span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="line">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><span class="line"> </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><br><span class="line">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="line">#一个是事件的类型，</span><br><span class="line">#一个是事件的描述。</span><br><span class="line">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="line">#通知脚本</span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">  sentinel notification-script mymaster &#x2F;var&#x2F;redis&#x2F;notify.sh</span><br><span class="line"> </span><br><span class="line"># 客户端重新配置主节点参数脚本</span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><span class="line"># 以下参数将会在调用脚本时传给脚本:</span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="line"># 目前&lt;state&gt;总是“failover”,</span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">sentinel client-reconfig-script mymaster &#x2F;var&#x2F;redis&#x2F;reconfig.sh</span><br></pre></td></tr></table></figure><h2 id="十六、缓存穿透与雪崩"><a href="#十六、缓存穿透与雪崩" class="headerlink" title="十六、缓存穿透与雪崩"></a>十六、缓存穿透与雪崩</h2><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote><p>概念</p></blockquote><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。<br><img src="https://img-blog.csdnimg.cn/20210124143010474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。<br><img src="https://img-blog.csdnimg.cn/20210124143032543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><blockquote><p>概念</p></blockquote><p> 相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><blockquote><p>解决方案</p></blockquote><ol><li><p><strong>设置热点数据永不过期</strong></p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p></li><li><p><strong>加互斥锁(分布式锁)</strong></p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。<br><img src="https://img-blog.csdnimg.cn/2021012414305256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>解决方案</p></blockquote><ul><li><p>redis高可用</p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p></li><li><p>限流降级</p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热</p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、Nosql概述&quot;&gt;&lt;a href=&quot;#一、Nosql概述&quot; class=&quot;headerlink&quot; title=&quot;一、Nosql概述&quot;&gt;&lt;/a&gt;一、Nosql概述&lt;/h2&gt;&lt;h3 id=&quot;为什么使用Nosql&quot;&gt;&lt;a href=&quot;#为什么使用Nosql&quot; cla</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Redis" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Redis/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="Redis" scheme="https://ericzikun.github.io/tags/Redis/"/>
    
    <category term="java" scheme="https://ericzikun.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门+进阶总结</title>
    <link href="https://ericzikun.github.io/2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-09T14:09:48.000Z</published>
    <updated>2020-12-09T14:11:40.229Z</updated>
    
    <content type="html"><![CDATA[<p>本文大量参考b站kuangshen的Docker视频</p><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     # 显示docker的版本信息</span><br><span class="line">docker info        # 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help  # 帮助命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/build/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像标签</span><br><span class="line">IMAGE ID    镜像id</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像id</span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3490                [OK]                </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项，通过收藏来过滤</span></span><br><span class="line">--filter=STARS=3000  #搜索出来的镜像就是STARS大于3000的</span><br><span class="line">[root@localhost /]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3490                [OK]</span><br></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@localhost /]# docker pull mysql</span><br><span class="line">Using default tag: latest    # 如果不写 tag,默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Pull complete  # 分层下载，docker image的核心 联合文件系统</span><br><span class="line">d51ce1c2e575: Pull complete </span><br><span class="line">c2344adc4858: Pull complete </span><br><span class="line">fcf3ceff18fc: Pull complete </span><br><span class="line">16da0c38dc5b: Pull complete </span><br><span class="line">b905d1797e97: Pull complete </span><br><span class="line">4b50d1c6b05c: Pull complete </span><br><span class="line">c75914a65ca2: Pull complete </span><br><span class="line">1ae8042bdd09: Pull complete </span><br><span class="line">453ac13c00a3: Pull complete </span><br><span class="line">9e680cd72f08: Pull complete </span><br><span class="line">a6b5dc864b6c: Pull complete </span><br><span class="line">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  # 真实地址</span><br><span class="line"></span><br><span class="line">docker pull mysql 等价于: docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@localhost /]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Already exists   # 联合文件系统的好处：上面下载过的MySQL与5.7版本的MySQL有相同的文件时不需要重复下载</span><br><span class="line">d51ce1c2e575: Already exists </span><br><span class="line">c2344adc4858: Already exists </span><br><span class="line">fcf3ceff18fc: Already exists </span><br><span class="line">16da0c38dc5b: Already exists </span><br><span class="line">b905d1797e97: Already exists </span><br><span class="line">4b50d1c6b05c: Already exists </span><br><span class="line">d85174a87144: Pull complete </span><br><span class="line">a4ad33703fa8: Pull complete </span><br><span class="line">f7a5433ce20d: Pull complete </span><br><span class="line">3dcd2a278b4a: Pull complete </span><br><span class="line">Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-O5oXLHZ6-1607516885224)(Docker%E6%A6%82%E8%BF%B0(1)].assets%5Cimage-20200610165130055.png)</p><p><strong>docker rmi 删除镜像</strong></p><p>rm——remove i——images</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker rmi -f 镜像id   #删除指定镜像</span><br><span class="line">[root@localhost /]# docker rmi -f 镜像id 镜像id 镜像id     #删除多个镜像</span><br><span class="line">[root@localhost /]# docker rmi -f $(docker images -aq)     #删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux,下载一个centos镜像来学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name"容器名字 tomcat01 tomcat02 ，用来区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             使用交互方式运行，进入容器查看内容</span><br><span class="line">-p              指定容器的端口 -p 8080:80</span><br><span class="line">-p  ip:主机(即宿主机)端口：容器端口</span><br><span class="line">-p  主机端口：容器端口  #这种方式常用</span><br><span class="line">-p  容器端口</span><br><span class="line">容器端口P</span><br><span class="line">-P              随机指定端口(大写P)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@localhost /]# docker run -it centos /bin/bash </span><br><span class="line">[root@8b4c74381205 /]# ls     #查看容器内的centos,基础版本，很多命令都是不完善的！</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@8b4c74381205 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">123  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">222  boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">(不加） # 列出当前正在运行的容器</span><br><span class="line">-a     # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?   # 显示最近创建的容器</span><br><span class="line">-q    # 只显示当前容器的编号</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         4 minutes ago       Exited (0) About a minute ago                       epic_wilson</span><br><span class="line">fb87667bbc19        bf756fb1ae65        "/hello"            2 hours ago         Exited (0) 2 hours ago                              awesome_banach</span><br><span class="line">[root@localhost /]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         9 minutes ago       Exited (0) 6 minutes ago                       epic_wilson</span><br><span class="line">[root@localhost /]# docker ps -aq</span><br><span class="line">8b4c74381205</span><br><span class="line">fb87667bbc19</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit   # 直接退出容器</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id   # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)    # 删除所有容器 </span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id     # 启动容器</span><br><span class="line">docker restart 容器id   # 重启容器</span><br><span class="line">docker stop 容器id      # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id      # 强制停止当前正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker run -d centos</span><br><span class="line">e9d60f206fa19963203db6c42c2f83c5120eb90eeee2b7ba9fdc4589370fd6b6</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps,发现 centos 停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 数字 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail  # 要显示的日志条数</span><br><span class="line">[root@localhost /]# docker logs -tf --tail 10 ce989f90023d</span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker top 容器id</span></span><br><span class="line">[root@localhost /]# docker top ce989f90023d</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME     </span><br><span class="line">root                12249               12232               0                   22:44               pts/0               00:00:00</span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker inspect ce989f90023d</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244",</span><br><span class="line">        "Created": "2020-06-10T14:44:45.025360147Z",</span><br><span class="line">        "Path": "/bin/bash",</span><br><span class="line">        "Args": [],</span><br><span class="line">        "State": &#123;</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 12249,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2020-06-10T14:44:45.770227584Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244-json.log",</span><br><span class="line">        "Name": "/nifty_johnson",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;&#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Capabilities": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641-init/diff:/var/lib/docker/overlay2/d4cd3bedb1e7340e62bb292c1e0d5ae37b1d1689ffc1640da67b2a8325facc21/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "ce989f90023d",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": true,</span><br><span class="line">            "AttachStdout": true,</span><br><span class="line">            "AttachStderr": true,</span><br><span class="line">            "Tty": true,</span><br><span class="line">            "OpenStdin": true,</span><br><span class="line">            "StdinOnce": true,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/bash"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "org.label-schema.build-date": "20200114",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS",</span><br><span class="line">                "org.opencontainers.image.created": "2020-01-14 00:00:00-08:00",</span><br><span class="line">                "org.opencontainers.image.licenses": "GPL-2.0-only",</span><br><span class="line">                "org.opencontainers.image.title": "CentOS Base Image",</span><br><span class="line">                "org.opencontainers.image.vendor": "CentOS"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "74d140bbc60432c5fdce865fa48f78c1138923dd292e708a25c4de17de812d56",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/74d140bbc604",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.3",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "58fd9703e96d12128c30f244be3205e3fe31fc7d1fb7fffdddba72d981e782f4",</span><br><span class="line">                    "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.3",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker exec -it ce989f90023d /bin/bash</span><br><span class="line">[root@ce989f90023d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@ce989f90023d /]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 14:44 pts/0    00:00:00 /bin/bash</span><br><span class="line">root         15      0  0 15:19 pts/1    00:00:00 /bin/bash</span><br><span class="line">root         29     15  0 15:20 pts/1    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker attach ce989f90023d</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span><span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程（进入的是正在运行的命令行，而不是新的窗口）</span></span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内目标文件路径  目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录</span></span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">ztx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器内部</span></span><br><span class="line">[root@localhost home]# docker attach ce989f90023d</span><br><span class="line">[root@ce989f90023d /]# cd /home/</span><br><span class="line">[root@ce989f90023d home]# ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内新建一个文件</span></span><br><span class="line">[root@ce989f90023d home]# touch test.java</span><br><span class="line">[root@ce989f90023d home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost home]# docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE      COMMAND       CREATED           STATUS                PORTS           NAMES</span><br><span class="line">ce989f90023d     centos  "/bin/bash"  44 minutes ago  Exited (0) 46 seconds ago               nifty_johnson</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker内文件拷贝到主机上</span></span><br><span class="line">[root@localhost home]# docker cp ce989f90023d:/home/test.java /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">test.java  ztx</span><br><span class="line">[root@localhost home]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209202906322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach to a running container       # 当前shell下attach连接指定运行的镜像</span><br><span class="line"> build       Build an image from a Dockerfile        # 通过Dockerfile定制镜像</span><br><span class="line"> commit      Create a new image from a container changes  #提交当前容器为新的镜像</span><br><span class="line"> cp          Copy files&#x2F;folders between a container and the local filesystem #从容器中拷贝指定文件或目录到宿主机中</span><br><span class="line"> create      Create a new container   # 创建一个新的容器，同run,但不启动容器</span><br><span class="line"> diff        Inspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化</span><br><span class="line"> events      Get real time events from the server   # 从docker服务获取容器实时事件</span><br><span class="line"> exec        Run a command in a running container    # 在已存在的容器上运行命令</span><br><span class="line"> export      Export a container filesystem as a tar archive # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line"> history     Show the history of an image            # 展示一个镜像形成历史</span><br><span class="line"> images      List images                             # 列出系统当前的镜像</span><br><span class="line"> import      Import the contents from a tarball to create a filesystem image # 从tar包中的内容创建一个新的文件系统镜像[对应export]</span><br><span class="line"> info        Display system-wide information         # 显示系统相关信息</span><br><span class="line"> inspect     Return low-level information on Docker objects # 查看容器详细信息</span><br><span class="line"> kill        Kill one or more running containers     # 杀死指定的docker容器</span><br><span class="line"> load        Load an image from a tar archive or STDIN # 从一个tar包加载一个镜像[对应save]</span><br><span class="line"> login       Log in to a Docker registry  # 注册或者登录一个docker源服务器</span><br><span class="line"> logout      Log out from a Docker registry  # 从当前Docker registry退出</span><br><span class="line"> logs        Fetch the logs of a container  # 输出当前容器日志信息</span><br><span class="line"> pause       Pause all processes within one or more containers      # 暂停容器</span><br><span class="line"> port        List port mappings or a specific mapping for the container # 查看映射端口对应容器内部源端口</span><br><span class="line"> ps          List containers  # 列出容器列表</span><br><span class="line"> pull        Pull an image or a repository from a registry # 从docker镜像源服务器拉取指定镜像或库镜像</span><br><span class="line"> push        Push an image or a repository to a registry   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"> rename      Rename a container  # 给docker容器重新命名</span><br><span class="line"> restart     Restart one or more containers  # 重启运行的容器</span><br><span class="line"> rm          Remove one or more containers  # 移除一个或者多个容器</span><br><span class="line"> rmi         Remove one or more images  # 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"> run         Run a command in a new container  # 创建一个新的容器并运行一个命令</span><br><span class="line"> save        Save one or more images to a tar archive (streamed to STDOUT by default) # 保存一个镜像为一个tar包[对应load]</span><br><span class="line"> search      Search the Docker Hub for images  # 在docker hub中搜索镜像</span><br><span class="line"> start       Start one or more stopped containers  # 启动容器</span><br><span class="line"> stats       Display a live stream of container(s) resource usage statistics # 实时显示容器资源使用统计</span><br><span class="line"> stop        Stop one or more running containers  # 停止容器</span><br><span class="line"> tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源中镜像打标签</span><br><span class="line"> top         Display the running processes of a container     # 查看容器中运行的进程信息</span><br><span class="line"> unpause     Unpause all processes within one or more containers # 取消暂停容器</span><br><span class="line"> update      Update configuration of one or more containers  # 更新一个或多个容器配置</span><br><span class="line"> version     Show the Docker version information  # 查看docker版本号 </span><br><span class="line"> wait        Block until one or more containers stop, then print their exit codes # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有应用，直接打包docker镜像，就可以直接跑起来！</p><p><strong>如何得到镜像</strong></p><ul><li>从远程仓库下载</li><li>别人拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFs （联合文件系统）</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加载 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux/Unix系统是一样的，包括bootloader和 Kernel。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img src="https://img-blog.csdnimg.cn/20201209203030450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？<br><img src="https://img-blog.csdnimg.cn/20201209203049210.png" alt="在这里插入图片描述"><br>对于个精简的OS, rootfs可以很小，只需要包合最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载！<br><img src="https://img-blog.csdnimg.cn/20201209203126879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">➜  / docker image inspect redis          </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "sha256:f9b9909726890b00d2098081642edf32e5211b7ab53563929a47f250bcdc1d7c",</span><br><span class="line">        "RepoTags": [</span><br><span class="line">            "redis:latest"</span><br><span class="line">        ],</span><br><span class="line">        "RepoDigests": [</span><br><span class="line">            "redis@sha256:399a9b17b8522e24fbe2fd3b42474d4bb668d3994153c4b5d38c3dafd5903e32"</span><br><span class="line">        ],</span><br><span class="line">        "Parent": "",</span><br><span class="line">        "Comment": "",</span><br><span class="line">        "Created": "2020-05-02T01:40:19.112130797Z",</span><br><span class="line">        "Container": "d30c0bcea88561bc5139821227d2199bb027eeba9083f90c701891b4affce3bc",</span><br><span class="line">        "ContainerConfig": &#123;</span><br><span class="line">            "Hostname": "d30c0bcea885",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"redis-server\"]"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "DockerVersion": "18.09.7",</span><br><span class="line">        "Author": "",</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "redis-server"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": null</span><br><span class="line">        &#125;,</span><br><span class="line">        "Architecture": "amd64",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">        "Size": 104101893,</span><br><span class="line">        "VirtualSize": 104101893,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/adea96bbe6518657dc2d4c6331a807eea70567144abda686588ef6c3bb0d778a/diff:/var/lib/docker/overlay2/66abd822d34dc6446e6bebe73721dfd1dc497c2c8063c43ffb8cf8140e2caeb6/diff:/var/lib/docker/overlay2/d19d24fb6a24801c5fa639c1d979d19f3f17196b3c6dde96d3b69cd2ad07ba8a/diff:/var/lib/docker/overlay2/a1e95aae5e09ca6df4f71b542c86c677b884f5280c1d3e3a1111b13644b221f9/diff:/var/lib/docker/overlay2/cd90f7a9cd0227c1db29ea992e889e4e6af057d9ab2835dd18a67a019c18bab4/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "RootFS": &#123;</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:c2adabaecedbda0af72b153c6499a0555f3a769d52370469d8f6bd6328af9b13",</span><br><span class="line">                "sha256:744315296a49be711c312dfa1b3a80516116f78c437367ff0bc678da1123e990",</span><br><span class="line">                "sha256:379ef5d5cb402a5538413d7285b21aa58a560882d15f1f553f7868dc4b66afa8",</span><br><span class="line">                "sha256:d00fd460effb7b066760f97447c071492d471c5176d05b8af1751806a1f905f8",</span><br><span class="line">                "sha256:4d0c196331523cfed7bf5bafd616ecb3855256838d850b6f3d5fba911f6c4123",</span><br><span class="line">                "sha256:98b4a6242af2536383425ba2d6de033a510e049d9ca07ff501b95052da76e894"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Metadata": &#123;</span><br><span class="line">            "LastTagTime": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。<br><img src="https://img-blog.csdnimg.cn/2020120920315698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而整体的大镜像包含了来自两个镜像层的6个文件。<br><img src="https://img-blog.csdnimg.cn/20201209203215883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。<br><img src="https://img-blog.csdnimg.cn/20201209203355485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！<br><img src="https://img-blog.csdnimg.cn/20201209203422845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如何提交一个自己的镜像？</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理类似</span></span><br><span class="line">docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[版本TAG]</span><br></pre></td></tr></table></figure><p>实战测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、启动一个默认的tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2、发现这个默认的tomcat是没有webapps应用的，镜像的原因。官方的镜像默认webapps下面是没有文件的！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3、我自己将webapp.dist下文件拷贝至webapps下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4、将我们操作过的容器通过commit提交为一个镜像！我们以后就可以使用我们修改过的镜像了，这就是我们自己的一个修改的镜像</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203500527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。<br>到了这里就算是入门Docker了！</p><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！==需求：数据可以持久化==</p><p>MySQL，容器删除了，删库跑路！==需求：MySQL数据可以存储在本地！==</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！<br><img src="https://img-blog.csdnimg.cn/20201209203542399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost home]# docker run -it -v /home/ceshi:/home  centos  /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动起来的时候，我们可以通过docker inspect 容器id 来查看挂载情况：（见下图）</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203640456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在容器内指定目录下添加或修改一个文件，会同步到主机指定目录下！反之，在主机目录下做相关操作，也会同步到容器对应的目录下！</p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的！</p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><p>两个路径保持完全的同步！！！双向绑定，<strong>一边发生变化，另一边也会随之变化！</strong></p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷的情况</span></span><br><span class="line">[root@localhost data]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               2dd0379216c9ee4441ed56f8ce53461c19abe78b8cfd024ac5fbe07c3b8f09ba</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里发现，这种就是匿名挂载，我们在 -v 后只写了容器内的路径，没有写容器外的路径！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@localhost home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">5ba5708389bf71b2156fdbcedc50a62b16ac27adb2a3dfac42c52e9da5ace79f</span><br><span class="line">[root@localhost home]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名：容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷  <span class="comment"># 先找到卷所在路径 docker volume inspect 卷名，如下图：</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203752895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所有的docker容器内的卷，没有指定目录的情况下都是在<strong>/var/lib/docker/volumes/xxxx/_data</strong>下！<br>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用 <strong>具名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span></span><br><span class="line">-v容器内路径       # 匿名挂载</span><br><span class="line">-v卷名:容器内路径  # 具名挂载</span><br><span class="line">-v/宿主机路径:容器内路径   # 指定路径挂载！</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径：ro 或 rw   改变读写权限</span></span><br><span class="line">ro #readonly 只读</span><br><span class="line">rw #readwrite 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！</span></span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认是 rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></span><br></pre></td></tr></table></figure><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建 docker镜像的构建文件！命令脚本！ 先体验一下！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是最终镜像的一层！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随机，建议 dockerfile</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker-test-volume]# vim dockerfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中的内容：指令(大写) 参数</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME ["volume01","volume02"]</span><br><span class="line"></span><br><span class="line">CMD echo"----end----"</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个命令，就是镜像的一层！</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203834981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：我们这里的 dockerfile  是我们编写的文件名哦！<br><img src="https://img-blog.csdnimg.cn/2020120920385769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这两个卷和外部一定有两个同步的目录！<br><img src="https://img-blog.csdnimg.cn/20201209203919566.png" alt="在这里插入图片描述"><br>查看一下卷挂载在主机上的路径</p><p><strong>docker inspect 容器id</strong><br><img src="https://img-blog.csdnimg.cn/20201209203943550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试一下刚才的文件是否同步出去了！</p><p>这种方式我们未来使用十分的多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像的时候没有挂在卷，要手动镜像挂载即可： (参考上文==<strong>具名和匿名挂载</strong>==)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v 卷名:容器内路径</span><br></pre></td></tr></table></figure><h2 id="数据卷容器（多个容器之间同步数据-）"><a href="#数据卷容器（多个容器之间同步数据-）" class="headerlink" title="数据卷容器（多个容器之间同步数据 ）"></a>数据卷容器（多个容器之间同步数据 ）</h2><p><strong>多个mysql同步数据！</strong><br><img src="https://img-blog.csdnimg.cn/20201209204110474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204121507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204138239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201209204053289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在docker03下创建docker03文件后，进入docker01发现也依旧会同步过来：<br><img src="https://img-blog.csdnimg.cn/20201209215656378.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试1：删除docker01后，docker02和docker03是否还可以访问原来docker01下创建的的文件？</span><br><span class="line"># 测试1的结果为：依旧可以访问！！！</span><br><span class="line"></span><br><span class="line"># 测试2：删除docker01后，docker02和docker03之间是否可以相互同步文件？</span><br><span class="line"># 测试2的结果为：docket02和docker03之间一九可以完成同步！！！ 见下图：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120921574695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209215802776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>多个mysql实现数据共享</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">➜  ~ docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步！</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看官方是怎么做的！</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像层，并提交！<br><img src="https://img-blog.csdnimg.cn/20201209215953139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM# 基础镜像，一切从这里开始构建   centos</span><br><span class="line">MAINTAINER# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 步骤：tomcat镜像，这个tomcat压缩包！ 添加内容，每添加会成一层</span><br><span class="line">WORKDIR# 镜像的工作目录  </span><br><span class="line">VOLUME# 挂载的目录</span><br><span class="line">EXPOSE          # 暴露端口配置，跟 -p 是一个道理</span><br><span class="line">CMD# 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要执行的命令，可以追加命令</span><br><span class="line">ONBUILD# 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令</span><br><span class="line">COPY# 类似ADD,将我们文件拷贝到镜像中</span><br><span class="line">ENV# 构建的时候设置环境变量，跟 -e 是一个意思</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220023958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的( <strong>FROM scratch</strong> )，然后配置需要的软件和配置来构建。</p><blockquote><p>创建一个自己的 centos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写DockerFile文件，内容如下：</span></span><br><span class="line">[root@localhost dockerfile]# cat mydockerfile-centos</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ztx&lt;123456@qq.com&gt; </span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local        #centos中的工作目录</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools   #ifconfig的相关命令</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "----end----"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">....</span><br><span class="line">Successfully built c987078b06cb</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行</span></span><br></pre></td></tr></table></figure><p>生成命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>==通过build命令，用写好的mydockerfile-centos文件来构建target（-t 目标）名为mycentos:0.1 .的镜像 [tag]为版本号==</p><p>其中from的centos是本地从hub上pull过的镜像（docker images），如果没有 则会自动去pull下载</p><p>测试运行：<br><img src="https://img-blog.csdnimg.cn/20201209220142434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行的时候带上版本号 否则获取最新版本</p><p><strong>对比：</strong></p><p><strong>之前的原生的centos</strong><br><img src="https://img-blog.csdnimg.cn/20201209220205867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们增加之后的镜像</strong><br> <img src="https://img-blog.csdnimg.cn/20201209220221830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：net-tools 包含一系列程序，构成了 Linux 网络的基础。</p><p>我们可以列出本地镜像的变更历史：<br><img src="https://img-blog.csdnimg.cn/20201209220241622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们平时拿到一个镜像，可以研究一下它是怎么做的！</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><p><strong>测试CMD</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-cmd</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls","-a"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令  -l 成为ls -al</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\":</span><br><span class="line"> executable file not found in $PATH": unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 -l 替换了CMD[<span class="string">"ls"</span>,<span class="string">"-l"</span>]。 而-l 不是命令,所以报错</span></span><br></pre></td></tr></table></figure><p><strong>测试ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-entrypoint</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls","-a"]</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们的命令，是直接拼接在我们的ENTRYPOINT命令后面的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1 -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 16 06:32 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64 ....</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包！<br>2、编写Dockerfile文件，官方命名: <strong>Dockerfile</strong> ，build会自动寻找这个文件，就不要 -f 指定了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER kuangshen&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz    /usr/local/</span><br><span class="line">ADD apache-tomcat-8.0.53.tar.gz   /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.0.53/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.0.53/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>ADD命令会自动解压压缩包</p><p>3、构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -t diytomcat .     diytomcat是定义的镜像名</span></span><br></pre></td></tr></table></figure><p>4、启动镜像，创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -p 9090:8080 --name kuangshentomcat02 -v /home/kuangshen/build/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/webapps/<span class="built_in">test</span> -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/logs diytomcat</span></span><br></pre></td></tr></table></figure><p>5、访问测试<br><img src="https://img-blog.csdnimg.cn/20201209220335132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6、发布项目（由于做了卷挂载，我们就可以直接在本地发布项目了）</p><p>在/home/kuangshen/build/tomcat/test目录下创建WEB-INF目录，在里面创建web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                               http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在回到test目录，添加一个index.jsp页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span>vim</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">System.out.println</span>("<span class="attr">---my</span> <span class="attr">test</span> <span class="attr">web</span> <span class="attr">logs---</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现：test项目部署成功，可以直接访问！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcatlogs]# cat catalina.out</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220425594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之前一直访问失败是web.xml配置有问题，最后也是查看该日志提示，才得以解决！！！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、在我们服务器上提交自己的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录dockerhub</span></span><br><span class="line">[root@localhost tomcat]# docker login -u ztx115</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>4、登录完毕后就可以提交镜像了，就是一步 docker push</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> push自己的镜像到服务器上！</span></span><br><span class="line">[root@localhost tomcat]# docker push diytomcat</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">c5593011cd68: Preparing </span><br><span class="line">d3ce40b8178e: Preparing </span><br><span class="line">02084c67dcc9: Preparing </span><br><span class="line">2b7c1c6c89c5: Preparing </span><br><span class="line">0683de282177: Preparing </span><br><span class="line">denied: requested access to the resource is denied  # 拒绝</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push镜像的问题？</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：增加一个tag         docker tag  指定镜像的id   dockerhub的用户名/镜像重命名:[tag]</span></span><br><span class="line">[root@localhost tomcat]# docker tag bb64ab96b432 ztx115/tomcat:1.0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120922045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意：镜像的重命名前一定要加当前的dockerhub的用户名，否则将会push失败！！！！</strong>（如：把ztx115改成ztx,  push一定失败！）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docekr push上去即可！  自己平时发布的镜像尽量带上版本号</span></span><br><span class="line">[root@localhost tomcat]# docker push ztx115/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/ztx115/tomcat]</span><br><span class="line">c5593011cd68: Pushed </span><br><span class="line">d3ce40b8178e: Pushed </span><br><span class="line">02084c67dcc9: Pushed </span><br><span class="line">2b7c1c6c89c5: Pushed </span><br><span class="line">0683de282177: Pushed </span><br><span class="line">1.0: digest: sha256:b6733deccf85ad66c6f4302215dd9ea63e1579817f15a099b5858785708ed408 size: 1372</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220546540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现，提交时也是按照镜像的层级来进行提交的！</p><blockquote><p>发布到阿里云镜像服务上（狂神视频截图）</p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间<br><img src="https://img-blog.csdnimg.cn/20201209220605544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、创建容器镜像仓库<br><img src="https://img-blog.csdnimg.cn/20201209220622908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209220634804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020120922064542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、浏览阿里云<br><img src="https://img-blog.csdnimg.cn/20201209220705783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用阿里云容器镜像的参考官方指南即可！！！（即上图）</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209220744812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文大量参考b站kuangshen的Docker视频&lt;/p&gt;
&lt;h1 id=&quot;Docker的常用命令&quot;&gt;&lt;a href=&quot;#Docker的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker的常用命令&quot;&gt;&lt;/a&gt;Docker的常用命令&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Docker/"/>
    
    
    <category term="Docker" scheme="https://ericzikun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Java项目打包实战——以hugegraph知识图谱为例</title>
    <link href="https://ericzikun.github.io/2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/"/>
    <id>https://ericzikun.github.io/2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/</id>
    <published>2020-12-09T12:19:36.000Z</published>
    <updated>2021-05-28T10:30:55.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    本文主要针对开源图谱hugegraph做了docker打包处理，hugegraph在windows上往往不是特别方便，也很容易崩，故写此文。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>本地能跑通的hugegraph三件套：<ul><li>hugegraph-0.10.4</li><li>hugegraph-loader-0.10.0（数据导入配件 不建议在docker内部使用，很容易内存不够，可以将本地导通的g/m/s文件夹放进hugegraph-0.10.4下即可(RockDb)）</li><li>hugegraph-studio-0.10.0</li></ul></li><li>依赖的编译环境只有jdk8，下载好x86 linux版即可</li></ul><h1 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h1><p>​    新建一个构建镜像的目录(hugegraph-docker)，用于存放原材料：</p><p><img src="https://img-blog.csdnimg.cn/20201209201152438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>​    编写Dockerfile脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER erickun&lt;847473488@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/local/</span><br><span class="line">COPY hugegraph-tools-1.4.0 /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/init-store.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/start-hugegraph.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-studio-0.10.0/bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ADD :可以将tar压缩包自动解压到centos系统中对应路径下  (ADD 能解压压缩文件并把它们添加到镜像中，也从 url 拷贝文件到镜像中)，COPY则是将资源拷贝至镜像，两者的基本功能类似</li><li>ENV:配置环境变量，此处配置了jdk8的环境</li><li>RUN: 在镜像生成的过程中执行的命令，多与系统相关，如此处安装vim工具</li><li>CMD：在镜像docker run了之后，容器初始执行的命令</li></ul><p>执行打包命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t testhugegraph .</span><br></pre></td></tr></table></figure><p>为镜像起名为testhugegraph，不要忘记最后一个点</p><p><img src="https://img-blog.csdnimg.cn/20201209201214486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>生成完后，可以用<code>docker images</code>来查看是否生成成功，再来用此镜像新建一个容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:8088 -p 8081:8080 -it --name testhugegraph testhugegraph</span><br></pre></td></tr></table></figure><ul><li>-p：做端口映射： &lt;宿主机端口&gt;:&lt;容器内部端口&gt;，当然也可以写进Dockerfile的EXPOSE，为方便随时指定端口，不建议写进EXPOSE</li><li>-it:交互模式</li><li>–name：容器的名字</li><li>testhugegraph：从testhugegraph镜像中来生成一个叫testhugegraph的容器</li></ul><h1 id="内外端口映射"><a href="#内外端口映射" class="headerlink" title="内外端口映射"></a>内外端口映射</h1><p>​    实战中，内部端口可以访问<a href="http://127.0.0.1:8080（curl">http://127.0.0.1:8080（curl</a> <a href="http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==">http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==</a></p><p>原因：内外绑定的默认host是0.0.0.0，而不是127.0.0.1，故要修改内部服务启动的host:</p><p><img src="https://img-blog.csdnimg.cn/20201209201236279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    本文主要针对开源图谱hugegraph做了docker打包处理，hugegraph在windows上往往不是特别方便，也很容易崩，</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Docker/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="知识图谱" scheme="https://ericzikun.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="hugegraph" scheme="https://ericzikun.github.io/tags/hugegraph/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于leaflet的地图开发十大功能集合</title>
    <link href="https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/"/>
    <id>https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/</id>
    <published>2020-10-02T12:57:19.000Z</published>
    <updated>2020-10-02T13:07:23.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leaflet十大常用功能合集"><a href="#Leaflet十大常用功能合集" class="headerlink" title="Leaflet十大常用功能合集"></a>Leaflet十大常用功能合集</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本篇文章主要介绍基于leaflet开源地图组件开发的地图搭建，包含热力图、Geojson轨迹、marker、动画、用户标记侧栏、测量工具、搜索框、经纬线显示等功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本文中的代码都是经过测试无误的，关于依赖包均可在github上找到源文件，主要就是依赖导入和函数调用两部分，为了简洁，json数据一般外部导入，路径正确即可。</p><h1 id="底图导入"><a href="#底图导入" class="headerlink" title="底图导入"></a>底图导入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 地图的导入分在线和离线，在线直接调提供瓦片服务的url即可，离线请参考我的另一文章：<a href="https://blog.csdn.net/popofzk/article/details/108902634" target="_blank" rel="noopener">基于leaflet的离线瓦片发布方式总结</a> 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Offline Map by WHU<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"docs/images/favicon.ico"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部的js或者css  （组件的依赖） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/leaflet.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/heatpoint.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * </span><br><span class="line"><span class="css">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123; <span class="attribute">height</span>: <span class="number">100%</span>; &#125;</span></span><br><span class="line">      /* html,body &#123;</span><br><span class="line">          padding: 0;</span><br><span class="line">          margin: 0 auto;</span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">          min-width: 100%;</span><br><span class="line">      &#125; */</span><br><span class="line"><span class="css">      <span class="selector-id">#map</span> &#123;</span></span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//----------------绘制底图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mymap = L.map(<span class="string">'map'</span>).setView([ <span class="number">20</span>,<span class="number">120</span>], <span class="number">5</span>);</span></span><br><span class="line"><span class="actionscript">mymap.zoomControl.setPosition(<span class="string">'topright'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> url = <span class="string">"https://api.mapbox.com/styles/v1/&#123;id&#125;/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw"</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;'</span></span></span><br><span class="line">L.tileLayer( url , &#123;</span><br><span class="line">  maxZoom: 18,</span><br><span class="line">  minZoom:2,</span><br><span class="line"><span class="actionscript">  id: <span class="string">'mapbox/streets-v11'</span>,</span></span><br><span class="line">  tileSize: 512,</span><br><span class="line">  zoomOffset: -1</span><br><span class="line">&#125;).addTo(mymap);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能一：热力图"><a href="#功能一：热力图" class="headerlink" title="功能一：热力图"></a>功能一：热力图</h1><p>依赖包：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet-heat.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>heatpoint数据文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heatpoint = [</span><br><span class="line">  [ <span class="number">25.277312550</span> , <span class="number">124.687775915409</span>,<span class="string">"486"</span>],</span><br><span class="line">  [ <span class="number">27.72593995</span> , <span class="number">124.474295839426</span>, <span class="string">"807"</span>],</span><br><span class="line">  [ <span class="number">27</span>, <span class="number">125</span>,<span class="string">"899"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126</span>,<span class="string">"1273"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126.5</span> , <span class="string">"1258"</span>],</span><br><span class="line">  [ <span class="number">28</span>, <span class="number">126.6</span>,<span class="string">"1279"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加热力图  lat, lng, intensity</span></span><br><span class="line">  <span class="keyword">var</span> layerHeat = L.heatLayer(heatpoint, &#123;<span class="attr">radius</span>: <span class="number">10</span>&#125;);</span><br><span class="line">  mymap.addLayer(layerHeat);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002202042404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能二：GeoJson轨迹"><a href="#功能二：GeoJson轨迹" class="headerlink" title="功能二：GeoJson轨迹"></a>功能二：GeoJson轨迹</h1><p>GeoJson数据格式：这里我采用的是对不同轨迹上不同颜色，对原始版本进行了修改。<br>轨迹构成面：<br>数据这里省略了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">        [ ,  ],</span><br><span class="line">        [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">          [ ,  ],</span><br><span class="line">          [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>轨迹线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>外部导入数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/geoJson.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> myStyle = &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">'#101010'</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">var</span> layerGeo = L.geoJSON(states, &#123;</span><br><span class="line">    style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(feature.geometry.type == <span class="string">"LineString"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).addTo(mymap)</span><br></pre></td></tr></table></figure><h1 id="功能三：marker"><a href="#功能三：marker" class="headerlink" title="功能三：marker"></a>功能三：marker</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> icon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/fig.svg'</span>,</span><br><span class="line">                                        iconSize:     [<span class="number">20</span>, <span class="number">20</span>], <span class="comment">// size of the icon</span></span><br><span class="line">                                        <span class="comment">// shadowSize:   [50, 64], // size of the shadow</span></span><br><span class="line">                                        iconAnchor:   [<span class="number">22</span>, <span class="number">94</span>], <span class="comment">// point of the icon which will correspond to marker's location</span></span><br><span class="line">                                        shadowAnchor: [<span class="number">4</span>, <span class="number">62</span>],  <span class="comment">// the same for the shadow</span></span><br><span class="line">                                        popupAnchor:  [<span class="number">-3</span>, <span class="number">-76</span>] <span class="comment">// point from which the popup should open relative to the iconAnchor</span></span><br><span class="line">              &#125;)</span><br><span class="line">   </span><br><span class="line">    marker = <span class="keyword">new</span> L.marker(loc,&#123;<span class="attr">icon</span>: icon&#125; );<span class="comment">//se property </span></span><br><span class="line">    marker.addTo(mymap)</span><br><span class="line">                <span class="comment">// searched</span></span><br><span class="line">   marker.bindPopup(<span class="string">'area: '</span>+ title );</span><br><span class="line">            </span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><h1 id="功能四：轨迹动画（从A-gt-B）"><a href="#功能四：轨迹动画（从A-gt-B）" class="headerlink" title="功能四：轨迹动画（从A-&gt;B）"></a>功能四：轨迹动画（从A-&gt;B）</h1><p><a href="https://github.com/ewoken/Leaflet.MovingMarker" target="_blank" rel="noopener">参考github</a><br><a href="http://ewoken.github.io/Leaflet.MovingMarker/" target="_blank" rel="noopener">官方demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用多个动画效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------geo的动画 L.Marker.movingMarker-------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> parisKievLL = [[<span class="number">48.8567</span>, <span class="number">2.3508</span>], [<span class="number">50.45</span>, <span class="number">30.523333</span>]];</span><br><span class="line"><span class="keyword">var</span> londonParisRomeBerlinBucarest = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">48.8567</span>, <span class="number">2.3508</span>],</span><br><span class="line">[<span class="number">41.9</span>, <span class="number">12.5</span>], [<span class="number">52.516667</span>, <span class="number">13.383333</span>], [<span class="number">44.4166</span>,<span class="number">26.1</span>]];</span><br><span class="line"><span class="keyword">var</span> londonBrusselFrankfurtAmsterdamLondon = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">50.85</span>, <span class="number">4.35</span>],</span><br><span class="line">[<span class="number">50.116667</span>, <span class="number">8.683333</span>], [<span class="number">52.366667</span>, <span class="number">4.9</span>], [<span class="number">51.507222</span>, <span class="number">-0.1275</span>]];</span><br><span class="line"><span class="keyword">var</span> barcelonePerpignanPauBordeauxMarseilleMonaco = [</span><br><span class="line">    [<span class="number">41.385064</span>, <span class="number">2.173403</span>],</span><br><span class="line">    [<span class="number">42.698611</span>, <span class="number">2.895556</span>],</span><br><span class="line">    [<span class="number">43.3017</span>, <span class="number">-0.3686</span>],</span><br><span class="line">    [<span class="number">44.837912</span>, <span class="number">-0.579541</span>],</span><br><span class="line">    [<span class="number">43.296346</span>, <span class="number">5.369889</span>],</span><br><span class="line">    [<span class="number">43.738418</span>, <span class="number">7.424616</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> planeIcon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/marker-icon-2x.png'</span>,</span><br><span class="line">iconSize: [<span class="number">40</span>, <span class="number">70</span>],</span><br><span class="line">    iconAnchor: [<span class="number">22</span>, <span class="number">94</span>],</span><br><span class="line">    popupAnchor: [<span class="number">-3</span>, <span class="number">-76</span>],</span><br><span class="line">    shadowUrl: <span class="string">'./css/images/marker-shadow.png'</span>,</span><br><span class="line">    shadowSize: [<span class="number">68</span>, <span class="number">95</span>],</span><br><span class="line">    shadowAnchor: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------用户点击开始轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker1 = L.Marker.movingMarker(parisKievLL, [<span class="number">10000</span>]).addTo(mymap);</span><br><span class="line">L.polyline(parisKievLL).addTo(mymap);</span><br><span class="line">marker1.once(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    marker1.start();</span><br><span class="line">    marker1.closePopup();</span><br><span class="line">    marker1.unbindPopup();</span><br><span class="line">    marker1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (marker1.isRunning()) &#123;</span><br><span class="line">            marker1.pause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            marker1.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to pause !&lt;/b&gt;'</span>).openPopup();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to start !&lt;/b&gt;'</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">marker1.openPopup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------自动播放轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker2 = L.Marker.movingMarker(londonParisRomeBerlinBucarest,</span><br><span class="line">    [<span class="number">3000</span>, <span class="number">9000</span>, <span class="number">9000</span>, <span class="number">4000</span>],&#123;<span class="attr">autostart</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line">L.polyline(londonParisRomeBerlinBucarest, &#123;<span class="attr">color</span>: <span class="string">'red'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------循环动画</span></span><br><span class="line"><span class="keyword">var</span> marker3 = L.Marker.movingMarker(londonBrusselFrankfurtAmsterdamLondon,</span><br><span class="line">    [<span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>], &#123;<span class="attr">autostart</span>: <span class="literal">true</span>, <span class="attr">loop</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.loops = <span class="number">0</span>;</span><br><span class="line">marker3.bindPopup(<span class="string">''</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">L.polyline(londonBrusselFrankfurtAmsterdamLondon, &#123;<span class="attr">color</span>: <span class="string">'black'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.on(<span class="string">'loop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker3.loops++;</span><br><span class="line">    <span class="keyword">if</span> (e.elapsedTime &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        marker3.getPopup().setContent(<span class="string">"&lt;b&gt;Loop: "</span> + marker3.loops + <span class="string">"&lt;/b&gt;"</span>)</span><br><span class="line">        marker3.openPopup();</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            marker3.closePopup();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (! marker1.isEnded()) &#123;</span><br><span class="line">                marker1.openPopup();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (marker4.getLatLng().equals([<span class="number">45.816667</span>, <span class="number">15.983333</span>])) &#123;</span><br><span class="line">                    marker4.bindPopup(<span class="string">'Click on the map to move me !'</span>);</span><br><span class="line">                    marker4.openPopup();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------根据用户的鼠标点击来运动  不精确</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> marker4 = L.Marker.movingMarker([[<span class="number">45.816667</span>, <span class="number">15.983333</span>]], [],&#123;<span class="attr">icon</span>: planeIcon&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker4.moveTo(e.latlng, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="功能五：轨迹动画-轨迹自身动画"><a href="#功能五：轨迹动画-轨迹自身动画" class="headerlink" title="功能五：轨迹动画(轨迹自身动画)"></a>功能五：轨迹动画(轨迹自身动画)</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入动画效果DashFlow --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/L.Path.DashFlow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 导入DashFlow动画依赖 轨迹线path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./json/route.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/ ---------------------------------------------添加动画效果DashFlow</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, latlngs = [], len = route.length; i &lt; len; i++) &#123;</span><br><span class="line">latlngs.push(<span class="keyword">new</span> L.LatLng(route[i][<span class="number">0</span>], route[i][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = L.polyline(latlngs, &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    mymap.fitBounds(L.latLngBounds(latlngs));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(L.marker(latlngs[<span class="number">0</span>]));</span><br><span class="line">mymap.addLayer(L.marker(latlngs[len - <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(path);<span class="comment">//添加一个path动画</span></span><br><span class="line"></span><br><span class="line">L.circleMarker([<span class="number">10</span>, <span class="number">70</span>], &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span>,</span><br><span class="line">radius: <span class="number">147.5</span></span><br><span class="line">&#125;).addTo(mymap); <span class="comment">//添加以中心点 半径画圆的 动画效果</span></span><br></pre></td></tr></table></figure><h1 id="功能六：用户标注侧栏"><a href="#功能六：用户标注侧栏" class="headerlink" title="功能六：用户标注侧栏"></a>功能六：用户标注侧栏</h1><p><img src="https://img-blog.csdnimg.cn/20201002201912445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入画图组件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./js/leaflet.draw.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.4.10/leaflet.draw.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加右侧用户画图toolbar</span></span><br><span class="line"><span class="keyword">var</span> drawnItems = <span class="keyword">new</span> L.FeatureGroup();</span><br><span class="line">mymap.addLayer(drawnItems);</span><br><span class="line"><span class="keyword">var</span> drawControl = <span class="keyword">new</span> L.Control.Draw(&#123;<span class="attr">position</span>: <span class="string">'topright'</span>,</span><br><span class="line">    edit: &#123;</span><br><span class="line">        featureGroup: drawnItems</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mymap.addControl(drawControl);</span><br><span class="line">mymap.on(L.Draw.Event.CREATED, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = event.layer;</span><br><span class="line"></span><br><span class="line">        drawnItems.addLayer(layer);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="功能七：测量工具-m-nm-mi"><a href="#功能七：测量工具-m-nm-mi" class="headerlink" title="功能七：测量工具(m/nm/mi)"></a>功能七：测量工具(m/nm/mi)</h1><p>导入依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 测量工具 Leaflet.PolylineMeasure--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/Lealet.PolylineMeasure.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/Leaflet.PolylineMeasure.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ---------------------------------------------测量工具Leaflet.PolylineMeasure</span></span><br><span class="line">L.control.scale (&#123;<span class="attr">maxWidth</span>:<span class="number">240</span>, <span class="attr">metric</span>:<span class="literal">true</span>, <span class="attr">imperial</span>:<span class="literal">false</span>, <span class="attr">position</span>: <span class="string">'bottomleft'</span>&#125;).addTo (mymap);</span><br><span class="line"><span class="keyword">let</span> polylineMeasure = L.control.polylineMeasure (&#123;<span class="attr">position</span>:<span class="string">'topright'</span>, <span class="attr">unit</span>:<span class="string">'metres'</span>, <span class="attr">showBearings</span>:<span class="literal">true</span>, <span class="attr">clearMeasurementsOnStop</span>: <span class="literal">false</span>, <span class="attr">showClearControl</span>: <span class="literal">true</span>, <span class="attr">showUnitControl</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">polylineMeasure.addTo (mymap);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugevent</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.debug(e.type, e, polylineMeasure._currentLine) &#125;</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:toggle'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:start'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:resume'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:finish'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:clear'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:add'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:insert'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:move'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:remove'</span>, debugevent);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204247110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能八：经纬度显示"><a href="#功能八：经纬度显示" class="headerlink" title="功能八：经纬度显示"></a>功能八：经纬度显示</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------------------------------绘制经纬度网格线 Specify divisions every 10 degrees</span></span><br><span class="line">  L.latlngGraticule(&#123;</span><br><span class="line">            weight: <span class="string">"2.0"</span>,</span><br><span class="line">            color: <span class="string">'#101010'</span>,</span><br><span class="line">            showLabel: <span class="literal">true</span>,</span><br><span class="line">            dashArray: [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">            zoomInterval: [</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">2</span>, <span class="attr">end</span>: <span class="number">3</span>, <span class="attr">interval</span>: <span class="number">30</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">4</span>, <span class="attr">end</span>: <span class="number">4</span>, <span class="attr">interval</span>: <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">5</span>, <span class="attr">end</span>: <span class="number">7</span>, <span class="attr">interval</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">8</span>, <span class="attr">end</span>: <span class="number">10</span>, <span class="attr">interval</span>: <span class="number">1</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204133961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能九：中心坐标显示"><a href="#功能九：中心坐标显示" class="headerlink" title="功能九：中心坐标显示"></a>功能九：中心坐标显示</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 坐标显示  中心坐标 底部显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------添加屏幕中心坐标的底部显示</span></span><br><span class="line">L.control.mapCenterCoord(</span><br><span class="line">  &#123;</span><br><span class="line">  latlngFormat: <span class="string">'DM'</span>,</span><br><span class="line">  latlngDesignators: <span class="literal">true</span>,</span><br><span class="line">  position: <span class="string">"bottomright"</span></span><br><span class="line">&#125;</span><br><span class="line">).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002203210350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能十：仿谷歌搜索框"><a href="#功能十：仿谷歌搜索框" class="headerlink" title="功能十：仿谷歌搜索框"></a>功能十：仿谷歌搜索框</h1><p><a href="https://github.com/8to5Developer/leaflet-custom-searchbox" target="_blank" rel="noopener">参考github</a></p><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框 谷歌风格 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://code.jquery.com/jquery-1.12.1.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.customsearchbox.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/searchbox.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchboxControl=createSearchboxControl();</span><br><span class="line">        <span class="keyword">var</span> control = <span class="keyword">new</span> searchboxControl(&#123;</span><br><span class="line">            sidebarTitleText: <span class="string">'Header'</span>,</span><br><span class="line">            sidebarMenuItems: &#123;</span><br><span class="line">                Items: [</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 1 (github.com)"</span>, <span class="attr">href</span>: <span class="string">"http://github.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-carwash"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 2 (google.com)"</span>, <span class="attr">href</span>: <span class="string">"http://google.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-cloudy"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 1"</span>, <span class="attr">onclick</span>: <span class="string">"alert('button 1 clicked !')"</span>, <span class="attr">icon</span>: <span class="string">"icon-potrait"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 2"</span>, <span class="attr">onclick</span>: <span class="string">"button2_click();"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-dining"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 3 (stackoverflow.com)"</span>, <span class="attr">href</span>: <span class="string">'http://stackoverflow.com'</span>, <span class="attr">icon</span>: <span class="string">"icon-bike"</span> &#125;,</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        control._searchfunctionCallBack = <span class="function"><span class="keyword">function</span> (<span class="params">searchkeywords</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!searchkeywords) &#123;</span><br><span class="line">                searchkeywords = <span class="string">"The search call back is clicked !!"</span></span><br><span class="line">            &#125;</span><br><span class="line">            alert(searchkeywords);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mymap.addControl(control);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">button2_click</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        alert(<span class="string">'button 2 clicked !!!'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   这里的搜索框提供了一个模板，可根据自己需求修改函数、按钮等</p><h1 id="功能十一：搜索框的自动补全"><a href="#功能十一：搜索框的自动补全" class="headerlink" title="功能十一：搜索框的自动补全"></a>功能十一：搜索框的自动补全</h1><p>采用jquery的input框自动补全组件<br>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框补全功能jquery --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script type="text/javascript"  src="http://code.jquery.com/jquery-1.8.3.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.10.3/jquery-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里用jquery组件来绑定searchboxinput（上一个谷歌搜索框）,导入的数据采用数组形式即可。<br>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------------搜索框自动补全 jquery----------------------</span></span><br><span class="line"><span class="keyword">var</span> cityData = []</span><br><span class="line"><span class="comment">//自动填充1</span></span><br><span class="line">              $( <span class="string">"#searchboxinput"</span> ).autocomplete(&#123;</span><br><span class="line">               source: cityData,</span><br><span class="line">                    messages: &#123;</span><br><span class="line">              noResults: <span class="string">''</span>,</span><br><span class="line">              results: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201002210623866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Leaflet十大常用功能合集&quot;&gt;&lt;a href=&quot;#Leaflet十大常用功能合集&quot; class=&quot;headerlink&quot; title=&quot;Leaflet十大常用功能合集&quot;&gt;&lt;/a&gt;Leaflet十大常用功能合集&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/leaflet/"/>
    
    
  </entry>
  
  <entry>
    <title>基于leaflet的离线瓦片发布方式总结</title>
    <link href="https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-02T08:52:57.000Z</published>
    <updated>2020-10-02T12:57:20.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="离线瓦片发布"><a href="#离线瓦片发布" class="headerlink" title="离线瓦片发布"></a>离线瓦片发布</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leaflet是webgis中相对成熟的开源地图组件库，包含了几乎大部分开发者的基本需求，对于一般用户而言，联网状态下采用在线的瓦片服务即可，但也有一些需要必须离线的场景，本篇博客将讲述两种离线瓦片发布的方式，其一：采用Springboot后端发布；其二：直接将瓦片资源放在文件路径下访问。</p><h2 id="瓦片发布前的准备"><a href="#瓦片发布前的准备" class="headerlink" title="瓦片发布前的准备"></a>瓦片发布前的准备</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在发布瓦片服务前，先要根据框定的经纬度爬取地图瓦片图片，这里采用已经开源的”全能地图下载器3.0”，选择好需要爬取的地图级别（级别越大，相当于放大程度Zoom越大）所以越大耗费的存储空间越大。<br><img src="https://img-blog.csdnimg.cn/20201002161850125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Springboot瓦片发布"><a href="#Springboot瓦片发布" class="headerlink" title="Springboot瓦片发布"></a>Springboot瓦片发布</h2><p>参考<br><img src="https://img-blog.csdnimg.cn/20201002162401637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>controller下新建PublicData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/xyz"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;DATA_PATH&#125;"</span>)</span><br><span class="line">    String dataPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;name&#125;/&#123;level&#125;/&#123;col&#125;/&#123;rowExtention:.+&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xyz</span><span class="params">(@PathVariable String name, @PathVariable <span class="keyword">int</span> level, @PathVariable <span class="keyword">int</span> col, @PathVariable String rowExtention, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String[] rowParts=rowExtention.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> row=Integer.parseInt(rowParts[<span class="number">0</span>]);</span><br><span class="line">            String extension=rowParts[<span class="number">1</span>];</span><br><span class="line">            String path = dataPath+<span class="string">"/"</span>+name+<span class="string">"/"</span>+level+<span class="string">"/"</span>+col+<span class="string">"/"</span>+rowExtention;</span><br><span class="line"><span class="comment">//            InputStream inputStream = SqliteUtil.readTile(dataPath,name,level,col,row);</span></span><br><span class="line">            InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            <span class="keyword">if</span>(inputStream==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedImage br = ImageIO.read(inputStream);</span><br><span class="line">            ImageIO.write(br, extension, response.getOutputStream());</span><br><span class="line">            br.flush();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(String.format(<span class="string">"%s/%d/%d/%s请求出错!"</span> ,name,level,col,rowExtention));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CorsFilter.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;web.CorsFilter&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> corsFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (corsFilter) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,PUT,DELETE,OPTIONS"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length,Authorization,Accept,X-Requested-With"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置图片路径，在application.properties中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#瓦片存放的本地路径</span><br><span class="line">DATA_PATH = /Users/apple/xxx/xxx</span><br><span class="line">#DATA_PATH = E:/newtask</span><br><span class="line">#设置允许跨域（jar包设置为true，war包设置为false）</span><br><span class="line">web.CorsFilter = true</span><br></pre></td></tr></table></figure><p>地图前端的url：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span><br></pre></td></tr></table></figure><h2 id="本地路径访问"><a href="#本地路径访问" class="headerlink" title="本地路径访问"></a>本地路径访问</h2><p>把url地址写对即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;离线瓦片发布&quot;&gt;&lt;a href=&quot;#离线瓦片发布&quot; class=&quot;headerlink&quot; title=&quot;离线瓦片发布&quot;&gt;&lt;/a&gt;离线瓦片发布&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; leaflet是web</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/leaflet/"/>
    
    
    <category term="地图" scheme="https://ericzikun.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
    <category term="gis" scheme="https://ericzikun.github.io/tags/gis/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="离线地图" scheme="https://ericzikun.github.io/tags/%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/tags/leaflet/"/>
    
  </entry>
  
  <entry>
    <title>hugegraph实战总结</title>
    <link href="https://ericzikun.github.io/2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-02T07:50:24.000Z</published>
    <updated>2020-10-02T08:07:12.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hugegraph安装"><a href="#hugegraph安装" class="headerlink" title="hugegraph安装"></a>hugegraph安装</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hugegraph安装比较麻烦，必须版本一致：<br><img src="https://img-blog.csdnimg.cn/20201002152742770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>hugegraph server是发布图数据的核心服务</li><li>loader用于导入数据</li><li>studio是hugegraph官方的图谱前端，依赖于serve</li></ul><h1 id="本地hugegraph启动"><a href="#本地hugegraph启动" class="headerlink" title="本地hugegraph启动"></a>本地hugegraph启动</h1><h2 id="启动hugegraph-serve："><a href="#启动hugegraph-serve：" class="headerlink" title="启动hugegraph serve："></a>启动hugegraph serve：</h2><pre><code>hugegraph-0.10.4:   默认是8080与8182端口相关配置：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 。。省略</span><br><span class="line">backend=rocksdb</span><br><span class="line">serializer=binary</span><br><span class="line">rocksdb.data_path=.</span><br><span class="line">rocksdb.wal_path=.</span><br><span class="line"></span><br><span class="line">store=hugegraph</span><br><span class="line"></span><br><span class="line">search.text_analyzer=jieba</span><br><span class="line">search.text_analyzer_mode=INDEX</span><br><span class="line"></span><br><span class="line"># rocksdb backend config</span><br><span class="line">#rocksdb.data_path=/path/to/disk</span><br><span class="line">#rocksdb.wal_path=/path/to/disk</span><br></pre></td></tr></table></figure><p>初始化本地的rockdb以及启动serve服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/init-store.sh        </span><br><span class="line">bin/start-hugegraph.sh</span><br></pre></td></tr></table></figure><h2 id="导入数据："><a href="#导入数据：" class="headerlink" title="导入数据："></a>导入数据：</h2><p>在hugegraph-loader-0.10.0下：<br>具体数据格式参考官方的example/file文件，struct.json和schema.groovy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy</span><br></pre></td></tr></table></figure><h2 id="启动前端："><a href="#启动前端：" class="headerlink" title="启动前端："></a>启动前端：</h2><p>在hugegraph-studio-0.10.0下：   默认值：8088端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>PS: 一定记得 如果更改了数据， 一定要清空db再导入！！否则前后属性如果不一致会报错！<br>使用tools的清空命令：</p><p>在hugegraph-tools-1.4.0下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph graph-clear -c "I'm sure to delete all data"</span><br></pre></td></tr></table></figure><p>前端更改：增加节点图片：改index.js里面：</p><p><img src="https://img-blog.csdnimg.cn/20201002152536570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><p>服务器上部署会略有不同！<br><a href="https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html" target="_blank" rel="noopener">https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html</a></p><p>导入的命令和本地不同，需要加上ip和端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy -h 17x.xx.xx.xx -p 8080</span><br></pre></td></tr></table></figure><p>clear数据库：</p><p>修改hugegraph-tools下面的bin/hugegraph 指定ip和端口即可</p><p>重新导入数据时，需要clear，服务器上需要指定</p><p><img src="https://img-blog.csdnimg.cn/20201002154409198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br>效果图：<br><img src="https://img-blog.csdnimg.cn/20201002154501720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hugegraph安装&quot;&gt;&lt;a href=&quot;#hugegraph安装&quot; class=&quot;headerlink&quot; title=&quot;hugegraph安装&quot;&gt;&lt;/a&gt;hugegraph安装&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Hugegraph" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Hugegraph/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="知识图谱" scheme="https://ericzikun.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="hugegraph" scheme="https://ericzikun.github.io/tags/hugegraph/"/>
    
    <category term="自然语言处理" scheme="https://ericzikun.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch(下)</title>
    <link href="https://ericzikun.github.io/2020/10/01/elasticsearch-%E4%B8%8B-1/"/>
    <id>https://ericzikun.github.io/2020/10/01/elasticsearch-%E4%B8%8B-1/</id>
    <published>2020-10-01T14:53:39.000Z</published>
    <updated>2020-10-01T14:55:36.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JD商城实战"><a href="#JD商城实战" class="headerlink" title="JD商城实战"></a>JD商城实战</h2><p>新建Springboot initializr项目</p><p>导入es、fastjson等pom下的依赖</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>数据问题？数据库获取，消息队列中获取，都可以成为数据源，或者爬虫</p><p>爬取数据：（获取请求返回的页面信息，筛选出我们想要的数据就可以了）</p><p>jsoup包:用于解析网页，不能爬电影</p><p>新建一个utils包放网页解析的工具类</p><p><img src="https://img-blog.csdnimg.cn/20200902210018737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>本质的请求是：</p><p><a href="https://search.jd.com/Search?keyword=java" target="_blank" rel="noopener">https://search.jd.com/Search?keyword=java</a></p><p><img src="https://img-blog.csdnimg.cn/2020090221003863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所有在Js中的方法这里都可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword=java"</span>;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line">        System.out.println(element.html());</span><br><span class="line">          <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">            System.out.println(img);</span><br><span class="line">            System.out.println(price);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902210114208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210129877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902210152928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>输出结果</p><p><img src="https://img-blog.csdnimg.cn/20200902210209190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>注意：</p><p>在图片较多的网站中，图片往往是延迟加载的，注意看图片的属性：</p><p><img src="https://img-blog.csdnimg.cn/20200902210224973.png#pic_center" alt="在这里插入图片描述"></p><p>将获取到的元素 封装成对象，新建pojo，Content.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="comment">//可以自己添加属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次封装工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//丢进Springboot中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseJD(<span class="string">"java"</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword="</span> + keywords;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//所有你在js中可以使用的方法，这里都可以使用</span></span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(element.html());</span></span><br><span class="line">        <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        ArrayList&lt;Content&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;Content&gt;();</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            Content content = <span class="keyword">new</span> Content();</span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            content.setTitle(title);</span><br><span class="line">            goodsList.add(content);</span><br><span class="line"><span class="comment">//            System.out.println("===============================");</span></span><br><span class="line"><span class="comment">//            System.out.println(img);</span></span><br><span class="line"><span class="comment">//            System.out.println(price);</span></span><br><span class="line"><span class="comment">//            System.out.println(title);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodsList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写业务层service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> com.kun.utils.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//业务编写</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.解析数据放入es索引中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keywords);</span><br><span class="line">        <span class="comment">//把查询的数据放入我们的es中</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"2m"</span>);</span><br><span class="line"><span class="comment">//批量插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contents.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">"jd_goods"</span>)</span><br><span class="line">                            .source(JSON.toJSONString(contents.get(i)), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：由于这个文件中又Autowire，所以就算建了主函数psvm，也不能测，必须启动服务；</p><p>直接用controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">parse</span><span class="params">(@PathVariable(<span class="string">"keyword"</span>)</span> String keywords) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>  contentService.parseContent(keywords);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在业务层中实现搜索功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 获取数据实现搜索功能</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPage(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span>(pageNo&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"title"</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    ArrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        list.add(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;"</span>)</span><br><span class="line">  <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; search(<span class="meta">@PathVariable</span>(<span class="string">"keyword"</span>) String keyword,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageNo"</span>)<span class="keyword">int</span> pageNo,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageSize"</span>) <span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="keyword">return</span> contentService.searchPage(keyword, pageNo, pageSize);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>先在一个任意包下<code>npm install vue</code>生成vue文件，将内部一些js包导入Springboot项目中；axios.min.js;vue.min.js</p><p><img src="https://img-blog.csdnimg.cn/2020090221025572.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210315359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在前端每个商品中得到result值</p><p><img src="https://img-blog.csdnimg.cn/20200902210337955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3><p>修改业务层ContentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//3. 新增高亮功能</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPageHighlightBuilder(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        parseContent(keyword);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            pageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//条件搜索</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        sourceBuilder.from(pageNo);</span><br><span class="line">        sourceBuilder.size(pageSize);</span><br><span class="line">        <span class="comment">//精准匹配</span></span><br><span class="line"><span class="comment">//        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("title", keyword);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.query(termQueryBuilder);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//match匹配 可以支持中文搜索</span></span><br><span class="line">        MatchQueryBuilder matchQueryBuilder = <span class="keyword">new</span> MatchQueryBuilder(<span class="string">"title"</span>, keyword);</span><br><span class="line">        sourceBuilder.query(matchQueryBuilder);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));<span class="comment">//超时</span></span><br><span class="line">        <span class="comment">//高亮</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">"title"</span>); <span class="comment">//高亮的字段</span></span><br><span class="line">        highlightBuilder.requireFieldMatch(<span class="keyword">false</span>);<span class="comment">//如果一句里面有多个关键词高亮，则只显示第一个</span></span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;span style='color:red'&gt;"</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">        sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        <span class="comment">//执行搜索</span></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        ArrayList&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields(); <span class="comment">//获取到高亮字段</span></span><br><span class="line">            HighlightField title = highlightFields.get(<span class="string">"title"</span>);</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap(); <span class="comment">//原来的结果！要在结果里面将高亮置换一下</span></span><br><span class="line">            <span class="comment">//解析高亮的字段 将原来的字段换为我们高亮的字段即可</span></span><br><span class="line">            <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Text[] fragments = title.fragments();</span><br><span class="line">                String n_title = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                    n_title += text;</span><br><span class="line">                &#125;</span><br><span class="line">                sourceAsMap.put(<span class="string">"title"</span>, n_title);<span class="comment">//高亮字段替换掉原来的内容即可！</span></span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200902210811692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JD商城实战&quot;&gt;&lt;a href=&quot;#JD商城实战&quot; class=&quot;headerlink&quot; title=&quot;JD商城实战&quot;&gt;&lt;/a&gt;JD商城实战&lt;/h2&gt;&lt;p&gt;新建Springboot initializr项目&lt;/p&gt;
&lt;p&gt;导入es、fastjson等pom下的依赖</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch(中)</title>
    <link href="https://ericzikun.github.io/2020/09/02/elasticsearch-%E4%B8%AD/"/>
    <id>https://ericzikun.github.io/2020/09/02/elasticsearch-%E4%B8%AD/</id>
    <published>2020-09-02T13:20:55.000Z</published>
    <updated>2020-10-01T14:57:10.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于文档的基本操作（重点）："><a href="#关于文档的基本操作（重点）：" class="headerlink" title="关于文档的基本操作（重点）："></a>关于文档的基本操作（重点）：</h2><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204531474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204542249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新数据，将小明改成小红"><a href="#更新数据，将小明改成小红" class="headerlink" title="更新数据，将小明改成小红"></a>更新数据，将小明改成小红</h4><p><img src="https://img-blog.csdnimg.cn/20200902204557115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="PUT更新数据"><a href="#PUT更新数据" class="headerlink" title="PUT更新数据"></a>PUT更新数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204609525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>version代表被改变的次数</p><p>Post,_update自由度更高，PUT必须一次性修改一个个体的全部内容，但是Post可以选择部分修改！</p><p><img src="https://img-blog.csdnimg.cn/20200902204624164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这个和PUT无异，要在后加_update</p><p><img src="https://img-blog.csdnimg.cn/20200902204637593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220465930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="简单的搜索："><a href="#简单的搜索：" class="headerlink" title="简单的搜索："></a>简单的搜索：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET Kuangshen&#x2F;user&#x2F;_search?q&#x3D;name:狂神说</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204720262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>简单的条件查询，可以根据默认的映射规则，产生基本的查询！</p><p><img src="https://img-blog.csdnimg.cn/20200902204750491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>复杂操作搜索 select（排序，分页，高亮，模糊查询，精准查询）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;张三&quot;,</span><br><span class="line">          &quot;age&quot; : 3,</span><br><span class="line">          &quot;desc&quot; : &quot;法外狂徒&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;交友&quot;,</span><br><span class="line">            &quot;旅游&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;李四&quot;,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;desc&quot; : &quot;不知道如何形容&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;篮球&quot;,</span><br><span class="line">            &quot;IT&quot;,</span><br><span class="line">            &quot;型男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;王五&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个屌丝&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;羽毛球&quot;,</span><br><span class="line">            &quot;钢琴&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 9,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.9034984,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.9034984,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.6534033,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hit: 索引和文档信息</p><p>查询的结果总数</p><p>然后就是查询出来的具体文档</p><p>数据中的东西都可以遍历出来</p><p>分数：通过score判断谁更加符合结果</p><h4 id="指定字段查询："><a href="#指定字段查询：" class="headerlink" title="指定字段查询："></a>指定字段查询：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后使用java操作es，所有的方法和对象就是这里面的key！</p><h3 id="复杂操作："><a href="#复杂操作：" class="headerlink" title="复杂操作："></a>复杂操作：</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>order中的desc降序、asc升序;按照age</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From:从第几个数据开始，返回多少条数据（单页面的数据）</p><p>数据下标还是从0开始的，和学的所有数据结构是一样的</p><p>/search/{current}/{pagesize}</p><h4 id="布尔值查询"><a href="#布尔值查询" class="headerlink" title="布尔值查询"></a>布尔值查询</h4><p>通过布尔值进行更加精确的查询：多条件精确查询</p><p>must命令（相当于mysql的and），即所有条件要同时符合；如果将must改为should（相当于or），则只要满足其一即可；</p><p>类似的  must not 查询不是。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 23</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器（filter）"><a href="#过滤器（filter）" class="headerlink" title="过滤器（filter）"></a>过滤器（filter）</h4><p>筛选age范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 10,</span><br><span class="line">              &quot;lte&quot;: 40</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><h4 id="匹配多个条件"><a href="#匹配多个条件" class="headerlink" title="匹配多个条件"></a>匹配多个条件</h4><p>匹配出tags里面只要包含有男的，同时按照上到下分值高到低排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 技术&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204843612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>多个条件使用空格隔开</p><p>只要满足其中一个结果即可以被查出</p><p>这个时候可以通过分值基本的判断</p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term查询是直接通过待排索引指定的词条进行精确的查找的！</p><p>关于分词：</p><p>term，直接查询精确的</p><p>match：会使用分词器解析！（先分析文档，然后再通过分析的文档进行查询！）</p><h4 id="两个字段类型text-keyword"><a href="#两个字段类型text-keyword" class="headerlink" title="两个字段类型text keyword"></a>两个字段类型text keyword</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#新建db</span><br><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">       &quot;desc&quot;:&#123;</span><br><span class="line">         &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">       &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#插入两条数据</span><br><span class="line">PUT testdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> PUT testdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204916616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202009022050161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205033299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于desc的type是keyword，当做整体去搜索了</p><p>总结：<strong>keyword字段类型不会被分词器解析！</strong></p><h4 id="多个值匹配的精确查询"><a href="#多个值匹配的精确查询" class="headerlink" title="多个值匹配的精确查询"></a>多个值匹配的精确查询</h4><p>精确查询多个值</p><p><img src="https://img-blog.csdnimg.cn/20200902205051762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p class&#x3D;&#39;key&#39; style&#x3D;&#39;color:red&#39;&gt;&quot;, </span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认是<code>&lt;em&gt;</code>标签</p><p><img src="https://img-blog.csdnimg.cn/20200902205112655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>也可以是自定义标签：设置pre_tags、post_tags</p><p><img src="https://img-blog.csdnimg.cn/20200902205134748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>匹配</li><li>按照条件匹配</li><li>精确匹配</li><li>区间范围匹配</li><li>匹配字段过滤</li><li>多条件查询</li><li>高亮查询</li></ul><h2 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200902205202942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="找原生依赖"><a href="#找原生依赖" class="headerlink" title="找原生依赖"></a>找原生依赖</h4><p><img src="https://img-blog.csdnimg.cn/20200902205225827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="https://img-blog.csdnimg.cn/20200902205249274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>新建一个empty project ，再创建普通模块</p><p><img src="https://img-blog.csdnimg.cn/2020090220533562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>创建Springboot 模块：</p><p><img src="https://img-blog.csdnimg.cn/20200902205358941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>勾上依赖：</p><p><img src="https://img-blog.csdnimg.cn/20200902205446302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于刚刚建的空project，故要陪JDK环境</p><p><img src="https://img-blog.csdnimg.cn/20200902205503601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205545193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205617604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220563956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>问题：一定要保证我们的导入依赖和我们的es版本一致</p><p>默认的导入依赖和我们本地的版本不一致！</p><p>可以自定义版本依赖，保证一致</p><p>新建config、ElasticSearchConfig.java`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狂神的spring两步骤：</span></span><br><span class="line"><span class="comment">//1.找对象</span></span><br><span class="line"><span class="comment">//2.放到spring中用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码</p><p><img src="https://img-blog.csdnimg.cn/20200902205659550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="具体测试es-api："><a href="#具体测试es-api：" class="headerlink" title="具体测试es api："></a>具体测试es api：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es 高级客户端测试API</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuangshenEsApiApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="comment">//面向对象来操作</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"restHighLevelClient"</span>)  <span class="comment">//这里的qualifier用来指定下面的client为原始的restHighLevelClient</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试索引的创建 Request</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建索引请求 相当于kibana中的PUT</span></span><br><span class="line">CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="comment">// 2.执行创建请求IndicesClient ,请求后获得响应</span></span><br><span class="line">CreateIndexResponse createIndexResponse =</span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//测试获取索引   判断是否存在某索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span>  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"testdb2"</span>);</span><br><span class="line">AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来应该是private RestHighLevelClient restHighLevelClient;这里为了简便，所以用Qualifier来限定client为restHighLevelClient；</p><p><img src="https://img-blog.csdnimg.cn/20200902205728393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205815265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205829872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>创建索引</li><li>判断索引是否存在</li><li>删除索引</li><li>创建文档</li><li>crud文档</li></ul><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><p>新建一个pojo，放入User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于要将我们的数据放入请求 json，故在pom中导入阿里巴巴fastjson</p><p>这里是将对象编写为Json，再放入es的request中</p><p>编写test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说"</span>,<span class="number">3</span>);</span><br><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则 put /kuang_index/_doc/1</span></span><br><span class="line">request.id(<span class="string">"1"</span>);</span><br><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将我们的数据放入请求 json</span></span><br><span class="line">request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发送请求</span></span><br><span class="line">IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(indexResponse.toString());<span class="comment">//</span></span><br><span class="line">System.out.println(indexResponse.status());<span class="comment">//对应我们命令返回的状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205848762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(getResponse.getSourceAsString());<span class="comment">//打印文档的内容</span></span><br><span class="line">System.out.println(getResponse);<span class="comment">//返回的全部内容和命令是一样的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205903708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新文档信息"><a href="#更新文档信息" class="headerlink" title="更新文档信息"></a>更新文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"kuang_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">updateRequest.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说Java"</span>, <span class="number">18</span>);</span><br><span class="line">updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line"></span><br><span class="line">UpdateResponse updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(updateResponse.status());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205926881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="删除文档信息"><a href="#删除文档信息" class="headerlink" title="删除文档信息"></a>删除文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文档记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">bulkRequest.timeout(<span class="string">"10s"</span>);<span class="comment">//数据量大的时候，秒数可以增加</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz"</span>,<span class="number">11</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz2"</span>,<span class="number">12</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz3"</span>,<span class="number">13</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz4"</span>,<span class="number">14</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz5"</span>,<span class="number">15</span>));</span><br><span class="line"><span class="comment">//批处理请求</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">bulkRequest.add(</span><br><span class="line"><span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>)</span><br><span class="line">.id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">.source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求+获得响应</span></span><br><span class="line">BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(bulkResponse.hasFailures());<span class="comment">//返回false：成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205948550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>小技巧：</p><p>一般企业中，会把index名存在utils里面的ESconst.java文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESconst</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ES_INDEX = <span class="string">"kuang_index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// SearchRequest 搜索请求</span></span><br><span class="line"><span class="comment">// SearchSourceBuilder 条件构造</span></span><br><span class="line"><span class="comment">// HighlightBuilder 构建高亮</span></span><br><span class="line"><span class="comment">// TermQueryBuilder 精确查询</span></span><br><span class="line"><span class="comment">// MatchAllQueryBuilder</span></span><br><span class="line"><span class="comment">// xxx QueryBuilder 对应我们刚才看到的命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(ESconst.ES_INDEX);</span><br><span class="line"><span class="comment">// 构建搜索的条件</span></span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件,可以使用querybuilders工具类实现</span></span><br><span class="line"><span class="comment">// QueryBuilders.termQuery精确匹配</span></span><br><span class="line"><span class="comment">// QueryBuilders.matchAllQuery匹配所有</span></span><br><span class="line">TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"qinjiang1"</span>);</span><br><span class="line"><span class="comment">//MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">sourceBuilder.query(termQueryBuilder);</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="comment">//sourceBuilder.from();</span></span><br><span class="line"><span class="comment">//sourceBuilder.size();</span></span><br><span class="line"><span class="comment">// 设置查询的时间 希望在60s内查出</span></span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">searchRequest.source(sourceBuilder);</span><br><span class="line">SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"><span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于文档的基本操作（重点）：&quot;&gt;&lt;a href=&quot;#关于文档的基本操作（重点）：&quot; class=&quot;headerlink&quot; title=&quot;关于文档的基本操作（重点）：&quot;&gt;&lt;/a&gt;关于文档的基本操作（重点）：&lt;/h2&gt;&lt;h3 id=&quot;基本操作：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>初探ElasticSearch+JD商城仿站实战(上)</title>
    <link href="https://ericzikun.github.io/2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/"/>
    <id>https://ericzikun.github.io/2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/</id>
    <published>2020-09-02T13:15:55.000Z</published>
    <updated>2020-10-01T14:56:48.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><p>官网:elastic.co</p><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>官网下载巨慢，翻墙下载</p><p>目录</p><p><img src="https://img-blog.csdnimg.cn/20200902202036128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>启动，访问9200：<br><img src="https://img-blog.csdnimg.cn/20200902202356416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902202418408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>访问9200接口：<br> <img src="https://img-blog.csdnimg.cn/20200902202445139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装elasticsearch-head："><a href="#安装elasticsearch-head：" class="headerlink" title="安装elasticsearch-head："></a>安装elasticsearch-head：</h2><p>git clone git://github.com/mobz/elasticsearch-head.git</p><p>cd elasticsearch-head</p><p>npm install</p><p>npm run start</p><p>open <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a></p><p>存在一个9200和9100的跨域问题！</p><p>点击链接，报跨域的错！</p><p><img src="https://img-blog.csdnimg.cn/20200902202606182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改elasticsearch中config下的yaml配置文件，修改：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202629294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启，连接成功：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202646249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>把索引当做一个数据库！可以建立索引（库），文档（库中的数据！）</p><p><img src="https://img-blog.csdnimg.cn/20200902202740368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>后面所有的查询，查询功能在<strong>Kibana</strong>中做！</p><h2 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a>了解ELK</h2><p> <img src="https://img-blog.csdnimg.cn/20200902202848351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p><img src="https://img-blog.csdnimg.cn/20200902202904980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>好处：ELK基本上都是拆箱即用</p><p>启动测试：点bin下的kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902202930697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>默认的kibana端口为5601</p><p>PS：<strong>注意elasticsearch和kibana的版本必须一致</strong> 否则出错！</p><p>开发工具：（Post curl head 谷歌浏览器插件测试）</p><p>汉化，修改kibana yaml中配置 重启，</p><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><ol><li>索引</li><li>字段类型（mapping）</li><li>文档（documents）</li></ol><p>概述：</p><p>集群、节点、索引、类型、文档、分片、映射是什么?</p><p>elasticsearch是面向文档，关系型数据库和elasticsearch 客观的对比如下，一切都是JSON！</p><p><img src="https://img-blog.csdnimg.cn/20200902203224509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220333641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>类型示例：</p><p><img src="https://img-blog.csdnimg.cn/20200902203401778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200902203433671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203518682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p><img src="https://img-blog.csdnimg.cn/20200902203602334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>放在elasticsearch的plugin（插件）下</p><p>重启观察ES</p><p><img src="https://img-blog.csdnimg.cn/20200902203708754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>关于elasticsearch中的命令 如elasticsearch-plugin：</p><p>命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin list</span><br></pre></td></tr></table></figure><p>在kibana中测分词器：</p><p><img src="https://img-blog.csdnimg.cn/20200902203744169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>我们输入 超级喜欢狂神或java</p><p>发现问题：狂神说被拆开了！</p><p>这种自己需要的词，需要自己加到我们的分词器字典中！</p><p>向ik分词器增加自己的配置</p><p><img src="https://img-blog.csdnimg.cn/2020090220382014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203835726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启es、kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902203858320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再次测试一下狂神说，看下效果！ik_max_word最细粒度划分</p><p><img src="https://img-blog.csdnimg.cn/20200902203920309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203939488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>以后自定义dic、导入即可！</p><p>索引引擎里面最重要的首先就是分词</p><h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制！</p><p><img src="https://img-blog.csdnimg.cn/20200902204000238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>基础测试</p><ol><li>创建一个索引！也是在kibana终端中试用版PUT命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test1&#x2F;type1&#x2F;1&#123;  </span><br><span class="line">&quot;name&quot;: &quot;狂神说&quot;, </span><br><span class="line">&quot;age&quot;: &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204049169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>完成了自动增加索引！数据也成功的添加了，这就是可以当做数据库看的原因。。</p><ol start="2"><li><p>那么name字段用不用指定类型呢？毕竟我们关系型数据库 是需要指定类型的啊！</p><ul><li>字符串类型 text、keyword</li><li>数值类型 long、integer、short、byte、double、float、scaled float</li><li>日期类型date</li><li>te布尔值类型boolean</li><li>二进制类型binary</li><li>等等。。。</li></ul></li><li><p>指定字段的类型——创建规则</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200902204112495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/2020090220423579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>GET命令得到库的信息：</p><p><img src="https://img-blog.csdnimg.cn/20200902204250447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200902204308198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ol start="4"><li>查看默认的信息</li></ol><p>通过命令get _cat/可以获得es当前的很多信息！<br><img src="https://img-blog.csdnimg.cn/20200902204407775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204421616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改 提交还是使用PUT即可！然后覆盖！最新办法</p><p>曾经的办法：</p><p><img src="https://img-blog.csdnimg.cn/20200902204437570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>现在的方法 使用POST：</p><p><img src="https://img-blog.csdnimg.cn/20200902204448548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>删除索引——DELETE<br><img src="https://img-blog.csdnimg.cn/20200902204500303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通过DELETE命令实现删除、根据你的请求来判断是删除索引还是删除文档记录！</p><p>使用RESTFUL风格是我们ES推荐大家使用的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;h2 id=&quot;安装elasticsearch&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/tags/Elasticsearch/"/>
    
    <category term="京东商城实战" scheme="https://ericzikun.github.io/tags/%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术笔记ch5</title>
    <link href="https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/"/>
    <id>https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/</id>
    <published>2020-08-15T14:38:38.000Z</published>
    <updated>2020-10-17T07:36:18.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><p>类似LocalDate和NumberFormat的类使用静态工厂方法来构造对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();</span><br><span class="line">NumberFormat percentFormatter = NumberFormat.gatPercentInstance();</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">System.out.println(currencyFormatter.format(x));  <span class="comment">//0.1</span></span><br><span class="line">System.out.println(percentFormatter.format(x));   <span class="comment">//10%</span></span><br></pre></td></tr></table></figure><p>这里的NumberFormat类不使用构造器来完成，有两个原因：</p><ul><li>无法命名构造器。构造器名字必须与类相同，这里希望有两个不同名字，分别得到货币实例和百分比实例。</li><li>使用构造器时，无法改变所构造对象的类型，而工厂方法实际上将返回DecimalFormat类的对象，是NumberFormat的子类</li></ul><h3 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h3><p>main方法也是一种静态方法。main方法不对任何对象进行操作，事实上，启动程序时还没有任何对象。静态的main方法将执行并构造程序所需要的对象。</p><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>按值调用——表示方法接受的是调用者提供的值；</p><p>按引用调用——表示方法接收的是调用者提供的变量地址。</p><p>Java总是按值调用的。方法得到的是所有参数值的一个副本。也就是说，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">harry.raiseSalary(percent);</span><br></pre></td></tr></table></figure><p>无论方法如何实现，在这个方法调用后，percent值还是10。</p><p>但是对于对象引用则不同！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line"></span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体为：</p><ol><li>x初始化为harry值的一个副本，这里就是一个对象引用。</li><li>raiseSalary方法应用于这个对象引用。x和salary同时引用的那个Employee对象的工资提高了200%。</li><li>方法结束后x不再使用，对象变量harry继续引用那个工资增至3倍的员工对象</li></ol><h3 id="总结Java方法参数"><a href="#总结Java方法参数" class="headerlink" title="总结Java方法参数"></a>总结Java方法参数</h3><ul><li>方法不能修改基本数据类型的参数</li><li>方法可以改变对象参数的状态</li><li>方法参数不能让一个对象参数引用一个新的对象</li></ul><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><p>重载——同方法、不同参数</p><p>默认字段初始化：如果构造器中没有显示地为字段设置初值，则会被自动的赋为默认值！数值为0、布尔值为false、对象引用为null</p><p>无参构造器：如果编写一个类没有无参构造，就会为你提供一个无参数的构造器，如果已经只定义了有参，再调无参则不合法。</p><h4 id="参数名的定义："><a href="#参数名的定义：" class="headerlink" title="参数名的定义："></a>参数名的定义：</h4><p>习惯将参数名和实例字段保持一致，通过<strong>this</strong>来区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this的另一用法："><a href="#this的另一用法：" class="headerlink" title="this的另一用法："></a>this的另一用法：</h4><p>this除了可以指示一个方法的隐式参数外，还可以调用同一个类的另一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="string">"Employee #"</span> + nextId,s);</span><br><span class="line">   nextId ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用new Employee(6000)，Employee(double)构造器会调用Employee(String,double)构造器。</p><h4 id="初始化块："><a href="#初始化块：" class="headerlink" title="初始化块："></a>初始化块：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化块</span></span><br><span class="line">  &#123;</span><br><span class="line">    id = nextId;</span><br><span class="line">    nextId ++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = n;</span><br><span class="line">    salary = s;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = <span class="string">""</span>;</span><br><span class="line">    salary = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前有两种初始化数据字段的方法：</p><ul><li>构造器中赋值</li><li>声明中赋值</li></ul><p>另一个则是设置一个初始化块，只要构造这个类的对象，初始化块就会被执行——首先运行初始化快，然后才运行构造器的主体部分。</p><p>但是这不是必需的，通常将<strong>初始化代码放在构造器中</strong></p><p>区分于静态字段对应的静态代码块：如果类的静态字段需要很复杂的初始化代码，那么可以使用静态的初始化块</p><p>区分初始化块和静态初始化块：</p><ul><li><strong>静态初始化块</strong>:使用static定义,当类装载到系统时执行一次.若在静态初始化块中想初始化变量,那仅能初始化类变量,即static修饰的数据成员.</li><li><strong>非静态初始化块</strong>:在每个对象生成时都会被执行一次,可以初始化类的实例变量.</li></ul><h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><ul><li>保证数据私有</li><li>一定要对数据进行初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有字段都需要单独的字段访问器和字段更改器</li><li>分解有过多职责的类</li><li>类名和方法名要足够体现它们的职责</li><li>优先使用不可变的类</li></ul><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><p>继承的基本思想：基于已有的类创建新的类。就是复用已有类的方法，并且可以增加一些新的方法和字段</p><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>已存在的类——超类、基类、父类；新类——子类、派生类、孩子类</p><p>如Employee中的经理和和员工在薪资待遇上面存在一些差异，但也存在很多相同的地方。他们之间存在一个明显的“is-a”关系，每一个经理都是一个员工：<strong>“is-a”</strong>关系是继承的明显特征</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//added methods and fields</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setBonus不是在Employee中定义的，所以Employee不能使用它。经理继承了name、salary、hireDay三个字段，并且新增了bonus字段。</p><p>覆盖方法：</p><p>如果要返回经理的奖金</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary + bonus <span class="comment">//不成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为salary是父类的私有字段，子类Manager的getSalary方法不能直接访问到！</p><p>如果我们想调用父类Employee的getSalary方法，而不是当前类的这个方法，可以用super.getSalary()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> baseSalary = <span class="keyword">super</span>.getSalary();</span><br><span class="line">  <span class="keyword">return</span> baseSalary + bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的super和this不能等同于一类，因为super不是一个对象的引用，例如，不能将值super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。</p><p>注意：</p><ul><li>子类可以增加字段、增加方法或覆盖超类的方法，继承绝不会删除任何字段或方法<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="深入理解父子类继承（子类构造器）"><a href="#深入理解父子类继承（子类构造器）" class="headerlink" title="深入理解父子类继承（子类构造器）"></a>深入理解父子类继承（子类构造器）</h2></li></ul><p>有关子类是否继承了父类的私有字段（再理解）</p><p>如，Student类继承了Person类</p><p><strong>Student对象里，本身就装着一个Person对象</strong>。Student对象没有继承Person对象的name字段，所以Student对象没有一个叫name的字段。但Student内部封装的Person对象还是有name字段的。</p><img src="https://img-blog.csdnimg.cn/20200827225928570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student没有name字段，但它内部的Person对象有，而且还可以打出来看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// ERROR: name has private access in Person</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而且注意，我要直接打印Student的name字段 “s.name” ，报错说的是：<strong>Person类的name字段为私有，你不可以访问。而不是没有name字段。</strong></p><p>大胆一点的话，我们还可以给Student类再加一个name字段。这时候的Student对象本身有一个name字段，内部的基类Person对象还有一个name对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String personName, String studentName, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(personName);</span><br><span class="line">       <span class="keyword">this</span>.name = studentName;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="string">"whore"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// WHORE</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>使用super调用构造器，必须是子类构造器的第一条语句</li><li>子类构造器如果没有显式地调用超类的构造器，将自动地调用超类的无参数构造器，所以必须要求父类有无参构造，否则报错</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(<span class="string">"Carl Cracker"</span>,<span class="number">8000</span>,<span class="number">1987</span>,<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">boss.setBonus(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br><span class="line">staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee(<span class="string">"Tony"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Employee e:staff)</span><br><span class="line">  System.out.println(e.getName() + <span class="string">" "</span> + e.getSalary());</span><br></pre></td></tr></table></figure><p>对于e来说，既可以是Manager也可以是Employee，像这种的，一个对象变量可以指示多种实际类型的现象称为多态，在运行时可以自动地选择适当的方法，称为<strong>动态绑定</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(...);</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br></pre></td></tr></table></figure><p>这里面采用了多态，虽然staff[0]和boss引用同一个对象，但是编译器只将staff[0]看成是一个Employee对象，这意味着，可以这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boss.setBonus(<span class="number">5000</span>); <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>但不能这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>].setBonus(<span class="number">5000</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>这是因为staff[0]的声明类型是Employee，而setBonus不是Employee的方法。setBonus是Manager特有的方法，而不是覆盖重写父类的方法</p><p>多态——当声明变量为某一种形态的变量时，编译器就将它看成某种形态。</p><p>注意</p><ul><li>不能将超类的引用赋值给子类变量，如下非法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager m = staff[i]; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>原因很清楚：不是所有的员工都是经理，如果赋值成功，m有可能引用了一个不是经理的Employee对象，而在后面有可能会调用m.setBonus，这就会发生错误。</p><h3 id="警告："><a href="#警告：" class="headerlink" title="警告："></a>警告：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manager[] managers = <span class="keyword">new</span> Manager[<span class="number">10</span>];</span><br><span class="line">Employee[] staff = managers; <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>这样是没有问题的，因为manger[i]是一个Manager就一定是一个Employee！一定要切记：这里的staff和mangers引用的是同一个数组，就是一开始new的长度为10的数组！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>);</span><br></pre></td></tr></table></figure><p>如果这么去赋值，编译器是可以接受的！但是！！staff[0]和managers[0]是相同的引用，我们把一个普通的员工Harry擅自归入到经理行列（数组）里面去了！！后面如果调用manager[0].setBonus(1000)的时候，将会试图调用一个根本不存在的实例字段，进而搅乱相邻存储空间的内容</p><p>牢记：所有数组要牢记创建时候的元素类型，并负责监督仅将类型兼容的引用存储到数组中！例如，使用new managers[10]创建数组是一个经理数组如果试图存储一个Employee类型的引用就会引发ArrayStoreException异常 </p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ol><li><p>编译器查看对象的声明类型和方法名。</p></li><li><p>确定方法调用中提供的参数类型。</p></li><li><p>如果是private、static、final或者构造器，那么编译器将可以准确地知道应该调用哪个方法。——静态绑定；</p><p>动态绑定——如果调用的方法依赖于隐式参数的实际类型，则必须在运行的时候使用动态绑定。</p></li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>对于对象：</p><p>由于在员工列表中，一部分是纯员工，有一部分是经理（子类），在创建数组的时候申明的是Employee对象，而Employee对象无法读取到其Manager字段或方法等属性（多态），那么在实际用Manager这个对象的时候，要先强制转换成Manager类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = (Manager)staff[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>将其复原为Manager对象，以便于访问其额外的字段，如bonus奖金。当然，前提是0号确实是Manager，如果“谎报”，则会报错ClassCastException，为了确保不会谎报，可以先判断一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (staff[<span class="number">0</span>] <span class="keyword">instanceof</span> Manager)</span><br><span class="line">&#123;</span><br><span class="line">  boss = (Manager)staff[<span class="number">1</span>];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受保护字段protected"><a href="#受保护字段protected" class="headerlink" title="受保护字段protected"></a>受保护字段protected</h2><p>一般来说，声明为private私有，对其他类都是不可见的，即，子类不能访问超类的私有字段。不过有时候希望限制<strong>超类中的某个方法只允许子类访问</strong>，或者<strong>希望子类的方法访问超类的某个字段</strong>。</p><p>例如，将Employee中的hireDay字段设为protected，而不是private，则Manager方法就可以访问到这个字段。</p><p>注意：</p><ul><li>要谨慎使用，如果你的代码被别的程序员访问了受保护字段，那么后期维护时候，修改自身类则会影响到别人！</li><li>受保护的方法更具有实际意义，表明子类得到了信任，可以正确的使用这个方法，而其他类则不行</li></ul><h2 id="泛型类数组列表"><a href="#泛型类数组列表" class="headerlink" title="泛型类数组列表"></a>泛型类数组列表</h2><p>ArrayList是一个有类型参数的<strong>泛型类</strong>。尖括号里面填写保存的元素对象类型，如<code>ArrayList&lt;Employee&gt;</code></p><p>声明一个保存Employee对象的数组列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br></pre></td></tr></table></figure><p>也可以省略右边括号里面的类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h2><p>每个基本类型都有与之对应的类Integer、Long、Float、Double、Short、Byte、Character、Boolean；</p><p><strong>&lt;&gt;尖括号中的类型参数不允许是基本类型</strong></p><p>由于每个值分别包装在对象中，所以<code>ArrayList&lt;Integer&gt;</code>效率远远低于int[]</p><p>自动装箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;()</span><br><span class="line">list.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此时，进行了自动装箱过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(Integer.valueOf(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>自动拆箱：此时拿到的n应该是<code>&lt;Integer&gt;</code>类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i)</span><br></pre></td></tr></table></figure><p>转换成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i).intValue();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;静态工厂方法&quot;&gt;&lt;a href=&quot;#静态工厂方法&quot; class=&quot;headerlink&quot; title=&quot;静态工厂方法&quot;&gt;&lt;/a&gt;静态工厂方法&lt;/h3&gt;&lt;p&gt;类似LocalDate和NumberFormat的类使用静态工厂方法来构造对象。&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Java/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术读书笔记ch4</title>
    <link href="https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/"/>
    <id>https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/</id>
    <published>2020-08-15T14:37:38.000Z</published>
    <updated>2020-10-01T15:00:13.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java核心技术-读书笔记："><a href="#Java核心技术-读书笔记：" class="headerlink" title="Java核心技术 读书笔记："></a>Java核心技术 读书笔记：</h1><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><h2 id="对象的理解："><a href="#对象的理解：" class="headerlink" title="对象的理解："></a>对象的理解：</h2><p>每个对象包含对用户公开的特定功能部分和隐藏的实现部分。从根本上来说，只要对象能够满足要求，就不必关心其功能到底如何实现！</p><p>此外，每个对象都保存着描述当前状况的信息——对象的状态。对象状态的改变必须通过调用方法实现（如果不经过调用就可以改变对象状态，只能说明<strong>破坏了封装性！</strong>）</p><h3 id="对象引用："><a href="#对象引用：" class="headerlink" title="对象引用："></a>对象引用：</h3><p>对象的创建通过对象提前写好的构造函数（无参 有参），new+构造才能够创建出一个新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date s = <span class="keyword">new</span> Date()</span><br><span class="line">Date s = k</span><br></pre></td></tr></table></figure><p>实际上，k和s引用的是同一对象（new的Date的对象），指向相同！</p><p>所有的Java对象都存储在<strong>堆</strong>中，当一个对象包含另一个对象变量时，它只是包含着另一个堆对象的指针！</p><h2 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h2><h3 id="三种关系："><a href="#三种关系：" class="headerlink" title="三种关系："></a>三种关系：</h3><ul><li>依赖（uses-a）如Order类使用Account类，是因为Order对象需要访问Account对象查看信用状态！——我们应该尽可能减少相互依赖：减少类之间的<strong>耦合！</strong></li><li>聚合（has-a）包含关系</li><li>继承（is-a）</li></ul><h3 id="公共类和非公共类（是否带public）"><a href="#公共类和非公共类（是否带public）" class="headerlink" title="公共类和非公共类（是否带public）"></a>公共类和非公共类（是否带public）</h3><ul><li>源文件名必须与public类的名字相匹配，在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。</li><li>一般习惯将类单独命名为xxx.java</li></ul><h3 id="类中的public方法："><a href="#类中的public方法：" class="headerlink" title="类中的public方法："></a>类中的public方法：</h3><p>public意味着任何类的任何方法都可以调用这些方法（一共有<strong>4个级别</strong>，后面介绍）</p><h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><ul><li>与类同名</li><li>可以有一个以上的构造器</li><li>构造器可以有任意数目的参数</li><li>构造器没有返回值</li><li>总是伴随<strong>new</strong>一起调用！</li></ul><h3 id="var声明局部变量："><a href="#var声明局部变量：" class="headerlink" title="var声明局部变量："></a>var声明局部变量：</h3><p>Java10中，如果可以从变量的初始值推导出它们的类型，可用var关键字声明局部变量，无须指定类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> harry =  <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>两者等效</p><p>隐式参数和显式参数：</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  salary += raise;</span><br><span class="line">&#125;</span><br><span class="line">number007.raiseSalary(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>其结果是将number007.salary字段新增5%（设置为了一个新值）</p><p>raiseSalary有两个参数，其一是前面的Employee类的对象，第二则是括号中的参数</p><p>关键词<strong>this</strong>指示隐式参数，可以改写：（强烈推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = <span class="keyword">this</span>.salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">this</span>.salary += raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以将实例字段和局部变量明显区分出来</strong></p><h3 id="警告！（初探对象封装性）"><a href="#警告！（初探对象封装性）" class="headerlink" title="警告！（初探对象封装性）"></a>警告！（初探对象封装性）</h3><p>不要编写返回可变对象引用的访问器方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hireDay   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的Date类有更改器方法setTime，也就是说Date对象是可变的，这就破坏了封装性！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = ...;</span><br><span class="line">Date d = harry.getHireDay();</span><br><span class="line"><span class="keyword">double</span> tenYearsInNilliseconds = <span class="number">10</span> * <span class="number">365.25</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">d.setTime(d.getTime() - (<span class="keyword">long</span>)tenYearMilliseconds);</span><br></pre></td></tr></table></figure><p>d和harry.hareDay引用的是同一个对象，对d调用更改器方法就可以自动地改变这个Employee对象的私有状态！</p><img src="https://img-blog.csdnimg.cn/20200827225837425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><p>如果要返回一个可变对象的引用，首先应该对它进行克隆！对象克隆指放在另一个新位置上的对象副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Date)hireDay.clone(<span class="number">0</span>)   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谈谈私有方法和公共方法"><a href="#谈谈私有方法和公共方法" class="headerlink" title="谈谈私有方法和公共方法"></a>谈谈私有方法和公共方法</h3><p>由于公共数据非常危险，应该将数据字段设置为私有的字段（很好理解），对于方法来说，尽管大部分都是公共的，但有些情况下用私有会更好：如，数据的表示发生了变化，这个方法可能会变得难以实现，或者不再需要，这并不重要，重要的是，只要它是私有方法，类的设计者就可以确信它不会在别处使用没所以可以将其删去，如果一个方法是公共的，就不能简单的删除，因为有可能在别处依赖！</p><h3 id="final实例字段"><a href="#final实例字段" class="headerlink" title="final实例字段"></a>final实例字段</h3><ul><li><p>一旦设置，以后就不再修改这个字段，如Employee类中的name字段设置为final，因为在对象构造后，值不会改变，即没有setName方法。</p></li><li><p>对于基本类型或者不可变类的字段尤其有用：</p><p>对于可变的类，可能混乱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringBuilder evaluations;</span><br></pre></td></tr></table></figure><p>它在Employee中初始化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluations = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>final关键字只是表示存储在evaluations变量中的<strong>对象引用</strong>不会再指向另一个不同的StringBuilder对象。不过这个对象依旧是可以更改的！！也就是地址不变而已</p></li></ul><h3 id="静态字段与静态方法"><a href="#静态字段与静态方法" class="headerlink" title="静态字段与静态方法"></a>静态字段与静态方法</h3><p>静态字段：属于类，不属于对象！例如，要给每个员工一个唯一的标识码，这里给Employee类添加一个实例字段id和一个静态字段nextId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  id = nextId;</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当新增员工时，其id是在整个员工nextId基础之上的！也就是说，这个nextId是公共调用的！</p><p>静态常量用的更多，比如Math类下的PI值</p><p>以下两种情况下可以使用静态方法：</p><ul><li>方法不需要访问对象的状态，因为它需要的所有参数都通过显式参数提供，如Math.pow</li><li>方法只需要访问类的静态字，如Employee.getNextId</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java核心技术-读书笔记：&quot;&gt;&lt;a href=&quot;#Java核心技术-读书笔记：&quot; class=&quot;headerlink&quot; title=&quot;Java核心技术 读书笔记：&quot;&gt;&lt;/a&gt;Java核心技术 读书笔记：&lt;/h1&gt;&lt;h1 id=&quot;第四章-对象与类&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Java/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Java描述整理</title>
    <link href="https://ericzikun.github.io/2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/"/>
    <id>https://ericzikun.github.io/2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/</id>
    <published>2020-07-20T14:36:48.000Z</published>
    <updated>2020-10-01T13:13:05.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h1><h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2. 线性表"></a>2. 线性表</h1><p>​    线性表是一种最常用、最简单，也是一种最基本的数据结构，它是学习其他数据结构的基础。</p><p><strong>线性表</strong>在计算机中可以用$\begin{cases}顺序存储 \\ 链式存储\end{cases}$两种存储结构来表示，其中，顺序存储的线性表成为顺序表，链式存储的线性表成为链表，<strong>链表</strong>又分为：$\begin{cases} 单链表 \\ 双向链表 \\ 循环链表\end{cases}$。</p><p>特点：</p><ul><li><p>对于同一个线性表，其每一个数据元素的值虽然不同，但必须具有相同的数据类型</p></li><li><p>数据元素之间具有一种线性的或“一对一”的逻辑关系：开始结点没有前驱，末尾结点没有后继，除开始和末尾结点外，其余数据元素有且仅有一个前驱和一个后继</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```:将已存在的线性表置为空表</span><br><span class="line"></span><br><span class="line">```isEmpty()```:判空</span><br><span class="line"></span><br><span class="line">```length()```:求线性表长度，即，元素个数</span><br><span class="line"></span><br><span class="line">```get(i)```:读取线性表中第i个数据元素的值。$<span class="number">0</span> \leqslant i \leqslant length-<span class="number">1</span>$</span><br><span class="line"></span><br><span class="line">```insert(i,x)```:在线性表的第i个数据元素之前插入一个值为x的数据元素。</span><br><span class="line"></span><br><span class="line">```remove(i)```:删除并返回线性表中第i个数据元素</span><br><span class="line"></span><br><span class="line"> ```indexOf(x)```:返回线性表中首次出现指定数据元素的位序号，若不包含次数据元素，则返回-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> ```desplay(<span class="number">0</span>)```:输出线性表中的各个数据元素的值</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-1-顺序表"><a href="#2-1-顺序表" class="headerlink" title="2.1 顺序表"></a>2.1 顺序表</h2><p><strong>定义：</strong></p><p>顺序表是用一组<strong>地址连续</strong>的存储单元依次存放线性表中各个数据元素的存储结构。<br><img src="https://img-blog.csdnimg.cn/20200827222236887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x300"  style="zoom:50%;" /></p><p><strong>特点：</strong></p><ul><li>在线性表中逻辑相邻的数据元素，在物理存储元素上也是相邻的</li><li>存储密度高，但需要预先分配“足够应用的存储空间，这可能将会造成存储空间的浪费，其中，$存储密度=\frac{数据元素本身值所需的存储空间}{该数据元素实际所占用的空间}$</li><li>便于随机存取</li><li>不便于插入和删除操作没这事因为在顺序表上进行插入和删除操作会引起大量数据元素的移动</li></ul><p>顺序表的<strong>局限性</strong>：</p><ul><li>若要为顺序表扩充存储空间，则需要重新创建一个地址连续的更大存储空间，并把原有的数据元素都复制到新的存储空间中</li><li>因为顺序表存储要求逻辑上相邻的数据元素，在物理存储位置上也是相邻的，这就使得增删数据元素则会引起平均约一半的数据元素的移动</li></ul><p><strong>总结</strong>——查询快、增删慢！</p><h3 id="顺序表代码实现："><a href="#顺序表代码实现：" class="headerlink" title="顺序表代码实现："></a>顺序表代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] listElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> curlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的线性表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqList</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span>; <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">        listElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//给顺序表分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//置空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span> ;  <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求线性表中数据元素个数，返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取到线性表第i个元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt; curlen-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        <span class="keyword">return</span> listElem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第i个元素之前插入一个值为x的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curlen == listElem.length) <span class="comment">//判断顺序表是否已经满</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"顺序表已满"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = curlen; j &lt; i ; j--)  <span class="comment">//插入后的元素向后移一个存储单位</span></span><br><span class="line">            listElem[j] = listElem[j-<span class="number">1</span>];</span><br><span class="line">        listElem[i] = x;</span><br><span class="line">        curlen++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除并返回线性表中第i个数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; curlen -<span class="number">1</span> ; j++)</span><br><span class="line">            listElem[j] = listElem[j+<span class="number">1</span>];<span class="comment">//删除元素后的元素向前移一个单位</span></span><br><span class="line">        curlen--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回线性表中首次出现指定的数据元素的位序号，若线性表中不包含此数据元素，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;curlen &amp;&amp; !listElem[j].equals(x))</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;curlen)</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出线性表中的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; curlen; j++) &#123;</span><br><span class="line">            System.out.println(listElem[j] + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqList L = <span class="keyword">new</span> SqList(<span class="number">10</span>);</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="string">"a"</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="string">"z"</span>);</span><br><span class="line">        L.insert(<span class="number">2</span>,<span class="string">"d"</span>);</span><br><span class="line">        L.insert(<span class="number">3</span>,<span class="string">"z"</span>);</span><br><span class="line">        System.out.println(<span class="string">"此顺序表为："</span>);</span><br><span class="line">        L.display();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> order = L.indexOf(<span class="string">"z"</span>);</span><br><span class="line">        <span class="keyword">if</span>(order !=-<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">"顺序表中第一次出现的值为'z'的数据元素位置为："</span>+order);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"此顺序表中不包含值为z的属于元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h2><p><strong>定义：</strong></p><p>顺序表适合表示静态线性表，一旦形成以后，就很少进行插入和删除操作，对于需要频繁插入和删除的动态线性表，通常采用<strong>链式存储结构</strong>。</p><p><strong>特点：</strong></p><ul><li>链式结构不要求逻辑上相邻的数据元素在物理上也相邻，它是用一组地址任意的存储单元来存放数据元素的值，故它没有顺序结构某些操作上的局限性，但却失去了随机存取的特点，在链式结构上只能进行顺序存取</li></ul><h3 id="单链表代码实现："><a href="#单链表代码实现：" class="headerlink" title="单链表代码实现："></a><strong>单链表代码实现：</strong></h3><p><strong>Node类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkList类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node head;  <span class="comment">//单链表的头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();<span class="comment">//初始化头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造一个长度为n的单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> Order)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">//初始化头结点，相当于无参构造</span></span><br><span class="line">        <span class="keyword">if</span>(Order)</span><br><span class="line">            create1(n); <span class="comment">//用尾插法顺序建立单链表</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            create2(n); <span class="comment">//用头插法逆位序建立单链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用尾插法顺序建立单链表，其中n为单链表的结点个数  先要编写insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(length(),sc.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用头插法逆位序建立单链表，其中n为单链表的结点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(<span class="number">0</span>,sc.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个已经存在的带头结点单链表置成空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head.data = <span class="keyword">null</span>;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断带头结点的单链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求带头结点的单链表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//新建一个p指针指向head</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++ length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求取带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针指向head，利用其遍历</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"get的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中的第i个结点之前插入一个值为x的新结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针先指向head，利用它遍历到i-1处</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j&lt; i-<span class="number">1</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span> || p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法hh"</span>);</span><br><span class="line"></span><br><span class="line">        Node s = <span class="keyword">new</span> Node(x);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j &lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中查找值为x的结点，返回位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; !p.data.equals(x))&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否含有x这个值</span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不存在值为"</span> + x + <span class="string">"的结点"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出单链表中的所有结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node node = head.next;  <span class="comment">//取出带头结点的单链表中的首结点 node作为指针来遍历</span></span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node.data + <span class="string">""</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();  <span class="comment">//换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LinkList L = <span class="keyword">new</span> LinkList();</span><br><span class="line">        L.display();</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        L.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L.length());</span><br><span class="line">        LinkList L2 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">false</span>);<span class="comment">//头插法</span></span><br><span class="line">        L2.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L2.length());</span><br><span class="line">        LinkList L3 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">true</span>);<span class="comment">//尾插法</span></span><br><span class="line">        L3.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L3.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200827222413646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /></p><h2 id="2-3-链表VS顺序表"><a href="#2-3-链表VS顺序表" class="headerlink" title="2.3 链表VS顺序表"></a>2.3 链表VS顺序表</h2><ul><li>与顺序表相比较,链表比灵活，它既不要求在预先分配的一块连续的存储空间中存储<br>线性表的所有数据元素,也不要求按其逻辑顺序来分配存储单元,可根据需要进行存储空间<br>的动态分配!因此,当线性表的长度变化较大或长度难以估计时,用链表。但在线性表的<br>长度基本可预计且变化较小的情况下,宜用顺序表,因为链表的存储密度较顺序表的低,且<br>顺序表具有随机存取的优势!</li><li>在顺序表中按序号访问第i个数据元素时的时间复杂度为O(1),而在链表中做同样操<br>作的时间复杂度为O(n)所以若要经常对线性表按序号访问数据元素时,顺序表要优先<br>链表;但在顺序表上做插入和删除操作时,需要平均移动一半的数据元素,而在链表上做插<br>入和删除操作,不需要移动任何数据元素,虽然也要查找插入或删除数据元素的位置,但由<br>于主要是比较操作,所以从这个角度考虑,链表要优先于顺序表</li><li>总之,链表比较<strong>灵活,**</strong>插入和删除操作的效率较高,但链表的空间利用率较低,适合于实<br>现<strong>动态的线性表</strong>;顺序表实现比较简单,因为任何高级程序语言中都有数组类型,并且空间<br>利用率也较高,可高效地进行随机存取,但顺序表不易扩充,插入和删除操作的效率较低,适<br>合于实现相对“稳定”的静态线性表。两种存储结构各有所长,各种实现方法也不是一成不<br>变的。在实际应用时,必须以这些基本方法和思想为基础,抓住两者各自的特点并结合具体<br>情况,加以创造性地灵活应用和改造,用最合适的方法来解决问题。</li></ul><h1 id="3-栈与队列"><a href="#3-栈与队列" class="headerlink" title="3.栈与队列"></a>3.栈与队列</h1><p>定义：</p><p>栈和队列可被看成是<strong>两种操作受限</strong>的特殊线性表，其特殊性体现在它们的插入和删除操作都是控制在线性表的一端或两端进行。</p><h2 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h2><img src="https://img-blog.csdnimg.cn/20200827222518643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x300"  style="zoom:50%;" /><p>栈是一种特殊的线性表，栈中的元素以及数据元素间的逻辑关系和线性表相同，区别在于：</p><ul><li>线性表的插入和删除操作可以在表的任意位置进行，而栈只允许在表的尾端进行</li></ul><p>特点：</p><ul><li><p>先进后出(First In Last Out)</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```：置空</span><br><span class="line"></span><br><span class="line">```isEmpty()```：判空</span><br><span class="line"></span><br><span class="line">```length()```：返回栈中元素个数</span><br><span class="line"></span><br><span class="line">```peek()```：读取栈项元素并返回其值，若栈为空，则返回<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">```push()```：入栈——将数据元素x压入栈顶</span><br><span class="line"></span><br><span class="line">```pop()```：出栈——删除并返回栈顶元素</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-1-1-顺序栈"><a href="#3-1-1-顺序栈" class="headerlink" title="3.1.1 顺序栈"></a>3.1.1 顺序栈</h3><p>类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] stackElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;<span class="comment">//在非空栈中，top始终指向栈顶元素的下一个存储位置，栈为空时，top=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的空站</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        stackElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为栈分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求栈中数据元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> stackElem[top-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == stackElem.length)<span class="comment">//这里判断一下Object数组的长度和top是否相等，与sqStack的length()区别开</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈已满"</span>);<span class="comment">//跑出异常</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stackElem[top++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> stackElem[--top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出栈中所有数据元素，从栈顶元素到栈底</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.print(stackElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqStack sqStack = <span class="keyword">new</span> SqStack(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//循环压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sqStack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        sqStack.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222612835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><h3 id="3-1-2-链栈"><a href="#3-1-2-链栈" class="headerlink" title="3.1.2 链栈"></a>3.1.2 链栈</h3><p>定义结点类，与之前一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义链栈类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node top; <span class="comment">//栈顶元素的引用</span></span><br><span class="line">    <span class="comment">//置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素并返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> top.data;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Node p = <span class="keyword">new</span> Node(x);</span><br><span class="line">        p.next = top;</span><br><span class="line">        top = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node p = top; <span class="comment">//p指向被删结点，引用p是因为要返回被删结点值</span></span><br><span class="line">            top = top.next;</span><br><span class="line">            <span class="keyword">return</span> p.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.data.toString() + <span class="string">" "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkStack LS = <span class="keyword">new</span> LinkStack();</span><br><span class="line">        <span class="comment">//批量压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            LS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        LS.display();</span><br><span class="line">        System.out.println(<span class="string">"\n"</span> + <span class="string">"被删除元素为："</span> + LS.pop());</span><br><span class="line">        LS.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222655641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x150"  style="zoom:50%;" /><h2 id="3-2-队列"><a href="#3-2-队列" class="headerlink" title="3.2 队列"></a>3.2 队列</h2><img src="https://img-blog.csdnimg.cn/20200827222740697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x150"  style="zoom:50%;" /><p><strong>定义：</strong></p><p>队列是另一种特殊的线性表，它的特殊性体现在队列只允许在表尾插入数据元素，在表头删除数据元素，所以队列也是一种操作受限的特殊线性表</p><p><strong>特点：</strong></p><ul><li><p>先进先出</p></li><li><p>几个基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;isEmpty()&#96;&#96;&#96;：置空</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;length()&#96;&#96;&#96;：求取队列数据元素个数</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;peek()&#96;&#96;&#96;：读取队首元素并返回其值。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;offer()&#96;&#96;&#96;：入队操作，将数据元素x插入到队列中使其成为新的队尾元素。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;poll()&#96;&#96;&#96;：出队操作，删除队首元素并返回其值，若队列为空，则返回null。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public interface IQueue &#123;</span><br><span class="line">  public void clear();</span><br><span class="line">  public boolean isEmpty();</span><br><span class="line">  public int length();</span><br><span class="line">  public Object peek();</span><br><span class="line">  public void offer(Object x) throws Exception;</span><br><span class="line">  public Object poll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-1-顺序队列"><a href="#3-2-1-顺序队列" class="headerlink" title="3.2.1 顺序队列"></a>3.2.1 顺序队列</h3><p>​    与顺序栈类似，在顺序队列的存储结构中，需要分配一块地址连续的存储区域来一次存放队列中从队首到队尾的所有元素。这样也可以用一维数组来表示，假设数组名为queueElem，数组最大容量为maxSize，由于队列的入队操作只能在当前队列的队尾进行，而出队操作只能在当前队列的队首进行，所以需加上变量front和rear来分别指示队首队尾元素在数组中的位置，其初始值都为0，在非空队列中，front指向队首元素，rear指向队尾元素的下一个存储位置 </p><img src="https://img-blog.csdnimg.cn/20200827222820890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x300"  style="zoom:50%;" /><p><strong>假溢出：</strong> </p><p>​    从图3.16(d)可以看出,若此时还需要将数据元素H入队,H应该存放于rear=6的位<br>置处,顺序队列则会因数组下标越界而引起“溢出”,但此时顺序队列的首部还空出了两个数<br>据元素的存储空间。因此,这时的“溢出”并不是由于数组空间不够而产生的溢出。这种因<br>顺序队列的多次人队和出队操作后出现有存储空间,但不能进行人队操作的溢出现象称为<br><strong>”假溢出”</strong>。<br>​    要解决“假溢出”问题,最好的办法就是把顺序队列所使用的存储空间看成是一个逻辑<br>上首尾相连的循环队列。当rear或 front到达 maxSize-1后,再加1就自动到0。这种转<br>换可利用Java语言中对整型数据求模(或取余)运算来实现,即令<strong>rear=(rear+1)%</strong><br><strong>maxSize</strong>。显然,当rear= maxSize-1时,rear加1后,rear的值就为0。这样,就不会出现<br>顺序队列数组的头部有空的存储空间,而队尾却因数组下标越界而引起的假溢出现象。</p><p><strong>循环顺序队列类：</strong></p><img src="https://img-blog.csdnimg.cn/20200827222849424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x200"  style="zoom:50%;" /><p>图中会发现一个问题：即循环顺序队列的判空和判满条件都是front==rear</p><p>解决循环顺序队列的队空和队满的判断问题常采用以下3种方法：</p><ol><li>少用一个存储单元</li></ol><img src="https://img-blog.csdnimg.cn/20200827222924816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><ol start="2"><li><p>设置一个标志变量</p><p>​    在程序设计过程中引进一个标志变量fag,其初始值置为0,每当入队操作成功后就置<br>flag=1;每当出队操作成功后就置fag=0,则此时队空的判断条件为: <code>front==rear&amp;&amp;flag==0</code>,而队满的判断条件为:<code>front==rear&amp;&amp;flag==1</code>。</p></li><li><p>设置一个计数器</p><p>​    在程序设计过程中引进一个计数变量num,其初始值置为0,每当入队操作成功后就将<br>计数变量num的值加1;每当出队操作成功后就将计数变量num的值减1,则此时队空的<br>判断条件为:<code>num==0</code>,而队满的判断条件为:<code>num&gt;0&amp;&amp;front==rear</code></p></li></ol><p><strong>循环队列实现：</strong></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueimpl</span> <span class="keyword">implements</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front,rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSqQueueimpl</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>; <span class="comment">//队首、队尾初始化为0</span></span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为队列分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear; <span class="comment">//判空采用第一种方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + queueElem.length) % queueElem.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front ==rear)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear+<span class="number">1</span>) % queueElem.length == front) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"队列已满"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            queueElem[rear] = x;</span><br><span class="line">            rear = (rear+<span class="number">1</span>) % queueElem.length;<span class="comment">//以免假溢出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == rear) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object t = queueElem[front];</span><br><span class="line">            front = (front + <span class="number">1</span>) % queueElem.length;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i != rear; i= (i+<span class="number">1</span>)%queueElem.length) &#123;</span><br><span class="line">                System.out.print(queueElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"此队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        CircleSqQueueimpl circleSQ= <span class="keyword">new</span> CircleSqQueueimpl(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"长度为："</span> + circleSQ.length() + <span class="string">"判空"</span> + circleSQ.isEmpty());</span><br><span class="line">        circleSQ.display();</span><br><span class="line">        <span class="comment">//批量导入数据元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            circleSQ.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        circleSQ.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827223222394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-绪论&quot;&gt;&lt;a href=&quot;#1-绪论&quot; class=&quot;headerlink&quot; title=&quot;1. 绪论&quot;&gt;&lt;/a&gt;1. 绪论&lt;/h1&gt;&lt;h1 id=&quot;2-线性表&quot;&gt;&lt;a href=&quot;#2-线性表&quot; class=&quot;headerlink&quot; title=&quot;2. 线性</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="数据结构" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="专业课" scheme="https://ericzikun.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    <category term="数据结构" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="https://ericzikun.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="栈" scheme="https://ericzikun.github.io/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="https://ericzikun.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>css+div布局总结</title>
    <link href="https://ericzikun.github.io/2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-09T11:28:32.000Z</published>
    <updated>2020-10-01T11:52:11.287Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 几个月前花了一周多学了点前端，但也只是浅尝辄止，实战中还是由于css底子不好导致了很多布局的问题，故沉下心来再次把css复习了一遍，理顺了实战中遇到的一些布局问题，包括多浏览器、不同尺寸屏幕的适配问题也更加清晰了许多，有关适配性的经验将会在另一博客中着重总结，此博客主要针对css的基础布局进行梳理，方便复查！期间，也发现了一个查前端文档的网站：MDN</p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><img src="https://img-blog.csdnimg.cn/20200709190629883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x300"  style="zoom:50%;" /><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>以当前为参照物移动指定的距离<br>注意：相对定位，被定位的元素会占据原有的物理位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            /*相对定位</span><br><span class="line">                以当前为参照物移动指定的距离</span><br><span class="line">                注意：相对定位，被定位的元素会占据原有的物理位置</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*移动定位元素*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*bottom*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*right*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190735302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li><p>绝对定位的元素不会占据原有的物理位置</p></li><li><p>以其他元素作为参考物移动指定距离的定位方式</p></li></ul><p>  关于绝对定位的参考点：</p><ul><li><ol><li>如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</li></ol></li><li><ol start="2"><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ol></li><li><ol start="3"><li>如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            position: absolute; </span><br><span class="line">            /*top:200px;</span><br><span class="line">            left:200px;*/</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190817438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>加上</p><p>top:200px;</p><p>left:200px;</p><p>参考点为(0,0)绝对左上角，而不是红色框左上角<br><img src="https://img-blog.csdnimg.cn/20200709190850638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>如果外层元素没有定位，但是外外层（爷爷类）有定位，则有：</p><ul><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ul><p>子类参考点为外外层（爷爷类）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">green</span>;</span></span><br><span class="line">            /*绝对定位：</span><br><span class="line">                绝对定位的元素不会占据原有的物理位置</span><br><span class="line">                以其他元素作为参考物移动指定距离的定位方式</span><br><span class="line">                关于绝对定位的参考点：</span><br><span class="line">                1.如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</span><br><span class="line">                2.如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</span><br><span class="line">                3.如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*top:200px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*left:200px;*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aquamarine;</span><br><span class="line"><span class="css">            <span class="comment">/*父类做一个定位*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position:relative;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:fuchsia</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;   <span class="comment">/*son的参考点是father，但前提是father这一层（外层）必须有定位*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190932333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />如果son的father没有定位，box2也没定位，则其absolute参考点为body：<img src="https://img-blog.csdnimg.cn/20200709191013975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>垂直滚动条：</p><p>background:palevioletred;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:palevioletred</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0px</span>;  <span class="comment">/*距离右边为0*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:300px</span>;  <span class="comment">/*距离顶部为0*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191035959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h2><img src="https://img-blog.csdnimg.cn/20200709191051684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>注意：只能支持<strong>定位元素</strong>！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>z-index设置定位元素z轴的距离(定位元素的显示顺序)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#two</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:999</span>; <span class="comment">/*这里设置1仍然是黄色盖住红色*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：z-index属性只支持定位元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191119163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>首先看代码先后顺序，渲染的是one在前，two在后，所以黄色会盖住红色，z-index可以提高层级别</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>回顾浮动：任意元素一旦浮动，display都会失效<br><img src="https://img-blog.csdnimg.cn/20200709191135936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><ul><li>div:默认为块状元素：具有宽高属性，并且独占一行</li><li>Span:默认为行内元素：没有宽高属性，不会独占一行</li></ul><h2 id="块状-amp-行内元素的互换："><a href="#块状-amp-行内元素的互换：" class="headerlink" title="块状&amp;行内元素的互换："></a>块状&amp;行内元素的互换：</h2><ul><li><ol><li>如果将div设置为行内元素<code>display: inline</code>，则会使得div无宽高属性，且不会独占一行！</li></ol></li><li><ol start="2"><li>也可以将span设置为块状元素:<code>display:block</code>，则可以有宽高属性，独占一行！</li></ol></li><li><ol start="3"><li>如果用了很多块状元素div，但是会独占一行，如果不想独占一行（想并列显示），则要将其改为 行内块元素：<code>display:inline-block</code>——既有宽高属性 且不会独占一行，但涉及图文混排，故此方式用的较少，浮动使用较多<img src="https://img-blog.csdnimg.cn/20200709191202408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ol></li></ul><ul><li>接着将div的display改为表格属性<code>display:table-cell</code>,变为单元格形式，<img src="https://img-blog.csdnimg.cn/20200709191220222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ul><h2 id="隐藏元素："><a href="#隐藏元素：" class="headerlink" title="隐藏元素："></a>隐藏元素：</h2><ul><li><code>display:none</code>可以将div块进行隐藏，并且不会占用原物理空间（类似：<code>visibility:hidden</code>隐藏效果，但仍占用物理空间）</li><li>如果元素是使用visibility设置的隐藏方式，那么只能用<code>visibility：visible</code>的方式来让元素显示;对应的，<code>display:none</code>要用<code>display:block</code>来显示！</li><li>总结：visibility:设置元素是否显示<pre><code>visible 显示hidden隐藏</code></pre> 注意：<code>visibility</code>和<code>display:none</code>的区别：<code>visibility</code>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<code>display:none</code>的隐藏方式是彻底隐藏该元素的内容和位置。</li><li>应用：网页中鼠标未选中时隐藏，选中时显示 展开<img src="https://img-blog.csdnimg.cn/202007091913048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x500"  style="zoom:50%;" /></li></ul><img src="https://img-blog.csdnimg.cn/20200709191407349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /><h2 id="设置透明度：opacity-0"><a href="#设置透明度：opacity-0" class="headerlink" title="设置透明度：opacity: 0;"></a>设置透明度：<code>opacity: 0;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div,span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为行内元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*设置元素为行内块元素，具有宽高属性，并且不会独占一行*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline-block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: table-cell;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: none;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素，占据原有物理位置*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility: hidden;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*如果元素是使用visibility设置的隐藏方式，那么只能用visibility：visible的方式来让元素显示*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility:visible;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                visibility:设置元素是否显示</span><br><span class="line">                    visible 显示</span><br><span class="line">                    hidden隐藏</span><br><span class="line"><span class="css">                   注意：<span class="selector-tag">visibility</span>和<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的区别：<span class="selector-tag">visibility</span>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的隐藏方式是</span></span><br><span class="line">                   测地隐藏该元素的内容和位置。</span><br><span class="line"></span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*设置元素透明度*/</span></span></span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为块状元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line">            background: fuchsia;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--div:块状元素：具有宽高属性，并且独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内元素：没有宽高属性，不会独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><img src="https://img-blog.csdnimg.cn/2020070919145770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="预备知识：-1"><a href="#预备知识：-1" class="headerlink" title="预备知识："></a>预备知识：</h2><p>盒子与盒子之间的距离——margin：外间距</p><p>盒子内部的content与边框的间距——padding：内边距</p><p>边框也有一个厚度：border：边框</p><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p><img src="https://img-blog.csdnimg.cn/20200709191516417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="快速设置："><a href="#快速设置：" class="headerlink" title="快速设置："></a>快速设置：</h3><img src="https://img-blog.csdnimg.cn/20200709191540300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>顺序：上右下左<code>margin:10px 10px 10px 10px</code><br>上下20px，左右都为10px<code>margin:20px 10px 20px</code><br>上下20px，左右为10px<code>margin:20px  10px</code></p><h3 id="居中显示："><a href="#居中显示：" class="headerlink" title="居中显示："></a>居中显示：</h3><p>如果想要div居中，可以<code>margin:10px auto;</code>实现<strong>块状元素</strong>居中显示，如果改为浮动，则<code>display</code>失效,无法居中<br><img src="https://img-blog.csdnimg.cn/20200709191629876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h3 id="外边距合并："><a href="#外边距合并：" class="headerlink" title="外边距合并："></a>外边距合并：</h3><img src="https://img-blog.csdnimg.cn/20200709191648472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />几个特点：<ul><li><ol><li>块级元素的垂直相邻外边距会合并</li></ol></li><li><ol start="2"><li>行内元素实际上不占上下外边距，行内元素的的左右外边距不合并</li></ol></li><li><ol start="3"><li>浮动元素的外边距也不会合并</li></ol></li><li><ol start="4"><li>允许指定负的外边距值，不过使用时要小心</li></ol></li></ul><p>取两者最大值，而非之和！</p><p>合并只有上下</p><img src="https://img-blog.csdnimg.cn/20200709191716350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h3 id="子父类div："><a href="#子父类div：" class="headerlink" title="子父类div："></a>子父类div：</h3><p><img src="https://img-blog.csdnimg.cn/20200709191746352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="margin负值："><a href="#margin负值：" class="headerlink" title="margin负值："></a>margin负值：</h3><img src="https://img-blog.csdnimg.cn/20200709191806242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*当前元素与其他元素之间的距离 外间距*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-bottom:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:10px 10px 10px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aqua;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blueviolet;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#block</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="comment">/*实现让块状元素居中显示*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            margin-top: -100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            margin-bottom: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*加一像素红色 实线边框*/</span></span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>顶部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>左侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"self"</span>&gt;</span>当前元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>右侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以设置块状元素居中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含式外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h2><p>设置为<code>border: 5px solid red</code></p><img src="https://img-blog.csdnimg.cn/20200709191835407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>每条边分开设置：</p><p><img src="https://img-blog.csdnimg.cn/20200709191900114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>统一设置（大多数情况下）：</p><p><img src="https://img-blog.csdnimg.cn/20200709191920183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>双线注意：</p><p><img src="https://img-blog.csdnimg.cn/20200709191940246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p><img src="https://img-blog.csdnimg.cn/20200709191955894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>总结：</p><p>padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以在书写宽高时注意减掉内边距和边框(标准盒模型)</p><p>宽高指的是content的！回顾如图：<br><img src="https://img-blog.csdnimg.cn/20200709192010685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-bottom: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px 15px;*/</span></span></span><br><span class="line">            padding: 10px 20px 30px 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            clear: both;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以各位在书写宽高时注意减掉内边距和边框(标准盒模型)</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="怪异盒模型："><a href="#怪异盒模型：" class="headerlink" title="怪异盒模型："></a>怪异盒模型：</h2><p><img src="https://img-blog.csdnimg.cn/20200709192048711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200709192108725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>怪异盒<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置怪异盒*/</span></span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="div-css布局注意事项"><a href="#div-css布局注意事项" class="headerlink" title="div+css布局注意事项"></a>div+css布局注意事项</h2><p><img src="https://img-blog.csdnimg.cn/20200709192124195.png" alt=" "></p><p>参考视频：<br>b站：<a href="https://www.bilibili.com/video/BV18J411S7tZ?p=1" target="_blank" rel="noopener">一天学会DIV+CSS布局</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 几个月前花了一周多学了点前端，但也只是浅尝辄止，实战中还是由于css底子不好导致了很多布局的问题，故沉下心来再次把css复习了一遍，理顺了实战中遇到的一些布局问题，包括多浏览器、不同尺寸屏</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="React" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/React/"/>
    
    
    <category term="css" scheme="https://ericzikun.github.io/tags/css/"/>
    
    <category term="布局" scheme="https://ericzikun.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="盒子模型" scheme="https://ericzikun.github.io/tags/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EricKun</title>
  
  
  <link href="https://ericzikun.github.io/atom.xml" rel="self"/>
  
  <link href="https://ericzikun.github.io/"/>
  <updated>2020-12-09T14:11:40.229Z</updated>
  <id>https://ericzikun.github.io/</id>
  
  <author>
    <name>Eric kun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker入门+进阶总结</title>
    <link href="https://ericzikun.github.io/2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-09T14:09:48.000Z</published>
    <updated>2020-12-09T14:11:40.229Z</updated>
    
    <content type="html"><![CDATA[<p>本文大量参考b站kuangshen的Docker视频</p><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     # 显示docker的版本信息</span><br><span class="line">docker info        # 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help  # 帮助命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/build/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像标签</span><br><span class="line">IMAGE ID    镜像id</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像id</span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3490                [OK]                </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项，通过收藏来过滤</span></span><br><span class="line">--filter=STARS=3000  #搜索出来的镜像就是STARS大于3000的</span><br><span class="line">[root@localhost /]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3490                [OK]</span><br></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@localhost /]# docker pull mysql</span><br><span class="line">Using default tag: latest    # 如果不写 tag,默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Pull complete  # 分层下载，docker image的核心 联合文件系统</span><br><span class="line">d51ce1c2e575: Pull complete </span><br><span class="line">c2344adc4858: Pull complete </span><br><span class="line">fcf3ceff18fc: Pull complete </span><br><span class="line">16da0c38dc5b: Pull complete </span><br><span class="line">b905d1797e97: Pull complete </span><br><span class="line">4b50d1c6b05c: Pull complete </span><br><span class="line">c75914a65ca2: Pull complete </span><br><span class="line">1ae8042bdd09: Pull complete </span><br><span class="line">453ac13c00a3: Pull complete </span><br><span class="line">9e680cd72f08: Pull complete </span><br><span class="line">a6b5dc864b6c: Pull complete </span><br><span class="line">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  # 真实地址</span><br><span class="line"></span><br><span class="line">docker pull mysql 等价于: docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@localhost /]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Already exists   # 联合文件系统的好处：上面下载过的MySQL与5.7版本的MySQL有相同的文件时不需要重复下载</span><br><span class="line">d51ce1c2e575: Already exists </span><br><span class="line">c2344adc4858: Already exists </span><br><span class="line">fcf3ceff18fc: Already exists </span><br><span class="line">16da0c38dc5b: Already exists </span><br><span class="line">b905d1797e97: Already exists </span><br><span class="line">4b50d1c6b05c: Already exists </span><br><span class="line">d85174a87144: Pull complete </span><br><span class="line">a4ad33703fa8: Pull complete </span><br><span class="line">f7a5433ce20d: Pull complete </span><br><span class="line">3dcd2a278b4a: Pull complete </span><br><span class="line">Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-O5oXLHZ6-1607516885224)(Docker%E6%A6%82%E8%BF%B0(1)].assets%5Cimage-20200610165130055.png)</p><p><strong>docker rmi 删除镜像</strong></p><p>rm——remove i——images</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker rmi -f 镜像id   #删除指定镜像</span><br><span class="line">[root@localhost /]# docker rmi -f 镜像id 镜像id 镜像id     #删除多个镜像</span><br><span class="line">[root@localhost /]# docker rmi -f $(docker images -aq)     #删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux,下载一个centos镜像来学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name"容器名字 tomcat01 tomcat02 ，用来区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             使用交互方式运行，进入容器查看内容</span><br><span class="line">-p              指定容器的端口 -p 8080:80</span><br><span class="line">-p  ip:主机(即宿主机)端口：容器端口</span><br><span class="line">-p  主机端口：容器端口  #这种方式常用</span><br><span class="line">-p  容器端口</span><br><span class="line">容器端口P</span><br><span class="line">-P              随机指定端口(大写P)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@localhost /]# docker run -it centos /bin/bash </span><br><span class="line">[root@8b4c74381205 /]# ls     #查看容器内的centos,基础版本，很多命令都是不完善的！</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@8b4c74381205 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">123  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">222  boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">(不加） # 列出当前正在运行的容器</span><br><span class="line">-a     # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?   # 显示最近创建的容器</span><br><span class="line">-q    # 只显示当前容器的编号</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         4 minutes ago       Exited (0) About a minute ago                       epic_wilson</span><br><span class="line">fb87667bbc19        bf756fb1ae65        "/hello"            2 hours ago         Exited (0) 2 hours ago                              awesome_banach</span><br><span class="line">[root@localhost /]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         9 minutes ago       Exited (0) 6 minutes ago                       epic_wilson</span><br><span class="line">[root@localhost /]# docker ps -aq</span><br><span class="line">8b4c74381205</span><br><span class="line">fb87667bbc19</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit   # 直接退出容器</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id   # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)    # 删除所有容器 </span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id     # 启动容器</span><br><span class="line">docker restart 容器id   # 重启容器</span><br><span class="line">docker stop 容器id      # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id      # 强制停止当前正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker run -d centos</span><br><span class="line">e9d60f206fa19963203db6c42c2f83c5120eb90eeee2b7ba9fdc4589370fd6b6</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps,发现 centos 停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 数字 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail  # 要显示的日志条数</span><br><span class="line">[root@localhost /]# docker logs -tf --tail 10 ce989f90023d</span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker top 容器id</span></span><br><span class="line">[root@localhost /]# docker top ce989f90023d</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME     </span><br><span class="line">root                12249               12232               0                   22:44               pts/0               00:00:00</span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker inspect ce989f90023d</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244",</span><br><span class="line">        "Created": "2020-06-10T14:44:45.025360147Z",</span><br><span class="line">        "Path": "/bin/bash",</span><br><span class="line">        "Args": [],</span><br><span class="line">        "State": &#123;</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 12249,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2020-06-10T14:44:45.770227584Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244-json.log",</span><br><span class="line">        "Name": "/nifty_johnson",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;&#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Capabilities": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641-init/diff:/var/lib/docker/overlay2/d4cd3bedb1e7340e62bb292c1e0d5ae37b1d1689ffc1640da67b2a8325facc21/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "ce989f90023d",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": true,</span><br><span class="line">            "AttachStdout": true,</span><br><span class="line">            "AttachStderr": true,</span><br><span class="line">            "Tty": true,</span><br><span class="line">            "OpenStdin": true,</span><br><span class="line">            "StdinOnce": true,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/bash"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "org.label-schema.build-date": "20200114",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS",</span><br><span class="line">                "org.opencontainers.image.created": "2020-01-14 00:00:00-08:00",</span><br><span class="line">                "org.opencontainers.image.licenses": "GPL-2.0-only",</span><br><span class="line">                "org.opencontainers.image.title": "CentOS Base Image",</span><br><span class="line">                "org.opencontainers.image.vendor": "CentOS"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "74d140bbc60432c5fdce865fa48f78c1138923dd292e708a25c4de17de812d56",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/74d140bbc604",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.3",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "58fd9703e96d12128c30f244be3205e3fe31fc7d1fb7fffdddba72d981e782f4",</span><br><span class="line">                    "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.3",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker exec -it ce989f90023d /bin/bash</span><br><span class="line">[root@ce989f90023d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@ce989f90023d /]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 14:44 pts/0    00:00:00 /bin/bash</span><br><span class="line">root         15      0  0 15:19 pts/1    00:00:00 /bin/bash</span><br><span class="line">root         29     15  0 15:20 pts/1    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker attach ce989f90023d</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span><span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程（进入的是正在运行的命令行，而不是新的窗口）</span></span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内目标文件路径  目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录</span></span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">ztx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器内部</span></span><br><span class="line">[root@localhost home]# docker attach ce989f90023d</span><br><span class="line">[root@ce989f90023d /]# cd /home/</span><br><span class="line">[root@ce989f90023d home]# ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内新建一个文件</span></span><br><span class="line">[root@ce989f90023d home]# touch test.java</span><br><span class="line">[root@ce989f90023d home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost home]# docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE      COMMAND       CREATED           STATUS                PORTS           NAMES</span><br><span class="line">ce989f90023d     centos  "/bin/bash"  44 minutes ago  Exited (0) 46 seconds ago               nifty_johnson</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker内文件拷贝到主机上</span></span><br><span class="line">[root@localhost home]# docker cp ce989f90023d:/home/test.java /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">test.java  ztx</span><br><span class="line">[root@localhost home]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209202906322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach to a running container       # 当前shell下attach连接指定运行的镜像</span><br><span class="line"> build       Build an image from a Dockerfile        # 通过Dockerfile定制镜像</span><br><span class="line"> commit      Create a new image from a container changes  #提交当前容器为新的镜像</span><br><span class="line"> cp          Copy files&#x2F;folders between a container and the local filesystem #从容器中拷贝指定文件或目录到宿主机中</span><br><span class="line"> create      Create a new container   # 创建一个新的容器，同run,但不启动容器</span><br><span class="line"> diff        Inspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化</span><br><span class="line"> events      Get real time events from the server   # 从docker服务获取容器实时事件</span><br><span class="line"> exec        Run a command in a running container    # 在已存在的容器上运行命令</span><br><span class="line"> export      Export a container filesystem as a tar archive # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line"> history     Show the history of an image            # 展示一个镜像形成历史</span><br><span class="line"> images      List images                             # 列出系统当前的镜像</span><br><span class="line"> import      Import the contents from a tarball to create a filesystem image # 从tar包中的内容创建一个新的文件系统镜像[对应export]</span><br><span class="line"> info        Display system-wide information         # 显示系统相关信息</span><br><span class="line"> inspect     Return low-level information on Docker objects # 查看容器详细信息</span><br><span class="line"> kill        Kill one or more running containers     # 杀死指定的docker容器</span><br><span class="line"> load        Load an image from a tar archive or STDIN # 从一个tar包加载一个镜像[对应save]</span><br><span class="line"> login       Log in to a Docker registry  # 注册或者登录一个docker源服务器</span><br><span class="line"> logout      Log out from a Docker registry  # 从当前Docker registry退出</span><br><span class="line"> logs        Fetch the logs of a container  # 输出当前容器日志信息</span><br><span class="line"> pause       Pause all processes within one or more containers      # 暂停容器</span><br><span class="line"> port        List port mappings or a specific mapping for the container # 查看映射端口对应容器内部源端口</span><br><span class="line"> ps          List containers  # 列出容器列表</span><br><span class="line"> pull        Pull an image or a repository from a registry # 从docker镜像源服务器拉取指定镜像或库镜像</span><br><span class="line"> push        Push an image or a repository to a registry   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"> rename      Rename a container  # 给docker容器重新命名</span><br><span class="line"> restart     Restart one or more containers  # 重启运行的容器</span><br><span class="line"> rm          Remove one or more containers  # 移除一个或者多个容器</span><br><span class="line"> rmi         Remove one or more images  # 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"> run         Run a command in a new container  # 创建一个新的容器并运行一个命令</span><br><span class="line"> save        Save one or more images to a tar archive (streamed to STDOUT by default) # 保存一个镜像为一个tar包[对应load]</span><br><span class="line"> search      Search the Docker Hub for images  # 在docker hub中搜索镜像</span><br><span class="line"> start       Start one or more stopped containers  # 启动容器</span><br><span class="line"> stats       Display a live stream of container(s) resource usage statistics # 实时显示容器资源使用统计</span><br><span class="line"> stop        Stop one or more running containers  # 停止容器</span><br><span class="line"> tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源中镜像打标签</span><br><span class="line"> top         Display the running processes of a container     # 查看容器中运行的进程信息</span><br><span class="line"> unpause     Unpause all processes within one or more containers # 取消暂停容器</span><br><span class="line"> update      Update configuration of one or more containers  # 更新一个或多个容器配置</span><br><span class="line"> version     Show the Docker version information  # 查看docker版本号 </span><br><span class="line"> wait        Block until one or more containers stop, then print their exit codes # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有应用，直接打包docker镜像，就可以直接跑起来！</p><p><strong>如何得到镜像</strong></p><ul><li>从远程仓库下载</li><li>别人拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFs （联合文件系统）</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加载 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux/Unix系统是一样的，包括bootloader和 Kernel。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img src="https://img-blog.csdnimg.cn/20201209203030450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？<br><img src="https://img-blog.csdnimg.cn/20201209203049210.png" alt="在这里插入图片描述"><br>对于个精简的OS, rootfs可以很小，只需要包合最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载！<br><img src="https://img-blog.csdnimg.cn/20201209203126879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">➜  / docker image inspect redis          </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "sha256:f9b9909726890b00d2098081642edf32e5211b7ab53563929a47f250bcdc1d7c",</span><br><span class="line">        "RepoTags": [</span><br><span class="line">            "redis:latest"</span><br><span class="line">        ],</span><br><span class="line">        "RepoDigests": [</span><br><span class="line">            "redis@sha256:399a9b17b8522e24fbe2fd3b42474d4bb668d3994153c4b5d38c3dafd5903e32"</span><br><span class="line">        ],</span><br><span class="line">        "Parent": "",</span><br><span class="line">        "Comment": "",</span><br><span class="line">        "Created": "2020-05-02T01:40:19.112130797Z",</span><br><span class="line">        "Container": "d30c0bcea88561bc5139821227d2199bb027eeba9083f90c701891b4affce3bc",</span><br><span class="line">        "ContainerConfig": &#123;</span><br><span class="line">            "Hostname": "d30c0bcea885",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"redis-server\"]"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "DockerVersion": "18.09.7",</span><br><span class="line">        "Author": "",</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "redis-server"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": null</span><br><span class="line">        &#125;,</span><br><span class="line">        "Architecture": "amd64",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">        "Size": 104101893,</span><br><span class="line">        "VirtualSize": 104101893,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/adea96bbe6518657dc2d4c6331a807eea70567144abda686588ef6c3bb0d778a/diff:/var/lib/docker/overlay2/66abd822d34dc6446e6bebe73721dfd1dc497c2c8063c43ffb8cf8140e2caeb6/diff:/var/lib/docker/overlay2/d19d24fb6a24801c5fa639c1d979d19f3f17196b3c6dde96d3b69cd2ad07ba8a/diff:/var/lib/docker/overlay2/a1e95aae5e09ca6df4f71b542c86c677b884f5280c1d3e3a1111b13644b221f9/diff:/var/lib/docker/overlay2/cd90f7a9cd0227c1db29ea992e889e4e6af057d9ab2835dd18a67a019c18bab4/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "RootFS": &#123;</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:c2adabaecedbda0af72b153c6499a0555f3a769d52370469d8f6bd6328af9b13",</span><br><span class="line">                "sha256:744315296a49be711c312dfa1b3a80516116f78c437367ff0bc678da1123e990",</span><br><span class="line">                "sha256:379ef5d5cb402a5538413d7285b21aa58a560882d15f1f553f7868dc4b66afa8",</span><br><span class="line">                "sha256:d00fd460effb7b066760f97447c071492d471c5176d05b8af1751806a1f905f8",</span><br><span class="line">                "sha256:4d0c196331523cfed7bf5bafd616ecb3855256838d850b6f3d5fba911f6c4123",</span><br><span class="line">                "sha256:98b4a6242af2536383425ba2d6de033a510e049d9ca07ff501b95052da76e894"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Metadata": &#123;</span><br><span class="line">            "LastTagTime": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。<br><img src="https://img-blog.csdnimg.cn/2020120920315698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而整体的大镜像包含了来自两个镜像层的6个文件。<br><img src="https://img-blog.csdnimg.cn/20201209203215883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。<br><img src="https://img-blog.csdnimg.cn/20201209203355485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！<br><img src="https://img-blog.csdnimg.cn/20201209203422845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如何提交一个自己的镜像？</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理类似</span></span><br><span class="line">docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[版本TAG]</span><br></pre></td></tr></table></figure><p>实战测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、启动一个默认的tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2、发现这个默认的tomcat是没有webapps应用的，镜像的原因。官方的镜像默认webapps下面是没有文件的！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3、我自己将webapp.dist下文件拷贝至webapps下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4、将我们操作过的容器通过commit提交为一个镜像！我们以后就可以使用我们修改过的镜像了，这就是我们自己的一个修改的镜像</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203500527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。<br>到了这里就算是入门Docker了！</p><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！==需求：数据可以持久化==</p><p>MySQL，容器删除了，删库跑路！==需求：MySQL数据可以存储在本地！==</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！<br><img src="https://img-blog.csdnimg.cn/20201209203542399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost home]# docker run -it -v /home/ceshi:/home  centos  /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动起来的时候，我们可以通过docker inspect 容器id 来查看挂载情况：（见下图）</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203640456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在容器内指定目录下添加或修改一个文件，会同步到主机指定目录下！反之，在主机目录下做相关操作，也会同步到容器对应的目录下！</p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的！</p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><p>两个路径保持完全的同步！！！双向绑定，<strong>一边发生变化，另一边也会随之变化！</strong></p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷的情况</span></span><br><span class="line">[root@localhost data]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               2dd0379216c9ee4441ed56f8ce53461c19abe78b8cfd024ac5fbe07c3b8f09ba</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里发现，这种就是匿名挂载，我们在 -v 后只写了容器内的路径，没有写容器外的路径！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@localhost home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">5ba5708389bf71b2156fdbcedc50a62b16ac27adb2a3dfac42c52e9da5ace79f</span><br><span class="line">[root@localhost home]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名：容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷  <span class="comment"># 先找到卷所在路径 docker volume inspect 卷名，如下图：</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203752895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所有的docker容器内的卷，没有指定目录的情况下都是在<strong>/var/lib/docker/volumes/xxxx/_data</strong>下！<br>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用 <strong>具名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span></span><br><span class="line">-v容器内路径       # 匿名挂载</span><br><span class="line">-v卷名:容器内路径  # 具名挂载</span><br><span class="line">-v/宿主机路径:容器内路径   # 指定路径挂载！</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径：ro 或 rw   改变读写权限</span></span><br><span class="line">ro #readonly 只读</span><br><span class="line">rw #readwrite 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！</span></span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认是 rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></span><br></pre></td></tr></table></figure><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建 docker镜像的构建文件！命令脚本！ 先体验一下！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是最终镜像的一层！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随机，建议 dockerfile</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker-test-volume]# vim dockerfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中的内容：指令(大写) 参数</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME ["volume01","volume02"]</span><br><span class="line"></span><br><span class="line">CMD echo"----end----"</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个命令，就是镜像的一层！</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203834981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：我们这里的 dockerfile  是我们编写的文件名哦！<br><img src="https://img-blog.csdnimg.cn/2020120920385769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这两个卷和外部一定有两个同步的目录！<br><img src="https://img-blog.csdnimg.cn/20201209203919566.png" alt="在这里插入图片描述"><br>查看一下卷挂载在主机上的路径</p><p><strong>docker inspect 容器id</strong><br><img src="https://img-blog.csdnimg.cn/20201209203943550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试一下刚才的文件是否同步出去了！</p><p>这种方式我们未来使用十分的多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像的时候没有挂在卷，要手动镜像挂载即可： (参考上文==<strong>具名和匿名挂载</strong>==)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v 卷名:容器内路径</span><br></pre></td></tr></table></figure><h2 id="数据卷容器（多个容器之间同步数据-）"><a href="#数据卷容器（多个容器之间同步数据-）" class="headerlink" title="数据卷容器（多个容器之间同步数据 ）"></a>数据卷容器（多个容器之间同步数据 ）</h2><p><strong>多个mysql同步数据！</strong><br><img src="https://img-blog.csdnimg.cn/20201209204110474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204121507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204138239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201209204053289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在docker03下创建docker03文件后，进入docker01发现也依旧会同步过来：<br><img src="https://img-blog.csdnimg.cn/20201209215656378.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试1：删除docker01后，docker02和docker03是否还可以访问原来docker01下创建的的文件？</span><br><span class="line"># 测试1的结果为：依旧可以访问！！！</span><br><span class="line"></span><br><span class="line"># 测试2：删除docker01后，docker02和docker03之间是否可以相互同步文件？</span><br><span class="line"># 测试2的结果为：docket02和docker03之间一九可以完成同步！！！ 见下图：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120921574695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209215802776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>多个mysql实现数据共享</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">➜  ~ docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步！</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看官方是怎么做的！</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像层，并提交！<br><img src="https://img-blog.csdnimg.cn/20201209215953139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM# 基础镜像，一切从这里开始构建   centos</span><br><span class="line">MAINTAINER# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 步骤：tomcat镜像，这个tomcat压缩包！ 添加内容，每添加会成一层</span><br><span class="line">WORKDIR# 镜像的工作目录  </span><br><span class="line">VOLUME# 挂载的目录</span><br><span class="line">EXPOSE          # 暴露端口配置，跟 -p 是一个道理</span><br><span class="line">CMD# 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要执行的命令，可以追加命令</span><br><span class="line">ONBUILD# 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令</span><br><span class="line">COPY# 类似ADD,将我们文件拷贝到镜像中</span><br><span class="line">ENV# 构建的时候设置环境变量，跟 -e 是一个意思</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220023958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的( <strong>FROM scratch</strong> )，然后配置需要的软件和配置来构建。</p><blockquote><p>创建一个自己的 centos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写DockerFile文件，内容如下：</span></span><br><span class="line">[root@localhost dockerfile]# cat mydockerfile-centos</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ztx&lt;123456@qq.com&gt; </span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local        #centos中的工作目录</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools   #ifconfig的相关命令</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "----end----"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">....</span><br><span class="line">Successfully built c987078b06cb</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行</span></span><br></pre></td></tr></table></figure><p>生成命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>==通过build命令，用写好的mydockerfile-centos文件来构建target（-t 目标）名为mycentos:0.1 .的镜像 [tag]为版本号==</p><p>其中from的centos是本地从hub上pull过的镜像（docker images），如果没有 则会自动去pull下载</p><p>测试运行：<br><img src="https://img-blog.csdnimg.cn/20201209220142434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行的时候带上版本号 否则获取最新版本</p><p><strong>对比：</strong></p><p><strong>之前的原生的centos</strong><br><img src="https://img-blog.csdnimg.cn/20201209220205867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们增加之后的镜像</strong><br> <img src="https://img-blog.csdnimg.cn/20201209220221830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：net-tools 包含一系列程序，构成了 Linux 网络的基础。</p><p>我们可以列出本地镜像的变更历史：<br><img src="https://img-blog.csdnimg.cn/20201209220241622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们平时拿到一个镜像，可以研究一下它是怎么做的！</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><p><strong>测试CMD</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-cmd</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls","-a"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令  -l 成为ls -al</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\":</span><br><span class="line"> executable file not found in $PATH": unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 -l 替换了CMD[<span class="string">"ls"</span>,<span class="string">"-l"</span>]。 而-l 不是命令,所以报错</span></span><br></pre></td></tr></table></figure><p><strong>测试ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-entrypoint</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls","-a"]</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们的命令，是直接拼接在我们的ENTRYPOINT命令后面的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1 -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 16 06:32 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64 ....</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包！<br>2、编写Dockerfile文件，官方命名: <strong>Dockerfile</strong> ，build会自动寻找这个文件，就不要 -f 指定了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER kuangshen&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz    /usr/local/</span><br><span class="line">ADD apache-tomcat-8.0.53.tar.gz   /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.0.53/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.0.53/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>ADD命令会自动解压压缩包</p><p>3、构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -t diytomcat .     diytomcat是定义的镜像名</span></span><br></pre></td></tr></table></figure><p>4、启动镜像，创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -p 9090:8080 --name kuangshentomcat02 -v /home/kuangshen/build/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/webapps/<span class="built_in">test</span> -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/logs diytomcat</span></span><br></pre></td></tr></table></figure><p>5、访问测试<br><img src="https://img-blog.csdnimg.cn/20201209220335132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6、发布项目（由于做了卷挂载，我们就可以直接在本地发布项目了）</p><p>在/home/kuangshen/build/tomcat/test目录下创建WEB-INF目录，在里面创建web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                               http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在回到test目录，添加一个index.jsp页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span>vim</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">System.out.println</span>("<span class="attr">---my</span> <span class="attr">test</span> <span class="attr">web</span> <span class="attr">logs---</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现：test项目部署成功，可以直接访问！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcatlogs]# cat catalina.out</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220425594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之前一直访问失败是web.xml配置有问题，最后也是查看该日志提示，才得以解决！！！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、在我们服务器上提交自己的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录dockerhub</span></span><br><span class="line">[root@localhost tomcat]# docker login -u ztx115</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>4、登录完毕后就可以提交镜像了，就是一步 docker push</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> push自己的镜像到服务器上！</span></span><br><span class="line">[root@localhost tomcat]# docker push diytomcat</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">c5593011cd68: Preparing </span><br><span class="line">d3ce40b8178e: Preparing </span><br><span class="line">02084c67dcc9: Preparing </span><br><span class="line">2b7c1c6c89c5: Preparing </span><br><span class="line">0683de282177: Preparing </span><br><span class="line">denied: requested access to the resource is denied  # 拒绝</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push镜像的问题？</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：增加一个tag         docker tag  指定镜像的id   dockerhub的用户名/镜像重命名:[tag]</span></span><br><span class="line">[root@localhost tomcat]# docker tag bb64ab96b432 ztx115/tomcat:1.0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120922045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意：镜像的重命名前一定要加当前的dockerhub的用户名，否则将会push失败！！！！</strong>（如：把ztx115改成ztx,  push一定失败！）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docekr push上去即可！  自己平时发布的镜像尽量带上版本号</span></span><br><span class="line">[root@localhost tomcat]# docker push ztx115/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/ztx115/tomcat]</span><br><span class="line">c5593011cd68: Pushed </span><br><span class="line">d3ce40b8178e: Pushed </span><br><span class="line">02084c67dcc9: Pushed </span><br><span class="line">2b7c1c6c89c5: Pushed </span><br><span class="line">0683de282177: Pushed </span><br><span class="line">1.0: digest: sha256:b6733deccf85ad66c6f4302215dd9ea63e1579817f15a099b5858785708ed408 size: 1372</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220546540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现，提交时也是按照镜像的层级来进行提交的！</p><blockquote><p>发布到阿里云镜像服务上（狂神视频截图）</p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间<br><img src="https://img-blog.csdnimg.cn/20201209220605544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、创建容器镜像仓库<br><img src="https://img-blog.csdnimg.cn/20201209220622908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209220634804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020120922064542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、浏览阿里云<br><img src="https://img-blog.csdnimg.cn/20201209220705783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用阿里云容器镜像的参考官方指南即可！！！（即上图）</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209220744812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文大量参考b站kuangshen的Docker视频&lt;/p&gt;
&lt;h1 id=&quot;Docker的常用命令&quot;&gt;&lt;a href=&quot;#Docker的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker的常用命令&quot;&gt;&lt;/a&gt;Docker的常用命令&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Docker/"/>
    
    
    <category term="Docker" scheme="https://ericzikun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Java项目打包实战——以hugegraph知识图谱为例</title>
    <link href="https://ericzikun.github.io/2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/"/>
    <id>https://ericzikun.github.io/2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/</id>
    <published>2020-12-09T12:19:36.000Z</published>
    <updated>2020-12-09T12:21:36.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    本文主要针对开源图谱hugegraph做了docker打包处理，hugegraph在windows上往往不是特别方便，也很容易崩，故写此文。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>本地能跑通的hugegraph三件套：<ul><li>hugegraph-0.10.4</li><li>hugegraph-loader-0.10.0（数据导入配件 不建议在docker内部使用，很容易内存不够，可以将本地导通的g/m/s文件夹放进hugegraph-0.10.4下即可(RockDb)）</li><li>hugegraph-studio-0.10.0</li></ul></li><li>依赖的编译环境只有jdk8，下载好x86 linux版即可</li></ul><h1 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h1><p>​    新建一个构建镜像的目录(hugegraph-docker)，用于存放原材料：</p><p><img src="https://img-blog.csdnimg.cn/20201209201152438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>​    编写Dockerfile脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER erickun&lt;847473488@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/local/</span><br><span class="line">COPY hugegraph-tools-1.4.0 /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/init-store.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/start-hugegraph.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-studio-0.10.0/bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ADD :可以将tar压缩包自动解压到centos系统中对应路径下  (ADD 能解压压缩文件并把它们添加到镜像中，也从 url 拷贝文件到镜像中)，COPY则是将资源拷贝至镜像，两者的基本功能类似</li><li>ENV:配置环境变量，此处配置了jdk8的环境</li><li>RUN: 在镜像生成的过程中执行的命令，多与系统相关，如此处安装vim工具</li><li>CMD：在镜像docker run了之后，容器初始执行的命令</li></ul><p>执行打包命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t testhugegraph .</span><br></pre></td></tr></table></figure><p>为镜像起名为testhugegraph，不要忘记最后一个点</p><p><img src="https://img-blog.csdnimg.cn/20201209201214486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>生成完后，可以用<code>docker images</code>来查看是否生成成功，再来用此镜像新建一个容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:8088 -p 8081:8080 -it --name testhugegraph testhugegraph</span><br></pre></td></tr></table></figure><ul><li>-p：做端口映射： &lt;宿主机端口&gt;:&lt;容器内部端口&gt;，当然也可以写进Dockerfile的EXPOSE，为方便随时指定端口，不建议写进EXPOSE</li><li>-it:交互模式</li><li>–name：容器的名字</li><li>testhugegraph：从testhugegraph镜像中来生成一个叫testhugegraph的容器</li></ul><h1 id="内外端口映射"><a href="#内外端口映射" class="headerlink" title="内外端口映射"></a>内外端口映射</h1><p>​    实战中，内部端口可以访问<a href="http://127.0.0.1:8080（curl">http://127.0.0.1:8080（curl</a> <a href="http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==">http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==</a></p><p>原因：内外绑定的默认host是0.0.0.0，而不是127.0.0.1，故要修改内部服务启动的host:</p><p><img src="https://img-blog.csdnimg.cn/20201209201236279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;​    本文主要针对开源图谱hugegraph做了docker打包处理，hugegraph在windows上往往不是特别方便，也很容易崩，</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Docker/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="知识图谱" scheme="https://ericzikun.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="hugegraph" scheme="https://ericzikun.github.io/tags/hugegraph/"/>
    
    <category term="Docker" scheme="https://ericzikun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于leaflet的地图开发十大功能集合</title>
    <link href="https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/"/>
    <id>https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/</id>
    <published>2020-10-02T12:57:19.000Z</published>
    <updated>2020-10-02T13:07:23.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leaflet十大常用功能合集"><a href="#Leaflet十大常用功能合集" class="headerlink" title="Leaflet十大常用功能合集"></a>Leaflet十大常用功能合集</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本篇文章主要介绍基于leaflet开源地图组件开发的地图搭建，包含热力图、Geojson轨迹、marker、动画、用户标记侧栏、测量工具、搜索框、经纬线显示等功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本文中的代码都是经过测试无误的，关于依赖包均可在github上找到源文件，主要就是依赖导入和函数调用两部分，为了简洁，json数据一般外部导入，路径正确即可。</p><h1 id="底图导入"><a href="#底图导入" class="headerlink" title="底图导入"></a>底图导入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 地图的导入分在线和离线，在线直接调提供瓦片服务的url即可，离线请参考我的另一文章：<a href="https://blog.csdn.net/popofzk/article/details/108902634" target="_blank" rel="noopener">基于leaflet的离线瓦片发布方式总结</a> 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Offline Map by WHU<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"docs/images/favicon.ico"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部的js或者css  （组件的依赖） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/leaflet.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/heatpoint.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * </span><br><span class="line"><span class="css">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123; <span class="attribute">height</span>: <span class="number">100%</span>; &#125;</span></span><br><span class="line">      /* html,body &#123;</span><br><span class="line">          padding: 0;</span><br><span class="line">          margin: 0 auto;</span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">          min-width: 100%;</span><br><span class="line">      &#125; */</span><br><span class="line"><span class="css">      <span class="selector-id">#map</span> &#123;</span></span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//----------------绘制底图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mymap = L.map(<span class="string">'map'</span>).setView([ <span class="number">20</span>,<span class="number">120</span>], <span class="number">5</span>);</span></span><br><span class="line"><span class="actionscript">mymap.zoomControl.setPosition(<span class="string">'topright'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> url = <span class="string">"https://api.mapbox.com/styles/v1/&#123;id&#125;/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw"</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;'</span></span></span><br><span class="line">L.tileLayer( url , &#123;</span><br><span class="line">  maxZoom: 18,</span><br><span class="line">  minZoom:2,</span><br><span class="line"><span class="actionscript">  id: <span class="string">'mapbox/streets-v11'</span>,</span></span><br><span class="line">  tileSize: 512,</span><br><span class="line">  zoomOffset: -1</span><br><span class="line">&#125;).addTo(mymap);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能一：热力图"><a href="#功能一：热力图" class="headerlink" title="功能一：热力图"></a>功能一：热力图</h1><p>依赖包：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet-heat.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>heatpoint数据文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heatpoint = [</span><br><span class="line">  [ <span class="number">25.277312550</span> , <span class="number">124.687775915409</span>,<span class="string">"486"</span>],</span><br><span class="line">  [ <span class="number">27.72593995</span> , <span class="number">124.474295839426</span>, <span class="string">"807"</span>],</span><br><span class="line">  [ <span class="number">27</span>, <span class="number">125</span>,<span class="string">"899"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126</span>,<span class="string">"1273"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126.5</span> , <span class="string">"1258"</span>],</span><br><span class="line">  [ <span class="number">28</span>, <span class="number">126.6</span>,<span class="string">"1279"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加热力图  lat, lng, intensity</span></span><br><span class="line">  <span class="keyword">var</span> layerHeat = L.heatLayer(heatpoint, &#123;<span class="attr">radius</span>: <span class="number">10</span>&#125;);</span><br><span class="line">  mymap.addLayer(layerHeat);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002202042404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能二：GeoJson轨迹"><a href="#功能二：GeoJson轨迹" class="headerlink" title="功能二：GeoJson轨迹"></a>功能二：GeoJson轨迹</h1><p>GeoJson数据格式：这里我采用的是对不同轨迹上不同颜色，对原始版本进行了修改。<br>轨迹构成面：<br>数据这里省略了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">        [ ,  ],</span><br><span class="line">        [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">          [ ,  ],</span><br><span class="line">          [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>轨迹线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>外部导入数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/geoJson.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> myStyle = &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">'#101010'</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">var</span> layerGeo = L.geoJSON(states, &#123;</span><br><span class="line">    style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(feature.geometry.type == <span class="string">"LineString"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).addTo(mymap)</span><br></pre></td></tr></table></figure><h1 id="功能三：marker"><a href="#功能三：marker" class="headerlink" title="功能三：marker"></a>功能三：marker</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> icon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/fig.svg'</span>,</span><br><span class="line">                                        iconSize:     [<span class="number">20</span>, <span class="number">20</span>], <span class="comment">// size of the icon</span></span><br><span class="line">                                        <span class="comment">// shadowSize:   [50, 64], // size of the shadow</span></span><br><span class="line">                                        iconAnchor:   [<span class="number">22</span>, <span class="number">94</span>], <span class="comment">// point of the icon which will correspond to marker's location</span></span><br><span class="line">                                        shadowAnchor: [<span class="number">4</span>, <span class="number">62</span>],  <span class="comment">// the same for the shadow</span></span><br><span class="line">                                        popupAnchor:  [<span class="number">-3</span>, <span class="number">-76</span>] <span class="comment">// point from which the popup should open relative to the iconAnchor</span></span><br><span class="line">              &#125;)</span><br><span class="line">   </span><br><span class="line">    marker = <span class="keyword">new</span> L.marker(loc,&#123;<span class="attr">icon</span>: icon&#125; );<span class="comment">//se property </span></span><br><span class="line">    marker.addTo(mymap)</span><br><span class="line">                <span class="comment">// searched</span></span><br><span class="line">   marker.bindPopup(<span class="string">'area: '</span>+ title );</span><br><span class="line">            </span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><h1 id="功能四：轨迹动画（从A-gt-B）"><a href="#功能四：轨迹动画（从A-gt-B）" class="headerlink" title="功能四：轨迹动画（从A-&gt;B）"></a>功能四：轨迹动画（从A-&gt;B）</h1><p><a href="https://github.com/ewoken/Leaflet.MovingMarker" target="_blank" rel="noopener">参考github</a><br><a href="http://ewoken.github.io/Leaflet.MovingMarker/" target="_blank" rel="noopener">官方demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用多个动画效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------geo的动画 L.Marker.movingMarker-------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> parisKievLL = [[<span class="number">48.8567</span>, <span class="number">2.3508</span>], [<span class="number">50.45</span>, <span class="number">30.523333</span>]];</span><br><span class="line"><span class="keyword">var</span> londonParisRomeBerlinBucarest = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">48.8567</span>, <span class="number">2.3508</span>],</span><br><span class="line">[<span class="number">41.9</span>, <span class="number">12.5</span>], [<span class="number">52.516667</span>, <span class="number">13.383333</span>], [<span class="number">44.4166</span>,<span class="number">26.1</span>]];</span><br><span class="line"><span class="keyword">var</span> londonBrusselFrankfurtAmsterdamLondon = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">50.85</span>, <span class="number">4.35</span>],</span><br><span class="line">[<span class="number">50.116667</span>, <span class="number">8.683333</span>], [<span class="number">52.366667</span>, <span class="number">4.9</span>], [<span class="number">51.507222</span>, <span class="number">-0.1275</span>]];</span><br><span class="line"><span class="keyword">var</span> barcelonePerpignanPauBordeauxMarseilleMonaco = [</span><br><span class="line">    [<span class="number">41.385064</span>, <span class="number">2.173403</span>],</span><br><span class="line">    [<span class="number">42.698611</span>, <span class="number">2.895556</span>],</span><br><span class="line">    [<span class="number">43.3017</span>, <span class="number">-0.3686</span>],</span><br><span class="line">    [<span class="number">44.837912</span>, <span class="number">-0.579541</span>],</span><br><span class="line">    [<span class="number">43.296346</span>, <span class="number">5.369889</span>],</span><br><span class="line">    [<span class="number">43.738418</span>, <span class="number">7.424616</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> planeIcon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/marker-icon-2x.png'</span>,</span><br><span class="line">iconSize: [<span class="number">40</span>, <span class="number">70</span>],</span><br><span class="line">    iconAnchor: [<span class="number">22</span>, <span class="number">94</span>],</span><br><span class="line">    popupAnchor: [<span class="number">-3</span>, <span class="number">-76</span>],</span><br><span class="line">    shadowUrl: <span class="string">'./css/images/marker-shadow.png'</span>,</span><br><span class="line">    shadowSize: [<span class="number">68</span>, <span class="number">95</span>],</span><br><span class="line">    shadowAnchor: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------用户点击开始轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker1 = L.Marker.movingMarker(parisKievLL, [<span class="number">10000</span>]).addTo(mymap);</span><br><span class="line">L.polyline(parisKievLL).addTo(mymap);</span><br><span class="line">marker1.once(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    marker1.start();</span><br><span class="line">    marker1.closePopup();</span><br><span class="line">    marker1.unbindPopup();</span><br><span class="line">    marker1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (marker1.isRunning()) &#123;</span><br><span class="line">            marker1.pause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            marker1.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to pause !&lt;/b&gt;'</span>).openPopup();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to start !&lt;/b&gt;'</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">marker1.openPopup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------自动播放轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker2 = L.Marker.movingMarker(londonParisRomeBerlinBucarest,</span><br><span class="line">    [<span class="number">3000</span>, <span class="number">9000</span>, <span class="number">9000</span>, <span class="number">4000</span>],&#123;<span class="attr">autostart</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line">L.polyline(londonParisRomeBerlinBucarest, &#123;<span class="attr">color</span>: <span class="string">'red'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------循环动画</span></span><br><span class="line"><span class="keyword">var</span> marker3 = L.Marker.movingMarker(londonBrusselFrankfurtAmsterdamLondon,</span><br><span class="line">    [<span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>], &#123;<span class="attr">autostart</span>: <span class="literal">true</span>, <span class="attr">loop</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.loops = <span class="number">0</span>;</span><br><span class="line">marker3.bindPopup(<span class="string">''</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">L.polyline(londonBrusselFrankfurtAmsterdamLondon, &#123;<span class="attr">color</span>: <span class="string">'black'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.on(<span class="string">'loop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker3.loops++;</span><br><span class="line">    <span class="keyword">if</span> (e.elapsedTime &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        marker3.getPopup().setContent(<span class="string">"&lt;b&gt;Loop: "</span> + marker3.loops + <span class="string">"&lt;/b&gt;"</span>)</span><br><span class="line">        marker3.openPopup();</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            marker3.closePopup();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (! marker1.isEnded()) &#123;</span><br><span class="line">                marker1.openPopup();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (marker4.getLatLng().equals([<span class="number">45.816667</span>, <span class="number">15.983333</span>])) &#123;</span><br><span class="line">                    marker4.bindPopup(<span class="string">'Click on the map to move me !'</span>);</span><br><span class="line">                    marker4.openPopup();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------根据用户的鼠标点击来运动  不精确</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> marker4 = L.Marker.movingMarker([[<span class="number">45.816667</span>, <span class="number">15.983333</span>]], [],&#123;<span class="attr">icon</span>: planeIcon&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker4.moveTo(e.latlng, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="功能五：轨迹动画-轨迹自身动画"><a href="#功能五：轨迹动画-轨迹自身动画" class="headerlink" title="功能五：轨迹动画(轨迹自身动画)"></a>功能五：轨迹动画(轨迹自身动画)</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入动画效果DashFlow --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/L.Path.DashFlow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 导入DashFlow动画依赖 轨迹线path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./json/route.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/ ---------------------------------------------添加动画效果DashFlow</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, latlngs = [], len = route.length; i &lt; len; i++) &#123;</span><br><span class="line">latlngs.push(<span class="keyword">new</span> L.LatLng(route[i][<span class="number">0</span>], route[i][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = L.polyline(latlngs, &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    mymap.fitBounds(L.latLngBounds(latlngs));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(L.marker(latlngs[<span class="number">0</span>]));</span><br><span class="line">mymap.addLayer(L.marker(latlngs[len - <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(path);<span class="comment">//添加一个path动画</span></span><br><span class="line"></span><br><span class="line">L.circleMarker([<span class="number">10</span>, <span class="number">70</span>], &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span>,</span><br><span class="line">radius: <span class="number">147.5</span></span><br><span class="line">&#125;).addTo(mymap); <span class="comment">//添加以中心点 半径画圆的 动画效果</span></span><br></pre></td></tr></table></figure><h1 id="功能六：用户标注侧栏"><a href="#功能六：用户标注侧栏" class="headerlink" title="功能六：用户标注侧栏"></a>功能六：用户标注侧栏</h1><p><img src="https://img-blog.csdnimg.cn/20201002201912445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入画图组件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./js/leaflet.draw.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.4.10/leaflet.draw.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加右侧用户画图toolbar</span></span><br><span class="line"><span class="keyword">var</span> drawnItems = <span class="keyword">new</span> L.FeatureGroup();</span><br><span class="line">mymap.addLayer(drawnItems);</span><br><span class="line"><span class="keyword">var</span> drawControl = <span class="keyword">new</span> L.Control.Draw(&#123;<span class="attr">position</span>: <span class="string">'topright'</span>,</span><br><span class="line">    edit: &#123;</span><br><span class="line">        featureGroup: drawnItems</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mymap.addControl(drawControl);</span><br><span class="line">mymap.on(L.Draw.Event.CREATED, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = event.layer;</span><br><span class="line"></span><br><span class="line">        drawnItems.addLayer(layer);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="功能七：测量工具-m-nm-mi"><a href="#功能七：测量工具-m-nm-mi" class="headerlink" title="功能七：测量工具(m/nm/mi)"></a>功能七：测量工具(m/nm/mi)</h1><p>导入依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 测量工具 Leaflet.PolylineMeasure--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/Lealet.PolylineMeasure.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/Leaflet.PolylineMeasure.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ---------------------------------------------测量工具Leaflet.PolylineMeasure</span></span><br><span class="line">L.control.scale (&#123;<span class="attr">maxWidth</span>:<span class="number">240</span>, <span class="attr">metric</span>:<span class="literal">true</span>, <span class="attr">imperial</span>:<span class="literal">false</span>, <span class="attr">position</span>: <span class="string">'bottomleft'</span>&#125;).addTo (mymap);</span><br><span class="line"><span class="keyword">let</span> polylineMeasure = L.control.polylineMeasure (&#123;<span class="attr">position</span>:<span class="string">'topright'</span>, <span class="attr">unit</span>:<span class="string">'metres'</span>, <span class="attr">showBearings</span>:<span class="literal">true</span>, <span class="attr">clearMeasurementsOnStop</span>: <span class="literal">false</span>, <span class="attr">showClearControl</span>: <span class="literal">true</span>, <span class="attr">showUnitControl</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">polylineMeasure.addTo (mymap);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugevent</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.debug(e.type, e, polylineMeasure._currentLine) &#125;</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:toggle'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:start'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:resume'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:finish'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:clear'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:add'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:insert'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:move'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:remove'</span>, debugevent);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204247110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能八：经纬度显示"><a href="#功能八：经纬度显示" class="headerlink" title="功能八：经纬度显示"></a>功能八：经纬度显示</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------------------------------绘制经纬度网格线 Specify divisions every 10 degrees</span></span><br><span class="line">  L.latlngGraticule(&#123;</span><br><span class="line">            weight: <span class="string">"2.0"</span>,</span><br><span class="line">            color: <span class="string">'#101010'</span>,</span><br><span class="line">            showLabel: <span class="literal">true</span>,</span><br><span class="line">            dashArray: [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">            zoomInterval: [</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">2</span>, <span class="attr">end</span>: <span class="number">3</span>, <span class="attr">interval</span>: <span class="number">30</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">4</span>, <span class="attr">end</span>: <span class="number">4</span>, <span class="attr">interval</span>: <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">5</span>, <span class="attr">end</span>: <span class="number">7</span>, <span class="attr">interval</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">8</span>, <span class="attr">end</span>: <span class="number">10</span>, <span class="attr">interval</span>: <span class="number">1</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204133961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能九：中心坐标显示"><a href="#功能九：中心坐标显示" class="headerlink" title="功能九：中心坐标显示"></a>功能九：中心坐标显示</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 坐标显示  中心坐标 底部显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------添加屏幕中心坐标的底部显示</span></span><br><span class="line">L.control.mapCenterCoord(</span><br><span class="line">  &#123;</span><br><span class="line">  latlngFormat: <span class="string">'DM'</span>,</span><br><span class="line">  latlngDesignators: <span class="literal">true</span>,</span><br><span class="line">  position: <span class="string">"bottomright"</span></span><br><span class="line">&#125;</span><br><span class="line">).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002203210350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能十：仿谷歌搜索框"><a href="#功能十：仿谷歌搜索框" class="headerlink" title="功能十：仿谷歌搜索框"></a>功能十：仿谷歌搜索框</h1><p><a href="https://github.com/8to5Developer/leaflet-custom-searchbox" target="_blank" rel="noopener">参考github</a></p><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框 谷歌风格 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://code.jquery.com/jquery-1.12.1.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.customsearchbox.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/searchbox.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchboxControl=createSearchboxControl();</span><br><span class="line">        <span class="keyword">var</span> control = <span class="keyword">new</span> searchboxControl(&#123;</span><br><span class="line">            sidebarTitleText: <span class="string">'Header'</span>,</span><br><span class="line">            sidebarMenuItems: &#123;</span><br><span class="line">                Items: [</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 1 (github.com)"</span>, <span class="attr">href</span>: <span class="string">"http://github.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-carwash"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 2 (google.com)"</span>, <span class="attr">href</span>: <span class="string">"http://google.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-cloudy"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 1"</span>, <span class="attr">onclick</span>: <span class="string">"alert('button 1 clicked !')"</span>, <span class="attr">icon</span>: <span class="string">"icon-potrait"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 2"</span>, <span class="attr">onclick</span>: <span class="string">"button2_click();"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-dining"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 3 (stackoverflow.com)"</span>, <span class="attr">href</span>: <span class="string">'http://stackoverflow.com'</span>, <span class="attr">icon</span>: <span class="string">"icon-bike"</span> &#125;,</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        control._searchfunctionCallBack = <span class="function"><span class="keyword">function</span> (<span class="params">searchkeywords</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!searchkeywords) &#123;</span><br><span class="line">                searchkeywords = <span class="string">"The search call back is clicked !!"</span></span><br><span class="line">            &#125;</span><br><span class="line">            alert(searchkeywords);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mymap.addControl(control);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">button2_click</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        alert(<span class="string">'button 2 clicked !!!'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   这里的搜索框提供了一个模板，可根据自己需求修改函数、按钮等</p><h1 id="功能十一：搜索框的自动补全"><a href="#功能十一：搜索框的自动补全" class="headerlink" title="功能十一：搜索框的自动补全"></a>功能十一：搜索框的自动补全</h1><p>采用jquery的input框自动补全组件<br>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框补全功能jquery --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script type="text/javascript"  src="http://code.jquery.com/jquery-1.8.3.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.10.3/jquery-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里用jquery组件来绑定searchboxinput（上一个谷歌搜索框）,导入的数据采用数组形式即可。<br>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------------搜索框自动补全 jquery----------------------</span></span><br><span class="line"><span class="keyword">var</span> cityData = []</span><br><span class="line"><span class="comment">//自动填充1</span></span><br><span class="line">              $( <span class="string">"#searchboxinput"</span> ).autocomplete(&#123;</span><br><span class="line">               source: cityData,</span><br><span class="line">                    messages: &#123;</span><br><span class="line">              noResults: <span class="string">''</span>,</span><br><span class="line">              results: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201002210623866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Leaflet十大常用功能合集&quot;&gt;&lt;a href=&quot;#Leaflet十大常用功能合集&quot; class=&quot;headerlink&quot; title=&quot;Leaflet十大常用功能合集&quot;&gt;&lt;/a&gt;Leaflet十大常用功能合集&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/leaflet/"/>
    
    
  </entry>
  
  <entry>
    <title>基于leaflet的离线瓦片发布方式总结</title>
    <link href="https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-02T08:52:57.000Z</published>
    <updated>2020-10-02T12:57:20.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="离线瓦片发布"><a href="#离线瓦片发布" class="headerlink" title="离线瓦片发布"></a>离线瓦片发布</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leaflet是webgis中相对成熟的开源地图组件库，包含了几乎大部分开发者的基本需求，对于一般用户而言，联网状态下采用在线的瓦片服务即可，但也有一些需要必须离线的场景，本篇博客将讲述两种离线瓦片发布的方式，其一：采用Springboot后端发布；其二：直接将瓦片资源放在文件路径下访问。</p><h2 id="瓦片发布前的准备"><a href="#瓦片发布前的准备" class="headerlink" title="瓦片发布前的准备"></a>瓦片发布前的准备</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在发布瓦片服务前，先要根据框定的经纬度爬取地图瓦片图片，这里采用已经开源的”全能地图下载器3.0”，选择好需要爬取的地图级别（级别越大，相当于放大程度Zoom越大）所以越大耗费的存储空间越大。<br><img src="https://img-blog.csdnimg.cn/20201002161850125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Springboot瓦片发布"><a href="#Springboot瓦片发布" class="headerlink" title="Springboot瓦片发布"></a>Springboot瓦片发布</h2><p>参考<br><img src="https://img-blog.csdnimg.cn/20201002162401637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>controller下新建PublicData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/xyz"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;DATA_PATH&#125;"</span>)</span><br><span class="line">    String dataPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;name&#125;/&#123;level&#125;/&#123;col&#125;/&#123;rowExtention:.+&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xyz</span><span class="params">(@PathVariable String name, @PathVariable <span class="keyword">int</span> level, @PathVariable <span class="keyword">int</span> col, @PathVariable String rowExtention, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String[] rowParts=rowExtention.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> row=Integer.parseInt(rowParts[<span class="number">0</span>]);</span><br><span class="line">            String extension=rowParts[<span class="number">1</span>];</span><br><span class="line">            String path = dataPath+<span class="string">"/"</span>+name+<span class="string">"/"</span>+level+<span class="string">"/"</span>+col+<span class="string">"/"</span>+rowExtention;</span><br><span class="line"><span class="comment">//            InputStream inputStream = SqliteUtil.readTile(dataPath,name,level,col,row);</span></span><br><span class="line">            InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            <span class="keyword">if</span>(inputStream==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedImage br = ImageIO.read(inputStream);</span><br><span class="line">            ImageIO.write(br, extension, response.getOutputStream());</span><br><span class="line">            br.flush();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(String.format(<span class="string">"%s/%d/%d/%s请求出错!"</span> ,name,level,col,rowExtention));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CorsFilter.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;web.CorsFilter&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> corsFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (corsFilter) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,PUT,DELETE,OPTIONS"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length,Authorization,Accept,X-Requested-With"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置图片路径，在application.properties中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#瓦片存放的本地路径</span><br><span class="line">DATA_PATH = /Users/apple/xxx/xxx</span><br><span class="line">#DATA_PATH = E:/newtask</span><br><span class="line">#设置允许跨域（jar包设置为true，war包设置为false）</span><br><span class="line">web.CorsFilter = true</span><br></pre></td></tr></table></figure><p>地图前端的url：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span><br></pre></td></tr></table></figure><h2 id="本地路径访问"><a href="#本地路径访问" class="headerlink" title="本地路径访问"></a>本地路径访问</h2><p>把url地址写对即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;离线瓦片发布&quot;&gt;&lt;a href=&quot;#离线瓦片发布&quot; class=&quot;headerlink&quot; title=&quot;离线瓦片发布&quot;&gt;&lt;/a&gt;离线瓦片发布&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; leaflet是web</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/leaflet/"/>
    
    
    <category term="地图" scheme="https://ericzikun.github.io/tags/%E5%9C%B0%E5%9B%BE/"/>
    
    <category term="gis" scheme="https://ericzikun.github.io/tags/gis/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="离线地图" scheme="https://ericzikun.github.io/tags/%E7%A6%BB%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    
    <category term="leaflet" scheme="https://ericzikun.github.io/tags/leaflet/"/>
    
  </entry>
  
  <entry>
    <title>hugegraph实战总结</title>
    <link href="https://ericzikun.github.io/2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-02T07:50:24.000Z</published>
    <updated>2020-10-02T08:07:12.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hugegraph安装"><a href="#hugegraph安装" class="headerlink" title="hugegraph安装"></a>hugegraph安装</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hugegraph安装比较麻烦，必须版本一致：<br><img src="https://img-blog.csdnimg.cn/20201002152742770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>hugegraph server是发布图数据的核心服务</li><li>loader用于导入数据</li><li>studio是hugegraph官方的图谱前端，依赖于serve</li></ul><h1 id="本地hugegraph启动"><a href="#本地hugegraph启动" class="headerlink" title="本地hugegraph启动"></a>本地hugegraph启动</h1><h2 id="启动hugegraph-serve："><a href="#启动hugegraph-serve：" class="headerlink" title="启动hugegraph serve："></a>启动hugegraph serve：</h2><pre><code>hugegraph-0.10.4:   默认是8080与8182端口相关配置：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 。。省略</span><br><span class="line">backend=rocksdb</span><br><span class="line">serializer=binary</span><br><span class="line">rocksdb.data_path=.</span><br><span class="line">rocksdb.wal_path=.</span><br><span class="line"></span><br><span class="line">store=hugegraph</span><br><span class="line"></span><br><span class="line">search.text_analyzer=jieba</span><br><span class="line">search.text_analyzer_mode=INDEX</span><br><span class="line"></span><br><span class="line"># rocksdb backend config</span><br><span class="line">#rocksdb.data_path=/path/to/disk</span><br><span class="line">#rocksdb.wal_path=/path/to/disk</span><br></pre></td></tr></table></figure><p>初始化本地的rockdb以及启动serve服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/init-store.sh        </span><br><span class="line">bin/start-hugegraph.sh</span><br></pre></td></tr></table></figure><h2 id="导入数据："><a href="#导入数据：" class="headerlink" title="导入数据："></a>导入数据：</h2><p>在hugegraph-loader-0.10.0下：<br>具体数据格式参考官方的example/file文件，struct.json和schema.groovy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy</span><br></pre></td></tr></table></figure><h2 id="启动前端："><a href="#启动前端：" class="headerlink" title="启动前端："></a>启动前端：</h2><p>在hugegraph-studio-0.10.0下：   默认值：8088端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>PS: 一定记得 如果更改了数据， 一定要清空db再导入！！否则前后属性如果不一致会报错！<br>使用tools的清空命令：</p><p>在hugegraph-tools-1.4.0下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph graph-clear -c "I'm sure to delete all data"</span><br></pre></td></tr></table></figure><p>前端更改：增加节点图片：改index.js里面：</p><p><img src="https://img-blog.csdnimg.cn/20201002152536570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><p>服务器上部署会略有不同！<br><a href="https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html" target="_blank" rel="noopener">https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html</a></p><p>导入的命令和本地不同，需要加上ip和端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy -h 17x.xx.xx.xx -p 8080</span><br></pre></td></tr></table></figure><p>clear数据库：</p><p>修改hugegraph-tools下面的bin/hugegraph 指定ip和端口即可</p><p>重新导入数据时，需要clear，服务器上需要指定</p><p><img src="https://img-blog.csdnimg.cn/20201002154409198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br>效果图：<br><img src="https://img-blog.csdnimg.cn/20201002154501720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hugegraph安装&quot;&gt;&lt;a href=&quot;#hugegraph安装&quot; class=&quot;headerlink&quot; title=&quot;hugegraph安装&quot;&gt;&lt;/a&gt;hugegraph安装&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Hugegraph" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Hugegraph/"/>
    
    
    <category term="数据库" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="知识图谱" scheme="https://ericzikun.github.io/tags/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
    
    <category term="hugegraph" scheme="https://ericzikun.github.io/tags/hugegraph/"/>
    
    <category term="自然语言处理" scheme="https://ericzikun.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch(下)</title>
    <link href="https://ericzikun.github.io/2020/10/01/elasticsearch-%E4%B8%8B-1/"/>
    <id>https://ericzikun.github.io/2020/10/01/elasticsearch-%E4%B8%8B-1/</id>
    <published>2020-10-01T14:53:39.000Z</published>
    <updated>2020-10-01T14:55:36.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JD商城实战"><a href="#JD商城实战" class="headerlink" title="JD商城实战"></a>JD商城实战</h2><p>新建Springboot initializr项目</p><p>导入es、fastjson等pom下的依赖</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>数据问题？数据库获取，消息队列中获取，都可以成为数据源，或者爬虫</p><p>爬取数据：（获取请求返回的页面信息，筛选出我们想要的数据就可以了）</p><p>jsoup包:用于解析网页，不能爬电影</p><p>新建一个utils包放网页解析的工具类</p><p><img src="https://img-blog.csdnimg.cn/20200902210018737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>本质的请求是：</p><p><a href="https://search.jd.com/Search?keyword=java" target="_blank" rel="noopener">https://search.jd.com/Search?keyword=java</a></p><p><img src="https://img-blog.csdnimg.cn/2020090221003863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所有在Js中的方法这里都可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword=java"</span>;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line">        System.out.println(element.html());</span><br><span class="line">          <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">            System.out.println(img);</span><br><span class="line">            System.out.println(price);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902210114208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210129877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902210152928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>输出结果</p><p><img src="https://img-blog.csdnimg.cn/20200902210209190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>注意：</p><p>在图片较多的网站中，图片往往是延迟加载的，注意看图片的属性：</p><p><img src="https://img-blog.csdnimg.cn/20200902210224973.png#pic_center" alt="在这里插入图片描述"></p><p>将获取到的元素 封装成对象，新建pojo，Content.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="comment">//可以自己添加属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次封装工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//丢进Springboot中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseJD(<span class="string">"java"</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword="</span> + keywords;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//所有你在js中可以使用的方法，这里都可以使用</span></span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(element.html());</span></span><br><span class="line">        <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        ArrayList&lt;Content&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;Content&gt;();</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            Content content = <span class="keyword">new</span> Content();</span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            content.setTitle(title);</span><br><span class="line">            goodsList.add(content);</span><br><span class="line"><span class="comment">//            System.out.println("===============================");</span></span><br><span class="line"><span class="comment">//            System.out.println(img);</span></span><br><span class="line"><span class="comment">//            System.out.println(price);</span></span><br><span class="line"><span class="comment">//            System.out.println(title);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodsList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写业务层service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> com.kun.utils.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//业务编写</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.解析数据放入es索引中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keywords);</span><br><span class="line">        <span class="comment">//把查询的数据放入我们的es中</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"2m"</span>);</span><br><span class="line"><span class="comment">//批量插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contents.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">"jd_goods"</span>)</span><br><span class="line">                            .source(JSON.toJSONString(contents.get(i)), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：由于这个文件中又Autowire，所以就算建了主函数psvm，也不能测，必须启动服务；</p><p>直接用controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">parse</span><span class="params">(@PathVariable(<span class="string">"keyword"</span>)</span> String keywords) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>  contentService.parseContent(keywords);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在业务层中实现搜索功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 获取数据实现搜索功能</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPage(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span>(pageNo&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"title"</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    ArrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        list.add(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;"</span>)</span><br><span class="line">  <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; search(<span class="meta">@PathVariable</span>(<span class="string">"keyword"</span>) String keyword,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageNo"</span>)<span class="keyword">int</span> pageNo,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageSize"</span>) <span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="keyword">return</span> contentService.searchPage(keyword, pageNo, pageSize);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>先在一个任意包下<code>npm install vue</code>生成vue文件，将内部一些js包导入Springboot项目中；axios.min.js;vue.min.js</p><p><img src="https://img-blog.csdnimg.cn/2020090221025572.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210315359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在前端每个商品中得到result值</p><p><img src="https://img-blog.csdnimg.cn/20200902210337955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3><p>修改业务层ContentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//3. 新增高亮功能</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPageHighlightBuilder(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        parseContent(keyword);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            pageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//条件搜索</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        sourceBuilder.from(pageNo);</span><br><span class="line">        sourceBuilder.size(pageSize);</span><br><span class="line">        <span class="comment">//精准匹配</span></span><br><span class="line"><span class="comment">//        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("title", keyword);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.query(termQueryBuilder);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//match匹配 可以支持中文搜索</span></span><br><span class="line">        MatchQueryBuilder matchQueryBuilder = <span class="keyword">new</span> MatchQueryBuilder(<span class="string">"title"</span>, keyword);</span><br><span class="line">        sourceBuilder.query(matchQueryBuilder);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));<span class="comment">//超时</span></span><br><span class="line">        <span class="comment">//高亮</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">"title"</span>); <span class="comment">//高亮的字段</span></span><br><span class="line">        highlightBuilder.requireFieldMatch(<span class="keyword">false</span>);<span class="comment">//如果一句里面有多个关键词高亮，则只显示第一个</span></span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;span style='color:red'&gt;"</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">        sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        <span class="comment">//执行搜索</span></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        ArrayList&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields(); <span class="comment">//获取到高亮字段</span></span><br><span class="line">            HighlightField title = highlightFields.get(<span class="string">"title"</span>);</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap(); <span class="comment">//原来的结果！要在结果里面将高亮置换一下</span></span><br><span class="line">            <span class="comment">//解析高亮的字段 将原来的字段换为我们高亮的字段即可</span></span><br><span class="line">            <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Text[] fragments = title.fragments();</span><br><span class="line">                String n_title = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                    n_title += text;</span><br><span class="line">                &#125;</span><br><span class="line">                sourceAsMap.put(<span class="string">"title"</span>, n_title);<span class="comment">//高亮字段替换掉原来的内容即可！</span></span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200902210811692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JD商城实战&quot;&gt;&lt;a href=&quot;#JD商城实战&quot; class=&quot;headerlink&quot; title=&quot;JD商城实战&quot;&gt;&lt;/a&gt;JD商城实战&lt;/h2&gt;&lt;p&gt;新建Springboot initializr项目&lt;/p&gt;
&lt;p&gt;导入es、fastjson等pom下的依赖</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch(中)</title>
    <link href="https://ericzikun.github.io/2020/09/02/elasticsearch-%E4%B8%AD/"/>
    <id>https://ericzikun.github.io/2020/09/02/elasticsearch-%E4%B8%AD/</id>
    <published>2020-09-02T13:20:55.000Z</published>
    <updated>2020-10-01T14:57:10.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于文档的基本操作（重点）："><a href="#关于文档的基本操作（重点）：" class="headerlink" title="关于文档的基本操作（重点）："></a>关于文档的基本操作（重点）：</h2><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204531474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204542249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新数据，将小明改成小红"><a href="#更新数据，将小明改成小红" class="headerlink" title="更新数据，将小明改成小红"></a>更新数据，将小明改成小红</h4><p><img src="https://img-blog.csdnimg.cn/20200902204557115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="PUT更新数据"><a href="#PUT更新数据" class="headerlink" title="PUT更新数据"></a>PUT更新数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204609525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>version代表被改变的次数</p><p>Post,_update自由度更高，PUT必须一次性修改一个个体的全部内容，但是Post可以选择部分修改！</p><p><img src="https://img-blog.csdnimg.cn/20200902204624164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这个和PUT无异，要在后加_update</p><p><img src="https://img-blog.csdnimg.cn/20200902204637593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220465930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="简单的搜索："><a href="#简单的搜索：" class="headerlink" title="简单的搜索："></a>简单的搜索：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET Kuangshen&#x2F;user&#x2F;_search?q&#x3D;name:狂神说</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204720262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>简单的条件查询，可以根据默认的映射规则，产生基本的查询！</p><p><img src="https://img-blog.csdnimg.cn/20200902204750491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>复杂操作搜索 select（排序，分页，高亮，模糊查询，精准查询）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;张三&quot;,</span><br><span class="line">          &quot;age&quot; : 3,</span><br><span class="line">          &quot;desc&quot; : &quot;法外狂徒&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;交友&quot;,</span><br><span class="line">            &quot;旅游&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;李四&quot;,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;desc&quot; : &quot;不知道如何形容&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;篮球&quot;,</span><br><span class="line">            &quot;IT&quot;,</span><br><span class="line">            &quot;型男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;王五&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个屌丝&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;羽毛球&quot;,</span><br><span class="line">            &quot;钢琴&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 9,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.9034984,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.9034984,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.6534033,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hit: 索引和文档信息</p><p>查询的结果总数</p><p>然后就是查询出来的具体文档</p><p>数据中的东西都可以遍历出来</p><p>分数：通过score判断谁更加符合结果</p><h4 id="指定字段查询："><a href="#指定字段查询：" class="headerlink" title="指定字段查询："></a>指定字段查询：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后使用java操作es，所有的方法和对象就是这里面的key！</p><h3 id="复杂操作："><a href="#复杂操作：" class="headerlink" title="复杂操作："></a>复杂操作：</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>order中的desc降序、asc升序;按照age</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From:从第几个数据开始，返回多少条数据（单页面的数据）</p><p>数据下标还是从0开始的，和学的所有数据结构是一样的</p><p>/search/{current}/{pagesize}</p><h4 id="布尔值查询"><a href="#布尔值查询" class="headerlink" title="布尔值查询"></a>布尔值查询</h4><p>通过布尔值进行更加精确的查询：多条件精确查询</p><p>must命令（相当于mysql的and），即所有条件要同时符合；如果将must改为should（相当于or），则只要满足其一即可；</p><p>类似的  must not 查询不是。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 23</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器（filter）"><a href="#过滤器（filter）" class="headerlink" title="过滤器（filter）"></a>过滤器（filter）</h4><p>筛选age范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 10,</span><br><span class="line">              &quot;lte&quot;: 40</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><h4 id="匹配多个条件"><a href="#匹配多个条件" class="headerlink" title="匹配多个条件"></a>匹配多个条件</h4><p>匹配出tags里面只要包含有男的，同时按照上到下分值高到低排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 技术&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204843612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>多个条件使用空格隔开</p><p>只要满足其中一个结果即可以被查出</p><p>这个时候可以通过分值基本的判断</p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term查询是直接通过待排索引指定的词条进行精确的查找的！</p><p>关于分词：</p><p>term，直接查询精确的</p><p>match：会使用分词器解析！（先分析文档，然后再通过分析的文档进行查询！）</p><h4 id="两个字段类型text-keyword"><a href="#两个字段类型text-keyword" class="headerlink" title="两个字段类型text keyword"></a>两个字段类型text keyword</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#新建db</span><br><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">       &quot;desc&quot;:&#123;</span><br><span class="line">         &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">       &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#插入两条数据</span><br><span class="line">PUT testdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> PUT testdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204916616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202009022050161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205033299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于desc的type是keyword，当做整体去搜索了</p><p>总结：<strong>keyword字段类型不会被分词器解析！</strong></p><h4 id="多个值匹配的精确查询"><a href="#多个值匹配的精确查询" class="headerlink" title="多个值匹配的精确查询"></a>多个值匹配的精确查询</h4><p>精确查询多个值</p><p><img src="https://img-blog.csdnimg.cn/20200902205051762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p class&#x3D;&#39;key&#39; style&#x3D;&#39;color:red&#39;&gt;&quot;, </span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认是<code>&lt;em&gt;</code>标签</p><p><img src="https://img-blog.csdnimg.cn/20200902205112655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>也可以是自定义标签：设置pre_tags、post_tags</p><p><img src="https://img-blog.csdnimg.cn/20200902205134748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>匹配</li><li>按照条件匹配</li><li>精确匹配</li><li>区间范围匹配</li><li>匹配字段过滤</li><li>多条件查询</li><li>高亮查询</li></ul><h2 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200902205202942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="找原生依赖"><a href="#找原生依赖" class="headerlink" title="找原生依赖"></a>找原生依赖</h4><p><img src="https://img-blog.csdnimg.cn/20200902205225827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="https://img-blog.csdnimg.cn/20200902205249274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>新建一个empty project ，再创建普通模块</p><p><img src="https://img-blog.csdnimg.cn/2020090220533562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>创建Springboot 模块：</p><p><img src="https://img-blog.csdnimg.cn/20200902205358941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>勾上依赖：</p><p><img src="https://img-blog.csdnimg.cn/20200902205446302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于刚刚建的空project，故要陪JDK环境</p><p><img src="https://img-blog.csdnimg.cn/20200902205503601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205545193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205617604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220563956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>问题：一定要保证我们的导入依赖和我们的es版本一致</p><p>默认的导入依赖和我们本地的版本不一致！</p><p>可以自定义版本依赖，保证一致</p><p>新建config、ElasticSearchConfig.java`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狂神的spring两步骤：</span></span><br><span class="line"><span class="comment">//1.找对象</span></span><br><span class="line"><span class="comment">//2.放到spring中用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码</p><p><img src="https://img-blog.csdnimg.cn/20200902205659550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="具体测试es-api："><a href="#具体测试es-api：" class="headerlink" title="具体测试es api："></a>具体测试es api：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es 高级客户端测试API</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuangshenEsApiApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="comment">//面向对象来操作</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"restHighLevelClient"</span>)  <span class="comment">//这里的qualifier用来指定下面的client为原始的restHighLevelClient</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试索引的创建 Request</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建索引请求 相当于kibana中的PUT</span></span><br><span class="line">CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="comment">// 2.执行创建请求IndicesClient ,请求后获得响应</span></span><br><span class="line">CreateIndexResponse createIndexResponse =</span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//测试获取索引   判断是否存在某索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span>  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"testdb2"</span>);</span><br><span class="line">AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来应该是private RestHighLevelClient restHighLevelClient;这里为了简便，所以用Qualifier来限定client为restHighLevelClient；</p><p><img src="https://img-blog.csdnimg.cn/20200902205728393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205815265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205829872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>创建索引</li><li>判断索引是否存在</li><li>删除索引</li><li>创建文档</li><li>crud文档</li></ul><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><p>新建一个pojo，放入User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于要将我们的数据放入请求 json，故在pom中导入阿里巴巴fastjson</p><p>这里是将对象编写为Json，再放入es的request中</p><p>编写test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说"</span>,<span class="number">3</span>);</span><br><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则 put /kuang_index/_doc/1</span></span><br><span class="line">request.id(<span class="string">"1"</span>);</span><br><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将我们的数据放入请求 json</span></span><br><span class="line">request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发送请求</span></span><br><span class="line">IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(indexResponse.toString());<span class="comment">//</span></span><br><span class="line">System.out.println(indexResponse.status());<span class="comment">//对应我们命令返回的状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205848762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(getResponse.getSourceAsString());<span class="comment">//打印文档的内容</span></span><br><span class="line">System.out.println(getResponse);<span class="comment">//返回的全部内容和命令是一样的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205903708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新文档信息"><a href="#更新文档信息" class="headerlink" title="更新文档信息"></a>更新文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"kuang_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">updateRequest.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说Java"</span>, <span class="number">18</span>);</span><br><span class="line">updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line"></span><br><span class="line">UpdateResponse updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(updateResponse.status());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205926881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="删除文档信息"><a href="#删除文档信息" class="headerlink" title="删除文档信息"></a>删除文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文档记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">bulkRequest.timeout(<span class="string">"10s"</span>);<span class="comment">//数据量大的时候，秒数可以增加</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz"</span>,<span class="number">11</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz2"</span>,<span class="number">12</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz3"</span>,<span class="number">13</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz4"</span>,<span class="number">14</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz5"</span>,<span class="number">15</span>));</span><br><span class="line"><span class="comment">//批处理请求</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">bulkRequest.add(</span><br><span class="line"><span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>)</span><br><span class="line">.id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">.source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求+获得响应</span></span><br><span class="line">BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(bulkResponse.hasFailures());<span class="comment">//返回false：成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205948550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>小技巧：</p><p>一般企业中，会把index名存在utils里面的ESconst.java文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESconst</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ES_INDEX = <span class="string">"kuang_index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// SearchRequest 搜索请求</span></span><br><span class="line"><span class="comment">// SearchSourceBuilder 条件构造</span></span><br><span class="line"><span class="comment">// HighlightBuilder 构建高亮</span></span><br><span class="line"><span class="comment">// TermQueryBuilder 精确查询</span></span><br><span class="line"><span class="comment">// MatchAllQueryBuilder</span></span><br><span class="line"><span class="comment">// xxx QueryBuilder 对应我们刚才看到的命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(ESconst.ES_INDEX);</span><br><span class="line"><span class="comment">// 构建搜索的条件</span></span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件,可以使用querybuilders工具类实现</span></span><br><span class="line"><span class="comment">// QueryBuilders.termQuery精确匹配</span></span><br><span class="line"><span class="comment">// QueryBuilders.matchAllQuery匹配所有</span></span><br><span class="line">TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"qinjiang1"</span>);</span><br><span class="line"><span class="comment">//MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">sourceBuilder.query(termQueryBuilder);</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="comment">//sourceBuilder.from();</span></span><br><span class="line"><span class="comment">//sourceBuilder.size();</span></span><br><span class="line"><span class="comment">// 设置查询的时间 希望在60s内查出</span></span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">searchRequest.source(sourceBuilder);</span><br><span class="line">SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"><span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于文档的基本操作（重点）：&quot;&gt;&lt;a href=&quot;#关于文档的基本操作（重点）：&quot; class=&quot;headerlink&quot; title=&quot;关于文档的基本操作（重点）：&quot;&gt;&lt;/a&gt;关于文档的基本操作（重点）：&lt;/h2&gt;&lt;h3 id=&quot;基本操作：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>初探ElasticSearch+JD商城仿站实战(上)</title>
    <link href="https://ericzikun.github.io/2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/"/>
    <id>https://ericzikun.github.io/2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/</id>
    <published>2020-09-02T13:15:55.000Z</published>
    <updated>2020-10-01T14:56:48.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><p>官网:elastic.co</p><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>官网下载巨慢，翻墙下载</p><p>目录</p><p><img src="https://img-blog.csdnimg.cn/20200902202036128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>启动，访问9200：<br><img src="https://img-blog.csdnimg.cn/20200902202356416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902202418408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>访问9200接口：<br> <img src="https://img-blog.csdnimg.cn/20200902202445139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装elasticsearch-head："><a href="#安装elasticsearch-head：" class="headerlink" title="安装elasticsearch-head："></a>安装elasticsearch-head：</h2><p>git clone git://github.com/mobz/elasticsearch-head.git</p><p>cd elasticsearch-head</p><p>npm install</p><p>npm run start</p><p>open <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a></p><p>存在一个9200和9100的跨域问题！</p><p>点击链接，报跨域的错！</p><p><img src="https://img-blog.csdnimg.cn/20200902202606182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改elasticsearch中config下的yaml配置文件，修改：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202629294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启，连接成功：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202646249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>把索引当做一个数据库！可以建立索引（库），文档（库中的数据！）</p><p><img src="https://img-blog.csdnimg.cn/20200902202740368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>后面所有的查询，查询功能在<strong>Kibana</strong>中做！</p><h2 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a>了解ELK</h2><p> <img src="https://img-blog.csdnimg.cn/20200902202848351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p><img src="https://img-blog.csdnimg.cn/20200902202904980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>好处：ELK基本上都是拆箱即用</p><p>启动测试：点bin下的kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902202930697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>默认的kibana端口为5601</p><p>PS：<strong>注意elasticsearch和kibana的版本必须一致</strong> 否则出错！</p><p>开发工具：（Post curl head 谷歌浏览器插件测试）</p><p>汉化，修改kibana yaml中配置 重启，</p><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><ol><li>索引</li><li>字段类型（mapping）</li><li>文档（documents）</li></ol><p>概述：</p><p>集群、节点、索引、类型、文档、分片、映射是什么?</p><p>elasticsearch是面向文档，关系型数据库和elasticsearch 客观的对比如下，一切都是JSON！</p><p><img src="https://img-blog.csdnimg.cn/20200902203224509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220333641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>类型示例：</p><p><img src="https://img-blog.csdnimg.cn/20200902203401778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200902203433671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203518682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p><img src="https://img-blog.csdnimg.cn/20200902203602334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>放在elasticsearch的plugin（插件）下</p><p>重启观察ES</p><p><img src="https://img-blog.csdnimg.cn/20200902203708754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>关于elasticsearch中的命令 如elasticsearch-plugin：</p><p>命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin list</span><br></pre></td></tr></table></figure><p>在kibana中测分词器：</p><p><img src="https://img-blog.csdnimg.cn/20200902203744169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>我们输入 超级喜欢狂神或java</p><p>发现问题：狂神说被拆开了！</p><p>这种自己需要的词，需要自己加到我们的分词器字典中！</p><p>向ik分词器增加自己的配置</p><p><img src="https://img-blog.csdnimg.cn/2020090220382014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203835726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启es、kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902203858320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再次测试一下狂神说，看下效果！ik_max_word最细粒度划分</p><p><img src="https://img-blog.csdnimg.cn/20200902203920309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203939488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>以后自定义dic、导入即可！</p><p>索引引擎里面最重要的首先就是分词</p><h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制！</p><p><img src="https://img-blog.csdnimg.cn/20200902204000238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>基础测试</p><ol><li>创建一个索引！也是在kibana终端中试用版PUT命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test1&#x2F;type1&#x2F;1&#123;  </span><br><span class="line">&quot;name&quot;: &quot;狂神说&quot;, </span><br><span class="line">&quot;age&quot;: &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204049169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>完成了自动增加索引！数据也成功的添加了，这就是可以当做数据库看的原因。。</p><ol start="2"><li><p>那么name字段用不用指定类型呢？毕竟我们关系型数据库 是需要指定类型的啊！</p><ul><li>字符串类型 text、keyword</li><li>数值类型 long、integer、short、byte、double、float、scaled float</li><li>日期类型date</li><li>te布尔值类型boolean</li><li>二进制类型binary</li><li>等等。。。</li></ul></li><li><p>指定字段的类型——创建规则</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200902204112495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/2020090220423579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>GET命令得到库的信息：</p><p><img src="https://img-blog.csdnimg.cn/20200902204250447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200902204308198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ol start="4"><li>查看默认的信息</li></ol><p>通过命令get _cat/可以获得es当前的很多信息！<br><img src="https://img-blog.csdnimg.cn/20200902204407775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204421616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改 提交还是使用PUT即可！然后覆盖！最新办法</p><p>曾经的办法：</p><p><img src="https://img-blog.csdnimg.cn/20200902204437570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>现在的方法 使用POST：</p><p><img src="https://img-blog.csdnimg.cn/20200902204448548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>删除索引——DELETE<br><img src="https://img-blog.csdnimg.cn/20200902204500303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通过DELETE命令实现删除、根据你的请求来判断是删除索引还是删除文档记录！</p><p>使用RESTFUL风格是我们ES推荐大家使用的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch&quot;&gt;&lt;/a&gt;ElasticSearch&lt;/h1&gt;&lt;h2 id=&quot;安装elasticsearch&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Elasticsearch/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="Springboot" scheme="https://ericzikun.github.io/tags/Springboot/"/>
    
    <category term="Elasticsearch" scheme="https://ericzikun.github.io/tags/Elasticsearch/"/>
    
    <category term="京东商城实战" scheme="https://ericzikun.github.io/tags/%E4%BA%AC%E4%B8%9C%E5%95%86%E5%9F%8E%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术笔记ch5</title>
    <link href="https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/"/>
    <id>https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/</id>
    <published>2020-08-15T14:38:38.000Z</published>
    <updated>2020-10-17T07:36:18.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><p>类似LocalDate和NumberFormat的类使用静态工厂方法来构造对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();</span><br><span class="line">NumberFormat percentFormatter = NumberFormat.gatPercentInstance();</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">System.out.println(currencyFormatter.format(x));  <span class="comment">//0.1</span></span><br><span class="line">System.out.println(percentFormatter.format(x));   <span class="comment">//10%</span></span><br></pre></td></tr></table></figure><p>这里的NumberFormat类不使用构造器来完成，有两个原因：</p><ul><li>无法命名构造器。构造器名字必须与类相同，这里希望有两个不同名字，分别得到货币实例和百分比实例。</li><li>使用构造器时，无法改变所构造对象的类型，而工厂方法实际上将返回DecimalFormat类的对象，是NumberFormat的子类</li></ul><h3 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h3><p>main方法也是一种静态方法。main方法不对任何对象进行操作，事实上，启动程序时还没有任何对象。静态的main方法将执行并构造程序所需要的对象。</p><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>按值调用——表示方法接受的是调用者提供的值；</p><p>按引用调用——表示方法接收的是调用者提供的变量地址。</p><p>Java总是按值调用的。方法得到的是所有参数值的一个副本。也就是说，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">harry.raiseSalary(percent);</span><br></pre></td></tr></table></figure><p>无论方法如何实现，在这个方法调用后，percent值还是10。</p><p>但是对于对象引用则不同！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line"></span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体为：</p><ol><li>x初始化为harry值的一个副本，这里就是一个对象引用。</li><li>raiseSalary方法应用于这个对象引用。x和salary同时引用的那个Employee对象的工资提高了200%。</li><li>方法结束后x不再使用，对象变量harry继续引用那个工资增至3倍的员工对象</li></ol><h3 id="总结Java方法参数"><a href="#总结Java方法参数" class="headerlink" title="总结Java方法参数"></a>总结Java方法参数</h3><ul><li>方法不能修改基本数据类型的参数</li><li>方法可以改变对象参数的状态</li><li>方法参数不能让一个对象参数引用一个新的对象</li></ul><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><p>重载——同方法、不同参数</p><p>默认字段初始化：如果构造器中没有显示地为字段设置初值，则会被自动的赋为默认值！数值为0、布尔值为false、对象引用为null</p><p>无参构造器：如果编写一个类没有无参构造，就会为你提供一个无参数的构造器，如果已经只定义了有参，再调无参则不合法。</p><h4 id="参数名的定义："><a href="#参数名的定义：" class="headerlink" title="参数名的定义："></a>参数名的定义：</h4><p>习惯将参数名和实例字段保持一致，通过<strong>this</strong>来区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this的另一用法："><a href="#this的另一用法：" class="headerlink" title="this的另一用法："></a>this的另一用法：</h4><p>this除了可以指示一个方法的隐式参数外，还可以调用同一个类的另一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="string">"Employee #"</span> + nextId,s);</span><br><span class="line">   nextId ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用new Employee(6000)，Employee(double)构造器会调用Employee(String,double)构造器。</p><h4 id="初始化块："><a href="#初始化块：" class="headerlink" title="初始化块："></a>初始化块：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化块</span></span><br><span class="line">  &#123;</span><br><span class="line">    id = nextId;</span><br><span class="line">    nextId ++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = n;</span><br><span class="line">    salary = s;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = <span class="string">""</span>;</span><br><span class="line">    salary = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前有两种初始化数据字段的方法：</p><ul><li>构造器中赋值</li><li>声明中赋值</li></ul><p>另一个则是设置一个初始化块，只要构造这个类的对象，初始化块就会被执行——首先运行初始化快，然后才运行构造器的主体部分。</p><p>但是这不是必需的，通常将<strong>初始化代码放在构造器中</strong></p><p>区分于静态字段对应的静态代码块：如果类的静态字段需要很复杂的初始化代码，那么可以使用静态的初始化块</p><p>区分初始化块和静态初始化块：</p><ul><li><strong>静态初始化块</strong>:使用static定义,当类装载到系统时执行一次.若在静态初始化块中想初始化变量,那仅能初始化类变量,即static修饰的数据成员.</li><li><strong>非静态初始化块</strong>:在每个对象生成时都会被执行一次,可以初始化类的实例变量.</li></ul><h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><ul><li>保证数据私有</li><li>一定要对数据进行初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有字段都需要单独的字段访问器和字段更改器</li><li>分解有过多职责的类</li><li>类名和方法名要足够体现它们的职责</li><li>优先使用不可变的类</li></ul><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><p>继承的基本思想：基于已有的类创建新的类。就是复用已有类的方法，并且可以增加一些新的方法和字段</p><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>已存在的类——超类、基类、父类；新类——子类、派生类、孩子类</p><p>如Employee中的经理和和员工在薪资待遇上面存在一些差异，但也存在很多相同的地方。他们之间存在一个明显的“is-a”关系，每一个经理都是一个员工：<strong>“is-a”</strong>关系是继承的明显特征</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//added methods and fields</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setBonus不是在Employee中定义的，所以Employee不能使用它。经理继承了name、salary、hireDay三个字段，并且新增了bonus字段。</p><p>覆盖方法：</p><p>如果要返回经理的奖金</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary + bonus <span class="comment">//不成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为salary是父类的私有字段，子类Manager的getSalary方法不能直接访问到！</p><p>如果我们想调用父类Employee的getSalary方法，而不是当前类的这个方法，可以用super.getSalary()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> baseSalary = <span class="keyword">super</span>.getSalary();</span><br><span class="line">  <span class="keyword">return</span> baseSalary + bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的super和this不能等同于一类，因为super不是一个对象的引用，例如，不能将值super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。</p><p>注意：</p><ul><li>子类可以增加字段、增加方法或覆盖超类的方法，继承绝不会删除任何字段或方法<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="深入理解父子类继承（子类构造器）"><a href="#深入理解父子类继承（子类构造器）" class="headerlink" title="深入理解父子类继承（子类构造器）"></a>深入理解父子类继承（子类构造器）</h2></li></ul><p>有关子类是否继承了父类的私有字段（再理解）</p><p>如，Student类继承了Person类</p><p><strong>Student对象里，本身就装着一个Person对象</strong>。Student对象没有继承Person对象的name字段，所以Student对象没有一个叫name的字段。但Student内部封装的Person对象还是有name字段的。</p><img src="https://img-blog.csdnimg.cn/20200827225928570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student没有name字段，但它内部的Person对象有，而且还可以打出来看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// ERROR: name has private access in Person</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而且注意，我要直接打印Student的name字段 “s.name” ，报错说的是：<strong>Person类的name字段为私有，你不可以访问。而不是没有name字段。</strong></p><p>大胆一点的话，我们还可以给Student类再加一个name字段。这时候的Student对象本身有一个name字段，内部的基类Person对象还有一个name对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String personName, String studentName, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(personName);</span><br><span class="line">       <span class="keyword">this</span>.name = studentName;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="string">"whore"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// WHORE</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>使用super调用构造器，必须是子类构造器的第一条语句</li><li>子类构造器如果没有显式地调用超类的构造器，将自动地调用超类的无参数构造器，所以必须要求父类有无参构造，否则报错</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(<span class="string">"Carl Cracker"</span>,<span class="number">8000</span>,<span class="number">1987</span>,<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">boss.setBonus(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br><span class="line">staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee(<span class="string">"Tony"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Employee e:staff)</span><br><span class="line">  System.out.println(e.getName() + <span class="string">" "</span> + e.getSalary());</span><br></pre></td></tr></table></figure><p>对于e来说，既可以是Manager也可以是Employee，像这种的，一个对象变量可以指示多种实际类型的现象称为多态，在运行时可以自动地选择适当的方法，称为<strong>动态绑定</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(...);</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br></pre></td></tr></table></figure><p>这里面采用了多态，虽然staff[0]和boss引用同一个对象，但是编译器只将staff[0]看成是一个Employee对象，这意味着，可以这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boss.setBonus(<span class="number">5000</span>); <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>但不能这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>].setBonus(<span class="number">5000</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>这是因为staff[0]的声明类型是Employee，而setBonus不是Employee的方法。setBonus是Manager特有的方法，而不是覆盖重写父类的方法</p><p>多态——当声明变量为某一种形态的变量时，编译器就将它看成某种形态。</p><p>注意</p><ul><li>不能将超类的引用赋值给子类变量，如下非法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager m = staff[i]; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>原因很清楚：不是所有的员工都是经理，如果赋值成功，m有可能引用了一个不是经理的Employee对象，而在后面有可能会调用m.setBonus，这就会发生错误。</p><h3 id="警告："><a href="#警告：" class="headerlink" title="警告："></a>警告：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manager[] managers = <span class="keyword">new</span> Manager[<span class="number">10</span>];</span><br><span class="line">Employee[] staff = managers; <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>这样是没有问题的，因为manger[i]是一个Manager就一定是一个Employee！一定要切记：这里的staff和mangers引用的是同一个数组，就是一开始new的长度为10的数组！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>);</span><br></pre></td></tr></table></figure><p>如果这么去赋值，编译器是可以接受的！但是！！staff[0]和managers[0]是相同的引用，我们把一个普通的员工Harry擅自归入到经理行列（数组）里面去了！！后面如果调用manager[0].setBonus(1000)的时候，将会试图调用一个根本不存在的实例字段，进而搅乱相邻存储空间的内容</p><p>牢记：所有数组要牢记创建时候的元素类型，并负责监督仅将类型兼容的引用存储到数组中！例如，使用new managers[10]创建数组是一个经理数组如果试图存储一个Employee类型的引用就会引发ArrayStoreException异常 </p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ol><li><p>编译器查看对象的声明类型和方法名。</p></li><li><p>确定方法调用中提供的参数类型。</p></li><li><p>如果是private、static、final或者构造器，那么编译器将可以准确地知道应该调用哪个方法。——静态绑定；</p><p>动态绑定——如果调用的方法依赖于隐式参数的实际类型，则必须在运行的时候使用动态绑定。</p></li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>对于对象：</p><p>由于在员工列表中，一部分是纯员工，有一部分是经理（子类），在创建数组的时候申明的是Employee对象，而Employee对象无法读取到其Manager字段或方法等属性（多态），那么在实际用Manager这个对象的时候，要先强制转换成Manager类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = (Manager)staff[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>将其复原为Manager对象，以便于访问其额外的字段，如bonus奖金。当然，前提是0号确实是Manager，如果“谎报”，则会报错ClassCastException，为了确保不会谎报，可以先判断一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (staff[<span class="number">0</span>] <span class="keyword">instanceof</span> Manager)</span><br><span class="line">&#123;</span><br><span class="line">  boss = (Manager)staff[<span class="number">1</span>];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受保护字段protected"><a href="#受保护字段protected" class="headerlink" title="受保护字段protected"></a>受保护字段protected</h2><p>一般来说，声明为private私有，对其他类都是不可见的，即，子类不能访问超类的私有字段。不过有时候希望限制<strong>超类中的某个方法只允许子类访问</strong>，或者<strong>希望子类的方法访问超类的某个字段</strong>。</p><p>例如，将Employee中的hireDay字段设为protected，而不是private，则Manager方法就可以访问到这个字段。</p><p>注意：</p><ul><li>要谨慎使用，如果你的代码被别的程序员访问了受保护字段，那么后期维护时候，修改自身类则会影响到别人！</li><li>受保护的方法更具有实际意义，表明子类得到了信任，可以正确的使用这个方法，而其他类则不行</li></ul><h2 id="泛型类数组列表"><a href="#泛型类数组列表" class="headerlink" title="泛型类数组列表"></a>泛型类数组列表</h2><p>ArrayList是一个有类型参数的<strong>泛型类</strong>。尖括号里面填写保存的元素对象类型，如<code>ArrayList&lt;Employee&gt;</code></p><p>声明一个保存Employee对象的数组列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br></pre></td></tr></table></figure><p>也可以省略右边括号里面的类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h2><p>每个基本类型都有与之对应的类Integer、Long、Float、Double、Short、Byte、Character、Boolean；</p><p><strong>&lt;&gt;尖括号中的类型参数不允许是基本类型</strong></p><p>由于每个值分别包装在对象中，所以<code>ArrayList&lt;Integer&gt;</code>效率远远低于int[]</p><p>自动装箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;()</span><br><span class="line">list.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此时，进行了自动装箱过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(Integer.valueOf(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>自动拆箱：此时拿到的n应该是<code>&lt;Integer&gt;</code>类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i)</span><br></pre></td></tr></table></figure><p>转换成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i).intValue();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;静态工厂方法&quot;&gt;&lt;a href=&quot;#静态工厂方法&quot; class=&quot;headerlink&quot; title=&quot;静态工厂方法&quot;&gt;&lt;/a&gt;静态工厂方法&lt;/h3&gt;&lt;p&gt;类似LocalDate和NumberFormat的类使用静态工厂方法来构造对象。&lt;/p&gt;
&lt;figure c</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Java/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术读书笔记ch4</title>
    <link href="https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/"/>
    <id>https://ericzikun.github.io/2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/</id>
    <published>2020-08-15T14:37:38.000Z</published>
    <updated>2020-10-01T15:00:13.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java核心技术-读书笔记："><a href="#Java核心技术-读书笔记：" class="headerlink" title="Java核心技术 读书笔记："></a>Java核心技术 读书笔记：</h1><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><h2 id="对象的理解："><a href="#对象的理解：" class="headerlink" title="对象的理解："></a>对象的理解：</h2><p>每个对象包含对用户公开的特定功能部分和隐藏的实现部分。从根本上来说，只要对象能够满足要求，就不必关心其功能到底如何实现！</p><p>此外，每个对象都保存着描述当前状况的信息——对象的状态。对象状态的改变必须通过调用方法实现（如果不经过调用就可以改变对象状态，只能说明<strong>破坏了封装性！</strong>）</p><h3 id="对象引用："><a href="#对象引用：" class="headerlink" title="对象引用："></a>对象引用：</h3><p>对象的创建通过对象提前写好的构造函数（无参 有参），new+构造才能够创建出一个新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date s = <span class="keyword">new</span> Date()</span><br><span class="line">Date s = k</span><br></pre></td></tr></table></figure><p>实际上，k和s引用的是同一对象（new的Date的对象），指向相同！</p><p>所有的Java对象都存储在<strong>堆</strong>中，当一个对象包含另一个对象变量时，它只是包含着另一个堆对象的指针！</p><h2 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h2><h3 id="三种关系："><a href="#三种关系：" class="headerlink" title="三种关系："></a>三种关系：</h3><ul><li>依赖（uses-a）如Order类使用Account类，是因为Order对象需要访问Account对象查看信用状态！——我们应该尽可能减少相互依赖：减少类之间的<strong>耦合！</strong></li><li>聚合（has-a）包含关系</li><li>继承（is-a）</li></ul><h3 id="公共类和非公共类（是否带public）"><a href="#公共类和非公共类（是否带public）" class="headerlink" title="公共类和非公共类（是否带public）"></a>公共类和非公共类（是否带public）</h3><ul><li>源文件名必须与public类的名字相匹配，在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。</li><li>一般习惯将类单独命名为xxx.java</li></ul><h3 id="类中的public方法："><a href="#类中的public方法：" class="headerlink" title="类中的public方法："></a>类中的public方法：</h3><p>public意味着任何类的任何方法都可以调用这些方法（一共有<strong>4个级别</strong>，后面介绍）</p><h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><ul><li>与类同名</li><li>可以有一个以上的构造器</li><li>构造器可以有任意数目的参数</li><li>构造器没有返回值</li><li>总是伴随<strong>new</strong>一起调用！</li></ul><h3 id="var声明局部变量："><a href="#var声明局部变量：" class="headerlink" title="var声明局部变量："></a>var声明局部变量：</h3><p>Java10中，如果可以从变量的初始值推导出它们的类型，可用var关键字声明局部变量，无须指定类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> harry =  <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>两者等效</p><p>隐式参数和显式参数：</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  salary += raise;</span><br><span class="line">&#125;</span><br><span class="line">number007.raiseSalary(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>其结果是将number007.salary字段新增5%（设置为了一个新值）</p><p>raiseSalary有两个参数，其一是前面的Employee类的对象，第二则是括号中的参数</p><p>关键词<strong>this</strong>指示隐式参数，可以改写：（强烈推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = <span class="keyword">this</span>.salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">this</span>.salary += raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以将实例字段和局部变量明显区分出来</strong></p><h3 id="警告！（初探对象封装性）"><a href="#警告！（初探对象封装性）" class="headerlink" title="警告！（初探对象封装性）"></a>警告！（初探对象封装性）</h3><p>不要编写返回可变对象引用的访问器方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hireDay   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的Date类有更改器方法setTime，也就是说Date对象是可变的，这就破坏了封装性！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = ...;</span><br><span class="line">Date d = harry.getHireDay();</span><br><span class="line"><span class="keyword">double</span> tenYearsInNilliseconds = <span class="number">10</span> * <span class="number">365.25</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">d.setTime(d.getTime() - (<span class="keyword">long</span>)tenYearMilliseconds);</span><br></pre></td></tr></table></figure><p>d和harry.hareDay引用的是同一个对象，对d调用更改器方法就可以自动地改变这个Employee对象的私有状态！</p><img src="https://img-blog.csdnimg.cn/20200827225837425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><p>如果要返回一个可变对象的引用，首先应该对它进行克隆！对象克隆指放在另一个新位置上的对象副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Date)hireDay.clone(<span class="number">0</span>)   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谈谈私有方法和公共方法"><a href="#谈谈私有方法和公共方法" class="headerlink" title="谈谈私有方法和公共方法"></a>谈谈私有方法和公共方法</h3><p>由于公共数据非常危险，应该将数据字段设置为私有的字段（很好理解），对于方法来说，尽管大部分都是公共的，但有些情况下用私有会更好：如，数据的表示发生了变化，这个方法可能会变得难以实现，或者不再需要，这并不重要，重要的是，只要它是私有方法，类的设计者就可以确信它不会在别处使用没所以可以将其删去，如果一个方法是公共的，就不能简单的删除，因为有可能在别处依赖！</p><h3 id="final实例字段"><a href="#final实例字段" class="headerlink" title="final实例字段"></a>final实例字段</h3><ul><li><p>一旦设置，以后就不再修改这个字段，如Employee类中的name字段设置为final，因为在对象构造后，值不会改变，即没有setName方法。</p></li><li><p>对于基本类型或者不可变类的字段尤其有用：</p><p>对于可变的类，可能混乱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringBuilder evaluations;</span><br></pre></td></tr></table></figure><p>它在Employee中初始化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluations = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>final关键字只是表示存储在evaluations变量中的<strong>对象引用</strong>不会再指向另一个不同的StringBuilder对象。不过这个对象依旧是可以更改的！！也就是地址不变而已</p></li></ul><h3 id="静态字段与静态方法"><a href="#静态字段与静态方法" class="headerlink" title="静态字段与静态方法"></a>静态字段与静态方法</h3><p>静态字段：属于类，不属于对象！例如，要给每个员工一个唯一的标识码，这里给Employee类添加一个实例字段id和一个静态字段nextId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  id = nextId;</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当新增员工时，其id是在整个员工nextId基础之上的！也就是说，这个nextId是公共调用的！</p><p>静态常量用的更多，比如Math类下的PI值</p><p>以下两种情况下可以使用静态方法：</p><ul><li>方法不需要访问对象的状态，因为它需要的所有参数都通过显式参数提供，如Math.pow</li><li>方法只需要访问类的静态字，如Employee.getNextId</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java核心技术-读书笔记：&quot;&gt;&lt;a href=&quot;#Java核心技术-读书笔记：&quot; class=&quot;headerlink&quot; title=&quot;Java核心技术 读书笔记：&quot;&gt;&lt;/a&gt;Java核心技术 读书笔记：&lt;/h1&gt;&lt;h1 id=&quot;第四章-对象与类&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="Java" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/Java/"/>
    
    
    <category term="Java" scheme="https://ericzikun.github.io/tags/Java/"/>
    
    <category term="对象" scheme="https://ericzikun.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="类" scheme="https://ericzikun.github.io/tags/%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Java描述整理</title>
    <link href="https://ericzikun.github.io/2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/"/>
    <id>https://ericzikun.github.io/2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/</id>
    <published>2020-07-20T14:36:48.000Z</published>
    <updated>2020-10-01T13:13:05.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h1><h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2. 线性表"></a>2. 线性表</h1><p>​    线性表是一种最常用、最简单，也是一种最基本的数据结构，它是学习其他数据结构的基础。</p><p><strong>线性表</strong>在计算机中可以用$\begin{cases}顺序存储 \\ 链式存储\end{cases}$两种存储结构来表示，其中，顺序存储的线性表成为顺序表，链式存储的线性表成为链表，<strong>链表</strong>又分为：$\begin{cases} 单链表 \\ 双向链表 \\ 循环链表\end{cases}$。</p><p>特点：</p><ul><li><p>对于同一个线性表，其每一个数据元素的值虽然不同，但必须具有相同的数据类型</p></li><li><p>数据元素之间具有一种线性的或“一对一”的逻辑关系：开始结点没有前驱，末尾结点没有后继，除开始和末尾结点外，其余数据元素有且仅有一个前驱和一个后继</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```:将已存在的线性表置为空表</span><br><span class="line"></span><br><span class="line">```isEmpty()```:判空</span><br><span class="line"></span><br><span class="line">```length()```:求线性表长度，即，元素个数</span><br><span class="line"></span><br><span class="line">```get(i)```:读取线性表中第i个数据元素的值。$<span class="number">0</span> \leqslant i \leqslant length-<span class="number">1</span>$</span><br><span class="line"></span><br><span class="line">```insert(i,x)```:在线性表的第i个数据元素之前插入一个值为x的数据元素。</span><br><span class="line"></span><br><span class="line">```remove(i)```:删除并返回线性表中第i个数据元素</span><br><span class="line"></span><br><span class="line"> ```indexOf(x)```:返回线性表中首次出现指定数据元素的位序号，若不包含次数据元素，则返回-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> ```desplay(<span class="number">0</span>)```:输出线性表中的各个数据元素的值</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-1-顺序表"><a href="#2-1-顺序表" class="headerlink" title="2.1 顺序表"></a>2.1 顺序表</h2><p><strong>定义：</strong></p><p>顺序表是用一组<strong>地址连续</strong>的存储单元依次存放线性表中各个数据元素的存储结构。<br><img src="https://img-blog.csdnimg.cn/20200827222236887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x300"  style="zoom:50%;" /></p><p><strong>特点：</strong></p><ul><li>在线性表中逻辑相邻的数据元素，在物理存储元素上也是相邻的</li><li>存储密度高，但需要预先分配“足够应用的存储空间，这可能将会造成存储空间的浪费，其中，$存储密度=\frac{数据元素本身值所需的存储空间}{该数据元素实际所占用的空间}$</li><li>便于随机存取</li><li>不便于插入和删除操作没这事因为在顺序表上进行插入和删除操作会引起大量数据元素的移动</li></ul><p>顺序表的<strong>局限性</strong>：</p><ul><li>若要为顺序表扩充存储空间，则需要重新创建一个地址连续的更大存储空间，并把原有的数据元素都复制到新的存储空间中</li><li>因为顺序表存储要求逻辑上相邻的数据元素，在物理存储位置上也是相邻的，这就使得增删数据元素则会引起平均约一半的数据元素的移动</li></ul><p><strong>总结</strong>——查询快、增删慢！</p><h3 id="顺序表代码实现："><a href="#顺序表代码实现：" class="headerlink" title="顺序表代码实现："></a>顺序表代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] listElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> curlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的线性表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqList</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span>; <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">        listElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//给顺序表分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//置空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span> ;  <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求线性表中数据元素个数，返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取到线性表第i个元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt; curlen-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        <span class="keyword">return</span> listElem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第i个元素之前插入一个值为x的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curlen == listElem.length) <span class="comment">//判断顺序表是否已经满</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"顺序表已满"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = curlen; j &lt; i ; j--)  <span class="comment">//插入后的元素向后移一个存储单位</span></span><br><span class="line">            listElem[j] = listElem[j-<span class="number">1</span>];</span><br><span class="line">        listElem[i] = x;</span><br><span class="line">        curlen++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除并返回线性表中第i个数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; curlen -<span class="number">1</span> ; j++)</span><br><span class="line">            listElem[j] = listElem[j+<span class="number">1</span>];<span class="comment">//删除元素后的元素向前移一个单位</span></span><br><span class="line">        curlen--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回线性表中首次出现指定的数据元素的位序号，若线性表中不包含此数据元素，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;curlen &amp;&amp; !listElem[j].equals(x))</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;curlen)</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出线性表中的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; curlen; j++) &#123;</span><br><span class="line">            System.out.println(listElem[j] + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqList L = <span class="keyword">new</span> SqList(<span class="number">10</span>);</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="string">"a"</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="string">"z"</span>);</span><br><span class="line">        L.insert(<span class="number">2</span>,<span class="string">"d"</span>);</span><br><span class="line">        L.insert(<span class="number">3</span>,<span class="string">"z"</span>);</span><br><span class="line">        System.out.println(<span class="string">"此顺序表为："</span>);</span><br><span class="line">        L.display();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> order = L.indexOf(<span class="string">"z"</span>);</span><br><span class="line">        <span class="keyword">if</span>(order !=-<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">"顺序表中第一次出现的值为'z'的数据元素位置为："</span>+order);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"此顺序表中不包含值为z的属于元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h2><p><strong>定义：</strong></p><p>顺序表适合表示静态线性表，一旦形成以后，就很少进行插入和删除操作，对于需要频繁插入和删除的动态线性表，通常采用<strong>链式存储结构</strong>。</p><p><strong>特点：</strong></p><ul><li>链式结构不要求逻辑上相邻的数据元素在物理上也相邻，它是用一组地址任意的存储单元来存放数据元素的值，故它没有顺序结构某些操作上的局限性，但却失去了随机存取的特点，在链式结构上只能进行顺序存取</li></ul><h3 id="单链表代码实现："><a href="#单链表代码实现：" class="headerlink" title="单链表代码实现："></a><strong>单链表代码实现：</strong></h3><p><strong>Node类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkList类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node head;  <span class="comment">//单链表的头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();<span class="comment">//初始化头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造一个长度为n的单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> Order)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">//初始化头结点，相当于无参构造</span></span><br><span class="line">        <span class="keyword">if</span>(Order)</span><br><span class="line">            create1(n); <span class="comment">//用尾插法顺序建立单链表</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            create2(n); <span class="comment">//用头插法逆位序建立单链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用尾插法顺序建立单链表，其中n为单链表的结点个数  先要编写insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(length(),sc.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用头插法逆位序建立单链表，其中n为单链表的结点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(<span class="number">0</span>,sc.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个已经存在的带头结点单链表置成空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head.data = <span class="keyword">null</span>;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断带头结点的单链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求带头结点的单链表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//新建一个p指针指向head</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++ length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求取带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针指向head，利用其遍历</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"get的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中的第i个结点之前插入一个值为x的新结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针先指向head，利用它遍历到i-1处</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j&lt; i-<span class="number">1</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span> || p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法hh"</span>);</span><br><span class="line"></span><br><span class="line">        Node s = <span class="keyword">new</span> Node(x);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j &lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中查找值为x的结点，返回位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; !p.data.equals(x))&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否含有x这个值</span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不存在值为"</span> + x + <span class="string">"的结点"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出单链表中的所有结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node node = head.next;  <span class="comment">//取出带头结点的单链表中的首结点 node作为指针来遍历</span></span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node.data + <span class="string">""</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();  <span class="comment">//换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LinkList L = <span class="keyword">new</span> LinkList();</span><br><span class="line">        L.display();</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        L.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L.length());</span><br><span class="line">        LinkList L2 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">false</span>);<span class="comment">//头插法</span></span><br><span class="line">        L2.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L2.length());</span><br><span class="line">        LinkList L3 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">true</span>);<span class="comment">//尾插法</span></span><br><span class="line">        L3.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L3.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200827222413646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /></p><h2 id="2-3-链表VS顺序表"><a href="#2-3-链表VS顺序表" class="headerlink" title="2.3 链表VS顺序表"></a>2.3 链表VS顺序表</h2><ul><li>与顺序表相比较,链表比灵活，它既不要求在预先分配的一块连续的存储空间中存储<br>线性表的所有数据元素,也不要求按其逻辑顺序来分配存储单元,可根据需要进行存储空间<br>的动态分配!因此,当线性表的长度变化较大或长度难以估计时,用链表。但在线性表的<br>长度基本可预计且变化较小的情况下,宜用顺序表,因为链表的存储密度较顺序表的低,且<br>顺序表具有随机存取的优势!</li><li>在顺序表中按序号访问第i个数据元素时的时间复杂度为O(1),而在链表中做同样操<br>作的时间复杂度为O(n)所以若要经常对线性表按序号访问数据元素时,顺序表要优先<br>链表;但在顺序表上做插入和删除操作时,需要平均移动一半的数据元素,而在链表上做插<br>入和删除操作,不需要移动任何数据元素,虽然也要查找插入或删除数据元素的位置,但由<br>于主要是比较操作,所以从这个角度考虑,链表要优先于顺序表</li><li>总之,链表比较<strong>灵活,**</strong>插入和删除操作的效率较高,但链表的空间利用率较低,适合于实<br>现<strong>动态的线性表</strong>;顺序表实现比较简单,因为任何高级程序语言中都有数组类型,并且空间<br>利用率也较高,可高效地进行随机存取,但顺序表不易扩充,插入和删除操作的效率较低,适<br>合于实现相对“稳定”的静态线性表。两种存储结构各有所长,各种实现方法也不是一成不<br>变的。在实际应用时,必须以这些基本方法和思想为基础,抓住两者各自的特点并结合具体<br>情况,加以创造性地灵活应用和改造,用最合适的方法来解决问题。</li></ul><h1 id="3-栈与队列"><a href="#3-栈与队列" class="headerlink" title="3.栈与队列"></a>3.栈与队列</h1><p>定义：</p><p>栈和队列可被看成是<strong>两种操作受限</strong>的特殊线性表，其特殊性体现在它们的插入和删除操作都是控制在线性表的一端或两端进行。</p><h2 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h2><img src="https://img-blog.csdnimg.cn/20200827222518643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x300"  style="zoom:50%;" /><p>栈是一种特殊的线性表，栈中的元素以及数据元素间的逻辑关系和线性表相同，区别在于：</p><ul><li>线性表的插入和删除操作可以在表的任意位置进行，而栈只允许在表的尾端进行</li></ul><p>特点：</p><ul><li><p>先进后出(First In Last Out)</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```：置空</span><br><span class="line"></span><br><span class="line">```isEmpty()```：判空</span><br><span class="line"></span><br><span class="line">```length()```：返回栈中元素个数</span><br><span class="line"></span><br><span class="line">```peek()```：读取栈项元素并返回其值，若栈为空，则返回<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">```push()```：入栈——将数据元素x压入栈顶</span><br><span class="line"></span><br><span class="line">```pop()```：出栈——删除并返回栈顶元素</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-1-1-顺序栈"><a href="#3-1-1-顺序栈" class="headerlink" title="3.1.1 顺序栈"></a>3.1.1 顺序栈</h3><p>类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] stackElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;<span class="comment">//在非空栈中，top始终指向栈顶元素的下一个存储位置，栈为空时，top=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的空站</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        stackElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为栈分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求栈中数据元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> stackElem[top-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == stackElem.length)<span class="comment">//这里判断一下Object数组的长度和top是否相等，与sqStack的length()区别开</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈已满"</span>);<span class="comment">//跑出异常</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stackElem[top++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> stackElem[--top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出栈中所有数据元素，从栈顶元素到栈底</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.print(stackElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqStack sqStack = <span class="keyword">new</span> SqStack(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//循环压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sqStack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        sqStack.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222612835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><h3 id="3-1-2-链栈"><a href="#3-1-2-链栈" class="headerlink" title="3.1.2 链栈"></a>3.1.2 链栈</h3><p>定义结点类，与之前一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义链栈类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node top; <span class="comment">//栈顶元素的引用</span></span><br><span class="line">    <span class="comment">//置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素并返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> top.data;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Node p = <span class="keyword">new</span> Node(x);</span><br><span class="line">        p.next = top;</span><br><span class="line">        top = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node p = top; <span class="comment">//p指向被删结点，引用p是因为要返回被删结点值</span></span><br><span class="line">            top = top.next;</span><br><span class="line">            <span class="keyword">return</span> p.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.data.toString() + <span class="string">" "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkStack LS = <span class="keyword">new</span> LinkStack();</span><br><span class="line">        <span class="comment">//批量压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            LS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        LS.display();</span><br><span class="line">        System.out.println(<span class="string">"\n"</span> + <span class="string">"被删除元素为："</span> + LS.pop());</span><br><span class="line">        LS.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222655641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x150"  style="zoom:50%;" /><h2 id="3-2-队列"><a href="#3-2-队列" class="headerlink" title="3.2 队列"></a>3.2 队列</h2><img src="https://img-blog.csdnimg.cn/20200827222740697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x150"  style="zoom:50%;" /><p><strong>定义：</strong></p><p>队列是另一种特殊的线性表，它的特殊性体现在队列只允许在表尾插入数据元素，在表头删除数据元素，所以队列也是一种操作受限的特殊线性表</p><p><strong>特点：</strong></p><ul><li><p>先进先出</p></li><li><p>几个基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;isEmpty()&#96;&#96;&#96;：置空</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;length()&#96;&#96;&#96;：求取队列数据元素个数</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;peek()&#96;&#96;&#96;：读取队首元素并返回其值。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;offer()&#96;&#96;&#96;：入队操作，将数据元素x插入到队列中使其成为新的队尾元素。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;poll()&#96;&#96;&#96;：出队操作，删除队首元素并返回其值，若队列为空，则返回null。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public interface IQueue &#123;</span><br><span class="line">  public void clear();</span><br><span class="line">  public boolean isEmpty();</span><br><span class="line">  public int length();</span><br><span class="line">  public Object peek();</span><br><span class="line">  public void offer(Object x) throws Exception;</span><br><span class="line">  public Object poll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-1-顺序队列"><a href="#3-2-1-顺序队列" class="headerlink" title="3.2.1 顺序队列"></a>3.2.1 顺序队列</h3><p>​    与顺序栈类似，在顺序队列的存储结构中，需要分配一块地址连续的存储区域来一次存放队列中从队首到队尾的所有元素。这样也可以用一维数组来表示，假设数组名为queueElem，数组最大容量为maxSize，由于队列的入队操作只能在当前队列的队尾进行，而出队操作只能在当前队列的队首进行，所以需加上变量front和rear来分别指示队首队尾元素在数组中的位置，其初始值都为0，在非空队列中，front指向队首元素，rear指向队尾元素的下一个存储位置 </p><img src="https://img-blog.csdnimg.cn/20200827222820890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x300"  style="zoom:50%;" /><p><strong>假溢出：</strong> </p><p>​    从图3.16(d)可以看出,若此时还需要将数据元素H入队,H应该存放于rear=6的位<br>置处,顺序队列则会因数组下标越界而引起“溢出”,但此时顺序队列的首部还空出了两个数<br>据元素的存储空间。因此,这时的“溢出”并不是由于数组空间不够而产生的溢出。这种因<br>顺序队列的多次人队和出队操作后出现有存储空间,但不能进行人队操作的溢出现象称为<br><strong>”假溢出”</strong>。<br>​    要解决“假溢出”问题,最好的办法就是把顺序队列所使用的存储空间看成是一个逻辑<br>上首尾相连的循环队列。当rear或 front到达 maxSize-1后,再加1就自动到0。这种转<br>换可利用Java语言中对整型数据求模(或取余)运算来实现,即令<strong>rear=(rear+1)%</strong><br><strong>maxSize</strong>。显然,当rear= maxSize-1时,rear加1后,rear的值就为0。这样,就不会出现<br>顺序队列数组的头部有空的存储空间,而队尾却因数组下标越界而引起的假溢出现象。</p><p><strong>循环顺序队列类：</strong></p><img src="https://img-blog.csdnimg.cn/20200827222849424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x200"  style="zoom:50%;" /><p>图中会发现一个问题：即循环顺序队列的判空和判满条件都是front==rear</p><p>解决循环顺序队列的队空和队满的判断问题常采用以下3种方法：</p><ol><li>少用一个存储单元</li></ol><img src="https://img-blog.csdnimg.cn/20200827222924816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><ol start="2"><li><p>设置一个标志变量</p><p>​    在程序设计过程中引进一个标志变量fag,其初始值置为0,每当入队操作成功后就置<br>flag=1;每当出队操作成功后就置fag=0,则此时队空的判断条件为: <code>front==rear&amp;&amp;flag==0</code>,而队满的判断条件为:<code>front==rear&amp;&amp;flag==1</code>。</p></li><li><p>设置一个计数器</p><p>​    在程序设计过程中引进一个计数变量num,其初始值置为0,每当入队操作成功后就将<br>计数变量num的值加1;每当出队操作成功后就将计数变量num的值减1,则此时队空的<br>判断条件为:<code>num==0</code>,而队满的判断条件为:<code>num&gt;0&amp;&amp;front==rear</code></p></li></ol><p><strong>循环队列实现：</strong></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueimpl</span> <span class="keyword">implements</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front,rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSqQueueimpl</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>; <span class="comment">//队首、队尾初始化为0</span></span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为队列分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear; <span class="comment">//判空采用第一种方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + queueElem.length) % queueElem.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front ==rear)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear+<span class="number">1</span>) % queueElem.length == front) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"队列已满"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            queueElem[rear] = x;</span><br><span class="line">            rear = (rear+<span class="number">1</span>) % queueElem.length;<span class="comment">//以免假溢出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == rear) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object t = queueElem[front];</span><br><span class="line">            front = (front + <span class="number">1</span>) % queueElem.length;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i != rear; i= (i+<span class="number">1</span>)%queueElem.length) &#123;</span><br><span class="line">                System.out.print(queueElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"此队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        CircleSqQueueimpl circleSQ= <span class="keyword">new</span> CircleSqQueueimpl(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"长度为："</span> + circleSQ.length() + <span class="string">"判空"</span> + circleSQ.isEmpty());</span><br><span class="line">        circleSQ.display();</span><br><span class="line">        <span class="comment">//批量导入数据元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            circleSQ.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        circleSQ.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827223222394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-绪论&quot;&gt;&lt;a href=&quot;#1-绪论&quot; class=&quot;headerlink&quot; title=&quot;1. 绪论&quot;&gt;&lt;/a&gt;1. 绪论&lt;/h1&gt;&lt;h1 id=&quot;2-线性表&quot;&gt;&lt;a href=&quot;#2-线性表&quot; class=&quot;headerlink&quot; title=&quot;2. 线性</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="数据结构" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="专业课" scheme="https://ericzikun.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    <category term="数据结构" scheme="https://ericzikun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="链表" scheme="https://ericzikun.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="栈" scheme="https://ericzikun.github.io/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="https://ericzikun.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>css+div布局总结</title>
    <link href="https://ericzikun.github.io/2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-09T11:28:32.000Z</published>
    <updated>2020-10-01T11:52:11.287Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 几个月前花了一周多学了点前端，但也只是浅尝辄止，实战中还是由于css底子不好导致了很多布局的问题，故沉下心来再次把css复习了一遍，理顺了实战中遇到的一些布局问题，包括多浏览器、不同尺寸屏幕的适配问题也更加清晰了许多，有关适配性的经验将会在另一博客中着重总结，此博客主要针对css的基础布局进行梳理，方便复查！期间，也发现了一个查前端文档的网站：MDN</p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><img src="https://img-blog.csdnimg.cn/20200709190629883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x300"  style="zoom:50%;" /><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>以当前为参照物移动指定的距离<br>注意：相对定位，被定位的元素会占据原有的物理位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            /*相对定位</span><br><span class="line">                以当前为参照物移动指定的距离</span><br><span class="line">                注意：相对定位，被定位的元素会占据原有的物理位置</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*移动定位元素*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*bottom*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*right*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190735302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li><p>绝对定位的元素不会占据原有的物理位置</p></li><li><p>以其他元素作为参考物移动指定距离的定位方式</p></li></ul><p>  关于绝对定位的参考点：</p><ul><li><ol><li>如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</li></ol></li><li><ol start="2"><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ol></li><li><ol start="3"><li>如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            position: absolute; </span><br><span class="line">            /*top:200px;</span><br><span class="line">            left:200px;*/</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190817438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>加上</p><p>top:200px;</p><p>left:200px;</p><p>参考点为(0,0)绝对左上角，而不是红色框左上角<br><img src="https://img-blog.csdnimg.cn/20200709190850638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>如果外层元素没有定位，但是外外层（爷爷类）有定位，则有：</p><ul><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ul><p>子类参考点为外外层（爷爷类）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">green</span>;</span></span><br><span class="line">            /*绝对定位：</span><br><span class="line">                绝对定位的元素不会占据原有的物理位置</span><br><span class="line">                以其他元素作为参考物移动指定距离的定位方式</span><br><span class="line">                关于绝对定位的参考点：</span><br><span class="line">                1.如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</span><br><span class="line">                2.如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</span><br><span class="line">                3.如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*top:200px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*left:200px;*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aquamarine;</span><br><span class="line"><span class="css">            <span class="comment">/*父类做一个定位*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position:relative;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:fuchsia</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;   <span class="comment">/*son的参考点是father，但前提是father这一层（外层）必须有定位*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190932333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />如果son的father没有定位，box2也没定位，则其absolute参考点为body：<img src="https://img-blog.csdnimg.cn/20200709191013975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>垂直滚动条：</p><p>background:palevioletred;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:palevioletred</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0px</span>;  <span class="comment">/*距离右边为0*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:300px</span>;  <span class="comment">/*距离顶部为0*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191035959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h2><img src="https://img-blog.csdnimg.cn/20200709191051684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>注意：只能支持<strong>定位元素</strong>！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>z-index设置定位元素z轴的距离(定位元素的显示顺序)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#two</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:999</span>; <span class="comment">/*这里设置1仍然是黄色盖住红色*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：z-index属性只支持定位元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191119163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>首先看代码先后顺序，渲染的是one在前，two在后，所以黄色会盖住红色，z-index可以提高层级别</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>回顾浮动：任意元素一旦浮动，display都会失效<br><img src="https://img-blog.csdnimg.cn/20200709191135936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><ul><li>div:默认为块状元素：具有宽高属性，并且独占一行</li><li>Span:默认为行内元素：没有宽高属性，不会独占一行</li></ul><h2 id="块状-amp-行内元素的互换："><a href="#块状-amp-行内元素的互换：" class="headerlink" title="块状&amp;行内元素的互换："></a>块状&amp;行内元素的互换：</h2><ul><li><ol><li>如果将div设置为行内元素<code>display: inline</code>，则会使得div无宽高属性，且不会独占一行！</li></ol></li><li><ol start="2"><li>也可以将span设置为块状元素:<code>display:block</code>，则可以有宽高属性，独占一行！</li></ol></li><li><ol start="3"><li>如果用了很多块状元素div，但是会独占一行，如果不想独占一行（想并列显示），则要将其改为 行内块元素：<code>display:inline-block</code>——既有宽高属性 且不会独占一行，但涉及图文混排，故此方式用的较少，浮动使用较多<img src="https://img-blog.csdnimg.cn/20200709191202408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ol></li></ul><ul><li>接着将div的display改为表格属性<code>display:table-cell</code>,变为单元格形式，<img src="https://img-blog.csdnimg.cn/20200709191220222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ul><h2 id="隐藏元素："><a href="#隐藏元素：" class="headerlink" title="隐藏元素："></a>隐藏元素：</h2><ul><li><code>display:none</code>可以将div块进行隐藏，并且不会占用原物理空间（类似：<code>visibility:hidden</code>隐藏效果，但仍占用物理空间）</li><li>如果元素是使用visibility设置的隐藏方式，那么只能用<code>visibility：visible</code>的方式来让元素显示;对应的，<code>display:none</code>要用<code>display:block</code>来显示！</li><li>总结：visibility:设置元素是否显示<pre><code>visible 显示hidden隐藏</code></pre> 注意：<code>visibility</code>和<code>display:none</code>的区别：<code>visibility</code>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<code>display:none</code>的隐藏方式是彻底隐藏该元素的内容和位置。</li><li>应用：网页中鼠标未选中时隐藏，选中时显示 展开<img src="https://img-blog.csdnimg.cn/202007091913048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x500"  style="zoom:50%;" /></li></ul><img src="https://img-blog.csdnimg.cn/20200709191407349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /><h2 id="设置透明度：opacity-0"><a href="#设置透明度：opacity-0" class="headerlink" title="设置透明度：opacity: 0;"></a>设置透明度：<code>opacity: 0;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div,span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为行内元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*设置元素为行内块元素，具有宽高属性，并且不会独占一行*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline-block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: table-cell;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: none;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素，占据原有物理位置*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility: hidden;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*如果元素是使用visibility设置的隐藏方式，那么只能用visibility：visible的方式来让元素显示*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility:visible;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                visibility:设置元素是否显示</span><br><span class="line">                    visible 显示</span><br><span class="line">                    hidden隐藏</span><br><span class="line"><span class="css">                   注意：<span class="selector-tag">visibility</span>和<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的区别：<span class="selector-tag">visibility</span>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的隐藏方式是</span></span><br><span class="line">                   测地隐藏该元素的内容和位置。</span><br><span class="line"></span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*设置元素透明度*/</span></span></span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为块状元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line">            background: fuchsia;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--div:块状元素：具有宽高属性，并且独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内元素：没有宽高属性，不会独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><img src="https://img-blog.csdnimg.cn/2020070919145770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="预备知识：-1"><a href="#预备知识：-1" class="headerlink" title="预备知识："></a>预备知识：</h2><p>盒子与盒子之间的距离——margin：外间距</p><p>盒子内部的content与边框的间距——padding：内边距</p><p>边框也有一个厚度：border：边框</p><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p><img src="https://img-blog.csdnimg.cn/20200709191516417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="快速设置："><a href="#快速设置：" class="headerlink" title="快速设置："></a>快速设置：</h3><img src="https://img-blog.csdnimg.cn/20200709191540300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>顺序：上右下左<code>margin:10px 10px 10px 10px</code><br>上下20px，左右都为10px<code>margin:20px 10px 20px</code><br>上下20px，左右为10px<code>margin:20px  10px</code></p><h3 id="居中显示："><a href="#居中显示：" class="headerlink" title="居中显示："></a>居中显示：</h3><p>如果想要div居中，可以<code>margin:10px auto;</code>实现<strong>块状元素</strong>居中显示，如果改为浮动，则<code>display</code>失效,无法居中<br><img src="https://img-blog.csdnimg.cn/20200709191629876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h3 id="外边距合并："><a href="#外边距合并：" class="headerlink" title="外边距合并："></a>外边距合并：</h3><img src="https://img-blog.csdnimg.cn/20200709191648472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />几个特点：<ul><li><ol><li>块级元素的垂直相邻外边距会合并</li></ol></li><li><ol start="2"><li>行内元素实际上不占上下外边距，行内元素的的左右外边距不合并</li></ol></li><li><ol start="3"><li>浮动元素的外边距也不会合并</li></ol></li><li><ol start="4"><li>允许指定负的外边距值，不过使用时要小心</li></ol></li></ul><p>取两者最大值，而非之和！</p><p>合并只有上下</p><img src="https://img-blog.csdnimg.cn/20200709191716350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h3 id="子父类div："><a href="#子父类div：" class="headerlink" title="子父类div："></a>子父类div：</h3><p><img src="https://img-blog.csdnimg.cn/20200709191746352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="margin负值："><a href="#margin负值：" class="headerlink" title="margin负值："></a>margin负值：</h3><img src="https://img-blog.csdnimg.cn/20200709191806242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*当前元素与其他元素之间的距离 外间距*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-bottom:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:10px 10px 10px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aqua;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blueviolet;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#block</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="comment">/*实现让块状元素居中显示*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            margin-top: -100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            margin-bottom: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*加一像素红色 实线边框*/</span></span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>顶部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>左侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"self"</span>&gt;</span>当前元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>右侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以设置块状元素居中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含式外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h2><p>设置为<code>border: 5px solid red</code></p><img src="https://img-blog.csdnimg.cn/20200709191835407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>每条边分开设置：</p><p><img src="https://img-blog.csdnimg.cn/20200709191900114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>统一设置（大多数情况下）：</p><p><img src="https://img-blog.csdnimg.cn/20200709191920183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>双线注意：</p><p><img src="https://img-blog.csdnimg.cn/20200709191940246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p><img src="https://img-blog.csdnimg.cn/20200709191955894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>总结：</p><p>padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以在书写宽高时注意减掉内边距和边框(标准盒模型)</p><p>宽高指的是content的！回顾如图：<br><img src="https://img-blog.csdnimg.cn/20200709192010685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-bottom: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px 15px;*/</span></span></span><br><span class="line">            padding: 10px 20px 30px 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            clear: both;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以各位在书写宽高时注意减掉内边距和边框(标准盒模型)</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="怪异盒模型："><a href="#怪异盒模型：" class="headerlink" title="怪异盒模型："></a>怪异盒模型：</h2><p><img src="https://img-blog.csdnimg.cn/20200709192048711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200709192108725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>怪异盒<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置怪异盒*/</span></span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="div-css布局注意事项"><a href="#div-css布局注意事项" class="headerlink" title="div+css布局注意事项"></a>div+css布局注意事项</h2><p><img src="https://img-blog.csdnimg.cn/20200709192124195.png" alt=" "></p><p>参考视频：<br>b站：<a href="https://www.bilibili.com/video/BV18J411S7tZ?p=1" target="_blank" rel="noopener">一天学会DIV+CSS布局</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 几个月前花了一周多学了点前端，但也只是浅尝辄止，实战中还是由于css底子不好导致了很多布局的问题，故沉下心来再次把css复习了一遍，理顺了实战中遇到的一些布局问题，包括多浏览器、不同尺寸屏</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="React" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/React/"/>
    
    
    <category term="css" scheme="https://ericzikun.github.io/tags/css/"/>
    
    <category term="布局" scheme="https://ericzikun.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
    <category term="盒子模型" scheme="https://ericzikun.github.io/tags/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Convlstm时空预测经验之谈（本科毕设）</title>
    <link href="https://ericzikun.github.io/2020/05/16/Convlstm%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    <id>https://ericzikun.github.io/2020/05/16/Convlstm%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/</id>
    <published>2020-05-16T05:08:46.000Z</published>
    <updated>2020-10-01T11:52:02.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Convlstm新手实战"><a href="#Convlstm新手实战" class="headerlink" title="Convlstm新手实战"></a>Convlstm新手实战</h1><p>&nbsp;&nbsp;&nbsp;毕设临近截止，故写一篇心得以供新手学习，理论在知乎上有很多介绍的不错的文章，这里强烈推荐微信公众号：AI蜗牛车，这位东南老哥写了时空预测系列文章，能够帮助了解时空领域模型的演变，同时也向他请教了一些训练技巧。<br/><br>&nbsp;&nbsp;&nbsp;我的本科毕设大概是这样的：先计算某个区域的风险，计算得到一段时间的风险矩阵，这里用的是自己的模型去计算的，数据如何生成，本文不做赘述，主要讲解如果通过每个时刻下的矩阵数据去预测未来的矩阵。</p><h2 id="回顾理论基础"><a href="#回顾理论基础" class="headerlink" title="回顾理论基础"></a>回顾理论基础</h2><p>&nbsp;&nbsp;&nbsp;在ConvLSTM中，网络用于捕获数据集中的时空依赖性。ConvLSTM和FC-LSTM之间的区别在于，ConvLSTM将LSTM的前馈方法从Hadamard乘积变为卷积，即input-to-gate和gate-to-gate两个方向的运算均做卷积,也就是之前W和h点乘改为卷积（*）。 ConvLSTM的主要公式如下所示：<br><img src="https://imgkr.cn-bj.ufileos.com/af144a73-cd4d-4734-bf2a-58e4774f3c32.png"  style="zoom:50%;" /></p><p>详细可参考：<a href="https://mp.weixin.qq.com/s?__biz=MzA4ODUxNjUzMQ==&mid=2247484743&idx=2&sn=10387417121b70ec27e311f9c5b0e493&scene=19#wechat_redirect" target="_blank" rel="noopener">【时空序列预测第二篇】Convolutional LSTM Network-paper reading</a></p><h2 id="官方keras案例"><a href="#官方keras案例" class="headerlink" title="官方keras案例"></a>官方keras案例</h2><p>&nbsp;&nbsp;&nbsp;实战过的朋友应该了解，关于Convlstm，可参考的案例非常少，基本上就集中在keras的官方案例（电影帧预测——视频预测<a href="https://keras.io/examples/conv_lstm/" target="_blank" rel="noopener">官方案例</a>）<a href="https://zhuanlan.zhihu.com/p/124106729" target="_blank" rel="noopener">知乎解说</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS84MC92Mi1jNzZhYzNkMmViMjI3YmJjYmU4MmM3ZjcyNTc3NzJmMl8xNDQwdy5qcGc?x-oss-process=image/format,png#pic_center#pic_center =300x400"  style="zoom:50%;" /></p><p>官方模型核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional <span class="keyword">import</span> Conv3D</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional_recurrent <span class="keyword">import</span> ConvLSTM2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line">seq = Sequential()</span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   input_shape=(<span class="literal">None</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">1</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(Conv3D(filters=<span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">               activation=<span class="string">'sigmoid'</span>,</span><br><span class="line">               padding=<span class="string">'same'</span>, data_format=<span class="string">'channels_last'</span>))</span><br><span class="line">seq.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'adadelta'</span>)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;模型结构可以如官方一样：用前20个预测后20个，这里先解释一下官方模型结构的维度：<br><img src="https://img-blog.csdnimg.cn/20200516110841812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp; （如已熟悉，请跳过）对于新手来说，看上去似乎很复杂，其实弄清楚后会发现不过如此，请耐心听我讲完：先从第一个Convlstm说起，输入的是(None, 40, 40, 1)，输出的维度（None，None，40，40，40），这里的输入维度（<code>input_shape</code>）其实是每个时刻下的输入，如下图：比如这里用20个预测后20个，那么整理的第一个样本就是0至19个矩阵，label（标签）就是20至39个矩阵，每一个矩阵维度为（40，40，1）最后的这个1为通道数，如果是图片，那就对应多通道了，那么整理的样本X就应该是（样本个数,20，40，40，1），对应标签Y就是（样本个数，20，40，40，1）这样每个样本和标签才能一一对应，由于<code>reurn_sequence</code>为<code>true</code>，即每个时刻单元都有输出，也就是20个预测20个嘛，那么第一层的Convlstm输出的维度就是（None，None，40，40，40）这里第一个None是batchsize毫无疑问，第二个其实就是20，至于最后一个维度是40，和<code>filter</code>个数直接相关，（因为一个卷积核对样本做一次特征提取，40个就有40个特征提取）。<br/><br>&nbsp;&nbsp;&nbsp;接下来N层Convlstm均如此，最后为啥要接一个Conv3d，很好解释，因为你的label维度是（样本个数，20，40，40，1），这里的最后维度还得回归到1啊，所以Conv3d的<code>filter</code>这才设置为了1，以此类推，如果你的一个数据是三通道的图像，这里filter自然就是3了，一定要和label维度对应即可。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8yMmNiMTU0ZC05MTJmLTQwZWMtYjMxZS1kZjAyNjMxZGE4MGEucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /></p><h3 id="ConvLSTM参数介绍"><a href="#ConvLSTM参数介绍" class="headerlink" title="ConvLSTM参数介绍"></a>ConvLSTM参数介绍</h3><ul><li><strong>filters:</strong> 卷积核的数目</li><li><strong>kernel_size：</strong> 卷积核大小（1乘1的state-to-state kernel size很难抓住时空移动的特征，所以效果差很多，所以更大的size更能够获取时空的联系）</li><li><strong>strides：</strong> (1,1)为卷积的步长，即卷积核向右和向下一次移动几格，默认步长为1</li><li><strong>padding：</strong> 补0，为“valid”或 “same”。若要保证卷积核提取特征后前后维度一致，那就“same”</li><li><strong>data_format:</strong> 即红绿蓝三个通道(channel)是在前面还是在后面，channels_last (默认) （width, height, channel）或 channels_first (channel, width, height) 之一, 输入中维度的顺序</li><li><strong>activation：</strong> 激活函数，即下图中的RELU层，为预定义的激活函数名，如果不指定该参数，将不会使用任何激活函数（即使用线性激活函数：a(x)=x）</li></ul><h2 id="模型改造"><a href="#模型改造" class="headerlink" title="模型改造"></a>模型改造</h2><p>&nbsp;&nbsp;&nbsp;不过我由于数据量比较少，我把模型结构改造成了20个预测1个（样本数较少的童鞋可以参考），在convlstm最后一个层的<code>reurn_sequence</code>参数改为<code>flase</code>、Conv3d改2d即可。<br/><br>&nbsp;&nbsp;&nbsp;其实了解了<code>reurn_sequence</code>这个参数后，改造就顺理成章了，在最后一个Convlstm这里将<code>reurn_sequence</code>改为<code>false</code>，那么就只在最后一个单元有输出了，第二个None维度就没了，然后再把Conv3d改为2d即可，这样就要求整理数据集的时候，样本和标签分别整理成这样：(样本数，20，40，40，1) 和（样本数，40，40，1），也就是20个预测1个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional <span class="keyword">import</span> Conv3D ,Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional_recurrent <span class="keyword">import</span> ConvLSTM2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">from</span> keras_contrib.losses <span class="keyword">import</span> DSSIMObjective</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">seq = Sequential()</span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   input_shape=(<span class="literal">None</span>, <span class="number">60</span>, <span class="number">93</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">False</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(Conv2D(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">               activation=<span class="string">'sigmoid'</span>,</span><br><span class="line">               padding=<span class="string">'same'</span>, data_format=<span class="string">'channels_last'</span>))</span><br><span class="line"></span><br><span class="line">seq.compile(loss= DSSIMObjective(kernel_sizesize=<span class="number">3</span>), optimizer=<span class="string">'adadelta'</span>)</span><br><span class="line">seq.summary()</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8xZjcyYWE3Ny1jNTc0LTQ4YWUtODhjOC1iNzEyYzg2ZWY5YWIucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9kNGM3ODA4Mi02MmI5LTRlNGMtYTg2Yi05M2YzNWIwMzdiZDkucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /><h3 id="模型经验及调参"><a href="#模型经验及调参" class="headerlink" title="模型经验及调参"></a>模型经验及调参</h3><p>&nbsp;&nbsp;&nbsp;先看看结果图吧，随便抽一张示意一下，预测的点相对比较准确，但是模糊度还没解决掉，毕竟只训练了十几分钟，有这个效果也还算可以了：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9kYjE4NjhkYy05Zjg0LTQ5ZWQtOTA5NS0zYmJhZjU2NjJhMTUucG5n?x-oss-process=image/format,png#pic_center =600x800"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp; 整个模型看上去不算复杂，但是实际效果比较差，有以下几个要稍微注意的地方：</p><ul><li>1.矩阵数据是否过于稀疏，如果0太多，建议先转成图片再做训练，否则效果会奇差无比，原因可能是求梯度的时候网络出了问题，直接崩了。</li><li>2.如果输入是图片张量，需要提前做好归一化，我用的简单处理，直接元素除255.0，显示的时候再乘回来即可，可能有一丢丢颜色误差，但是不太影响。</li><li>3.预测图片出现模糊大概有以下几个原因：<br/><br>（1）网络结构不够优（继续调就完事了），往往这种情况下，得到的预测点也不会太准确。<br/><br>（2）由于是多个时刻下的数据去预测一个，那么必然存在信息叠加（融合），这样导致的模糊是不可避免的，如果数据量很大，那么可以采用20帧预测20帧这样的结构，应该会有效减缓一点模糊程度。<br/><br>（3）<strong>重要：</strong> 损失函数若使用MSE则会默认模糊，如果换成SSIM（结构相似性）则会明显改观（亲测有效）<br/><br>&nbsp;&nbsp;&nbsp;在模糊处理方面，我也想尝试改进，但是还没有找到比较好的方式，蜗牛车老哥建议调小学习率，训练时间长一点，亲测有效！反卷积也尝试了，但是效果不佳，后期准备使用TrajGRU来实战（预测解码模块采用了上采样层理论上应该会提高清晰度）。<br/></li></ul><p>&nbsp;&nbsp;&nbsp;模型调参的过程其实是最无聊也最艰辛的，无非就是改改层结构，多一层少一层，改一下filter、batchsize个数，时空预测这种图像的预测和别的领域有一点不同，文本的只要acc、f1-score上去了就行，所以可以用grid search来自动化调参，但是图像预测还必须得肉眼去看效果，否则结果真可能是千差万别，loss看上去已经很低了但是效果很差的情况比比皆是，尝试多换几种loss来实验，后面也还可以尝试自定义loss看效果，整个调参过程确实是不断试错的过程，两个字：”炼丹”!</p><p>————————下图为2020.6.1更新,毕设最新效果，采用trick—————————<br><img src="https://img-blog.csdnimg.cn/20200607163042368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Convlstm新手实战&quot;&gt;&lt;a href=&quot;#Convlstm新手实战&quot; class=&quot;headerlink&quot; title=&quot;Convlstm新手实战&quot;&gt;&lt;/a&gt;Convlstm新手实战&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;毕设临近截止，故写一篇心</summary>
      
    
    
    
    <category term="深度学习" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Convlstm" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Convlstm/"/>
    
    
    <category term="深度学习" scheme="https://ericzikun.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Convlstm" scheme="https://ericzikun.github.io/tags/Convlstm/"/>
    
    <category term="时空预测" scheme="https://ericzikun.github.io/tags/%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B/"/>
    
    <category term="时序" scheme="https://ericzikun.github.io/tags/%E6%97%B6%E5%BA%8F/"/>
    
    <category term="Lstm" scheme="https://ericzikun.github.io/tags/Lstm/"/>
    
    <category term="CNN" scheme="https://ericzikun.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>React项目迅速搭建+antd传文件+nginx反向代理</title>
    <link href="https://ericzikun.github.io/2020/05/16/React%E9%A1%B9%E7%9B%AE%E8%BF%85%E9%80%9F%E6%90%AD%E5%BB%BA-antd%E4%BC%A0%E6%96%87%E4%BB%B6-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://ericzikun.github.io/2020/05/16/React%E9%A1%B9%E7%9B%AE%E8%BF%85%E9%80%9F%E6%90%AD%E5%BB%BA-antd%E4%BC%A0%E6%96%87%E4%BB%B6-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2020-05-16T02:00:14.000Z</published>
    <updated>2020-10-01T13:03:40.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）"><a href="#React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）" class="headerlink" title="React 入门+实战（antd上传文件接受返回+部署服务器Nginx反向代理）"></a>React 入门+实战（antd上传文件接受返回+部署服务器Nginx反向代理）</h1><h2 id="React-项目迅速搭建"><a href="#React-项目迅速搭建" class="headerlink" title="React 项目迅速搭建"></a>React 项目迅速搭建</h2><h5 id="前期工作："><a href="#前期工作：" class="headerlink" title="前期工作："></a>前期工作：</h5><ul><li>1、必须安装nodejs      注意：安装nodejs稳定版本</li></ul><ul><li><p>2、安装cnpm：用cnpm替代npm</p><pre><code>安装cnpm:    npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></li><li><p>3、用yarn替代npm</p></li></ul><pre><code>yarn的安装：    第一种方法：参考官方文档https://yarn.bootcss.com/    第二种方法：cnpm install -g yarn  或者 npm install -g yarn</code></pre><h5 id="搭建项目（初始化）："><a href="#搭建项目（初始化）：" class="headerlink" title="搭建项目（初始化）："></a>搭建项目（初始化）：</h5><p>搭建React开发环境的第一种方法（老-推荐）：</p><pre><code>https://reactjs.org/docs/create-a-new-react-app.html1. 再次提醒：必须要安装nodejs     注意：安装nodejs稳定版本     2. 安装脚手架工具   （单文件组件项目生成工具）   只需要安装一次    npm install -g create-react-app   /  cnpm install -g create-react-app3. 创建项目   （可能创建多次）    找到项目要创建的目录：    create-react-app reactdemo4. cd  到项目里面        cd  reactdemo    npm start          或者   yarn start运行项目    npm run build    或者     yarn build 生成项目（个人喜欢用yarn）</code></pre><h5 id="项目目录结构："><a href="#项目目录结构：" class="headerlink" title="项目目录结构："></a>项目目录结构：</h5><img src="https://img-blog.csdnimg.cn/20200515225213441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x400"  style="zoom:50%;" /><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般更多需要关注的在于src文件，assets可以放css文件、图片等素材，component就是自定义的组件，比如这里我定义了Home和Result组件，这两个组件最终在src下的App.js根组件中挂载，这里的两个组件其实是我写的两个页面，并且在根组件App.js中实现路由跳转。</p><h5 id="组件结构："><a href="#组件结构：" class="headerlink" title="组件结构："></a>组件结构：</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; React有两种写组件的方式，一种用class extends..来写，另一种用函数式来写，本人较亲耐于函数式，简洁，并且没有this指向的问题，也就是React 后更新的hook特性，第一种写组件的方式中，初始化变量需要：this.setState()，而hook特性带来了useState（）,写法更加简洁，容易理解。</p><ul><li>hook：用const定义function方法来替换以往class定义的方式</li><li>useState()：初始化一个变量——<code>const [variable,setVariable] = useState(variable0)</code><br>后面变量赋值直接用:<code>setVarible(newVariable)</code>,即可改变变量状态</li><li>useEffect()——相当于是以往的生命周期函数： componentDidMount（）；当组件被挂载时，立即启动useEffect，而useEffect的参数是一个function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (    </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><h2 id="antd实战"><a href="#antd实战" class="headerlink" title="antd实战"></a>antd实战</h2><h5 id="upload传文件"><a href="#upload传文件" class="headerlink" title="upload传文件"></a>upload传文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Upload, message, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; UploadOutlined &#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> props = &#123;</span><br><span class="line">        name: <span class="string">'file'</span>,<span class="comment">//name得看接口需求，name与接口需要的name一致</span></span><br><span class="line">        action: <span class="string">'/test/upload/file'</span>,<span class="comment">//接口路径</span></span><br><span class="line">        data: &#123;file&#125; ,<span class="comment">//接口需要的参数，无参数可以不写</span></span><br><span class="line">        multiple: <span class="literal">false</span>,<span class="comment">//支持多个文件</span></span><br><span class="line">        showUploadList: <span class="literal">true</span>,<span class="comment">//展示文件列表</span></span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="comment">// "Content-Type": "multipart/form-data"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      ...</span><br><span class="line">            &lt;Upload &#123;...props&#125;</span><br><span class="line">              fileList=&#123;file&#125;</span><br><span class="line">              onChange=&#123;onChange&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;Button type=<span class="string">"Link"</span> shape=<span class="string">"round"</span> size=<span class="string">"large"</span>&gt;</span><br><span class="line">                &lt;UploadOutlined /&gt; Select file</span><br><span class="line">              &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Upload&gt;</span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>upload传文件这里有几个坑：</p><ol><li><p>本地localhost地址要去调服务器下的接口，应该先解决跨域问题：<br>网上有不少直接在package.json中改，这个现在行不通了，亲测要安装<code>http-proxy-middleware</code><br>即：<code>npm install http-proxy-middleware --save</code>或<code>yarn add http-proxy-middleware --save</code><br>安装完后，在src下新建一个setupProxy.js，附上以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// proxy第一个参数为要代理的路由</span></span><br><span class="line">    <span class="comment">// 第二参数中target为代理后的请求网址，changeOrigin是否改变请求头，其他参数请看官网</span></span><br><span class="line">    app.use(createProxyMiddleware(<span class="string">'/test'</span>, &#123;  </span><br><span class="line">      target: 'http://xxx.xx.xxx.xxx...', # 这里就是你要跨到的服务器接口地址</span><br><span class="line">      changeOrigin: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里修改了之后，记得重启服务后，跨域设置才能生效（<code>yarn start 或 npm start</code>），接着在upload中action位置写上接口后面的地址，不能写全部地址了，得写相对地址，否则会报跨域错误：<br>错误如下：<br><img src="https://img-blog.csdnimg.cn/20200516092446956.png" alt="跨域报错"></p></li><li><p>再就是关于前后端请求头的问题，比较麻烦，每个人遇到的情况都不一定相同，我是传一个xml/pdf文件到后端，接受一个response返回，header里面，我如果像postman那样写<code>&quot;Content-Type&quot;: &quot;multipart/form-data&quot;</code>反而传不过去，但是注释掉后，能正常把文件传到后端，一段时间后在浏览器network里面可以接收到response：<br><img src="https://img-blog.csdnimg.cn/2020051609303713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="response"></p><h2 id="部署到win服务器"><a href="#部署到win服务器" class="headerlink" title="部署到win服务器"></a>部署到win服务器</h2><p>Nginx反向代理</p><h5 id="安装、启动Nginx"><a href="#安装、启动Nginx" class="headerlink" title="安装、启动Nginx"></a>安装、启动Nginx</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我演示的是win服务器的部署，其他的可能略有区别，首先安装Nginx，直接去官网下载安装即可，win下启动cmd</p><pre><code>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 nginx.exe 或者 start nginx ，回车即可</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在服务器输入：<a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a> ，有Nginx界面则启动成成功。<br><img src="https://img-blog.csdnimg.cn/20200516093828642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="Nginx"></p><h5 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 配置之前，需要先把React项目打包，打包很简单，直接<code>yarn build</code>，会在项目目录生成一个build文件：</p></li></ol><img src="https://img-blog.csdnimg.cn/20200516094110706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x400"  style="zoom:50%;" />然后将项目复制到你的win服务器上，在Nginx安装目录下有一个Nginx的conf文件，主要改一下前端端口以及root地址（也就是build文件夹所在地址）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  smartcite;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   C:\samart_cite_fronted\project_pdf2xml\project_pdf2xml\build;</span><br><span class="line">            index  index.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><pre><code>listen  ：设置的端口号server_name  ：访问的名字root   ：你项目所放的地址index index.html  ：你的入口html文件因为是单页应用，所以，是根据路由跳转，为避免出现404，我们需要重写至index.html </code></pre><h5 id="Nginx常用命令："><a href="#Nginx常用命令：" class="headerlink" title="Nginx常用命令："></a>Nginx常用命令：</h5><pre><code>nginx开启命令：start nginxnginx停止命令：nginx -s quitnginx重启命令：nginx -s reload</code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>Nginx部署过程注意：<br>windows server部署react项目</p><ul><li>1.安装并启用nginx服务</li><li>2.在nginx.conf文件中,添加server配置,端口号改为自己想要设置的,然后热重载配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  localhost;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">root   C:\samart_cite_web;</span><br><span class="line">index  index.html;</span><br><span class="line">try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>3.安装Openssl<br>（ssh工具方便传文件，也可以用FileZilla（mac端）、filetransfer（win端））</li><li>4.windows防火墙添加入站规则 将80端口或上述设置的端口添加进去</li><li>5.踩坑：如果前后端在一个服务器上，但是端口不同，同样属于跨域，可以直接在接口地址action位置写全部的接口路径，但是要让后端在响应头里面加几句话允许跨域：<img src="https://imgkr.cn-bj.ufileos.com/bb7f2e5c-0d14-4472-aed8-12cffafb728f.png"  style="zoom:50%;" /></li></ul><h2 id="部署到linux服务器"><a href="#部署到linux服务器" class="headerlink" title="部署到linux服务器"></a>部署到linux服务器</h2><p>相比于Win部署，大差不差！没有win上的防火墙那一步，相对省心一些！</p><ul><li>1.在服务器上安装linux版本的nginx</li><li>2.在服务器上建立一个项目文件夹，例如：<code>/home/smartcite</code></li><li>3.将本地React项目的build包传到linux下的<code>/home/smartcite</code>,</li><li>4.修改linux服务器上的nignx配置：<br>找到default.conf文件，一般在<code>/etc/nginx/sites-available</code>里面，有的也可能在<code>/etc/nginx/conf.d</code>下<br>修改采用：vi default，修改里面对应的root地址(这个地址就是你的项目在linux服务器上的路径)<br>参考博客：<br><a href="https://blog.csdn.net/wly_er/article/details/82348593" target="_blank" rel="noopener">https://blog.csdn.net/wly_er/article/details/82348593</a><br><a href="https://www.jb51.net/article/152781.htm" target="_blank" rel="noopener">https://www.jb51.net/article/152781.htm</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）&quot;&gt;&lt;a href=&quot;#React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）&quot; class=&quot;headerlink&quot; title=&quot;React 入门+实战（</summary>
      
    
    
    
    <category term="技术栈" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="React" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/React/"/>
    
    
    <category term="React" scheme="https://ericzikun.github.io/tags/React/"/>
    
    <category term="antd" scheme="https://ericzikun.github.io/tags/antd/"/>
    
    <category term="nginx反向代理" scheme="https://ericzikun.github.io/tags/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>爬虫&amp;正则表达式基础</title>
    <link href="https://ericzikun.github.io/2020/04/18/%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://ericzikun.github.io/2020/04/18/%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-04-18T14:43:24.000Z</published>
    <updated>2020-10-01T11:51:07.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫流程："><a href="#爬虫流程：" class="headerlink" title="爬虫流程："></a>爬虫流程：</h2><img src="https://img-blog.csdnimg.cn/20200418222723979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x400"  style="zoom:50%;" /><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><img src="https://img-blog.csdnimg.cn/20200418222819648.png#pic_center =300x20"  style="zoom:50%;" /><p>正则表达式由<strong>字符</strong>和<strong>操作符</strong>组成</p><p>常用操作符：</p><p><img src="https://img-blog.csdnimg.cn/20200418222925667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>举例：</strong><br><img src="https://img-blog.csdnimg.cn/2020041822295565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>经典正则表达式：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223008713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p>eg：<br><img src="https://img-blog.csdnimg.cn/20200418223031684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>Re库：</strong></p><p>re库可以采用raw string类型表示正则表达式，表示为： <code>r&#39;text&#39;</code>,  PS: raw string是不包含对转义符再次转义的字符串</p><p>例如：<code>r&#39;[1‐9]\d{5}&#39;</code><br>和<code>r&#39;\d{3}‐\d{8}|\d{4}‐\d{7}&#39;</code></p><p><strong>Re库主要函数：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223047511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>re.search：</strong>  在整个字符串中搜索匹配<br><img src="https://img-blog.csdnimg.cn/20200418223104156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#100081</span></span><br></pre></td></tr></table></figure><p><strong>re.match:</strong>   与re.search类似，但是是从<strong>字符串开始位置</strong>起匹配表达式，返回match对象<br><img src="https://img-blog.csdnimg.cn/20200418223128432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#报错，因为BIT未匹配到</span></span><br></pre></td></tr></table></figure><p><strong>re.findall:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223147180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>)</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># ['10081','10084']</span></span><br></pre></td></tr></table></figure><p><strong>re.split:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223158785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>)</span><br><span class="line"><span class="comment">#['BIT','TSU','']</span></span><br><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#['BIT','TSU100084']</span></span><br></pre></td></tr></table></figure><p><strong>re.finditer:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223212265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line"><span class="comment"># 100081</span></span><br><span class="line"><span class="comment"># 100084</span></span><br></pre></td></tr></table></figure><p><strong>re.sub:</strong><br><img src="https://img-blog.csdnimg.cn/2020041822322519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">':zipcode'</span>,<span class="string">"BIT100081 TSU100084"</span>)</span><br><span class="line"><span class="comment"># 'BIT:zipcode TSU:zipcode'</span></span><br></pre></td></tr></table></figure><p><strong>re库的面向对象方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">"BIT 100081"</span>) <span class="comment">#对比——函数式：一次性操作</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br><span class="line">rst = pat.search(<span class="string">'BIT 100081'</span>)  <span class="comment">#面向对象用法</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020041822324862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />**re库的match对象：**<p>match对象是一次匹配的结果，包含匹配的很多信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line">type(match)</span><br><span class="line"><span class="comment"># &lt;class '_sre.SRE_Match'&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200418223304921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m =re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">m.string</span><br><span class="line"><span class="comment">#"BIT100081 TSU100084"</span></span><br><span class="line">m.pos</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line">m.endpos</span><br><span class="line"><span class="comment"># 19</span></span><br><span class="line">m.group(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># '100081'</span></span><br><span class="line">m.start()</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">m.end()</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">m.span()</span><br><span class="line"><span class="comment"># (3,9)</span></span><br></pre></td></tr></table></figure><p><strong>re库的贪婪匹配和最小匹配：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 贪婪匹配——默认采用贪婪匹配，即输出匹配最长的子串</span></span><br><span class="line">match = re.search(<span class="string">r'PY.*N'</span>,<span class="string">'PYANBNCNDN'</span>) <span class="comment"># *代表对前一个字符,也就是'.'的无限次或0次扩展，而'.'为任意</span></span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 'PYANBNCNDN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最小匹配：加一个问号</span></span><br><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020041822333165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p><strong>总结：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223712255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>参考：<br>b站视频：嵩天教授的Python网络爬虫与信息提取课程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬虫流程：&quot;&gt;&lt;a href=&quot;#爬虫流程：&quot; class=&quot;headerlink&quot; title=&quot;爬虫流程：&quot;&gt;&lt;/a&gt;爬虫流程：&lt;/h2&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200418222723979.png?x</summary>
      
    
    
    
    <category term="技巧" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="文本处理" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
    
    <category term="文本处理" scheme="https://ericzikun.github.io/tags/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
    
    <category term="爬虫" scheme="https://ericzikun.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="正则表达式" scheme="https://ericzikun.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Transformer 原理+源码分析总结(Tensorflow官方源码)</title>
    <link href="https://ericzikun.github.io/2020/04/11/Transformer-%E5%8E%9F%E7%90%86-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93-Tensorflow%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
    <id>https://ericzikun.github.io/2020/04/11/Transformer-%E5%8E%9F%E7%90%86-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93-Tensorflow%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/</id>
    <published>2020-04-11T09:49:11.000Z</published>
    <updated>2020-10-01T13:03:45.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transformer理解"><a href="#Transformer理解" class="headerlink" title="Transformer理解"></a>Transformer理解</h2><p><strong>参考博客：</strong><br><a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a><br><a href="https://github.com/aespresso/a_journey_into_math_of_ml" target="_blank" rel="noopener">https://github.com/aespresso/a_journey_into_math_of_ml</a><br><a href="https://www.tensorflow.org/tutorials/text/transformer#encoder_and_decoder" target="_blank" rel="noopener">https://www.tensorflow.org/tutorials/text/transformer#encoder_and_decoder</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学了 TextCNN、LSTM后，谈起如今NLP最流行、最热的模型，当然是Transformer、bert，语言模型、命名实体识别、机器翻译等任务，很多都开始用Transformer，或者说是bert预训练模型来做，在机器阅读理解榜单中（SQuAD2.0），机器成绩已经超越人类表现！<br>这些天看了几个经典博客、视频，最后读了一遍源码，加深了对模型的理解，整体结构也基本上理顺了。</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <strong>transformer</strong>是谷歌大脑在2017年底发表的论文 attention is all you need中所提出的seq2seq模型。现在已经取得了大范围的应用和扩展,而BERT就是从 transformer中衍生出来的预训练语言模型。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中主要的应用的方式是2步——先进行预训练语言模型——然后把预训练的模型适配给下游任务（分类、生成、标记等）。其中：<strong>预训练模型</strong>非常重要,预训练的模型的性能直接影响下游任务。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>先上图吧：<br><img src="https://img-blog.csdnimg.cn/20200411142658336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x500"  style="zoom:30%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 整个Transformer结构分为：Encoding（编码器）和Decoding（解码器）两大部分；而编码器又有N个编码器层，解码器也有N个解码器层；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么先把一个编码器层搞清楚，串联N个就能理解了；理解好了编码器，解码器就快了。<br>一个编码器层包含五个组成部分：<br>$\begin{cases} 1. Positional Encoding\\2.Multi-Head Attention\\3. Add\&amp;Norm\\4.FeedForward\\5.Add\&amp;Norm\end{cases}$<br>看似很复杂，一个一个来就不怕：</p><h4 id="1-Positional-Encoding"><a href="#1-Positional-Encoding" class="headerlink" title="1.Positional Encoding"></a>1.Positional Encoding</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先得清楚<strong>为何Transformer用位置嵌入</strong>？在LSTM中我们用一个词一个词灌进去，从而学习了时序关系，但是transformer模型<strong>没有</strong>循环神经网络的迭代操作, 它是将所有词一起喂进去，并行操作的。所以我们必须提供每个字的<strong>位置信息</strong>给transformer, 才能识别出语言中的顺序关系。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 位置嵌入的定义其实就是作者自定义的一个函数，来做到区别每个词在句子中的位置，仅此而已。<br><strong>定义 ：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 位置嵌入的维度为$[max \ sequence \ length, \ embedding \ dimension]$, 嵌入的维度同词向量的维度, $max \ sequence \ length$属于超参数, 指的是限定的最大单个句长.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在transformer模型中,一般以字为单位，不需要分词了, 首先我们要初始化字向量为$[vocab \ size, \ embedding \ dimension]$, $vocab \ size$为总共的字库数量, $embedding \ dimension$为字向量的维度, 也是每个字的向量。（这里的理解和之前的TextCNN LSTM中的$Embedding$一致！）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里论文中使用了$sine$和$cosine$函数的线性变换来提供给模型位置信息:<br>$$PE_{(pos,2i)} = sin(pos / 10000^{2i/d_{\text{model}}}) \quad PE_{(pos,2i+1)} = cos(pos / 10000^{2i/d_{\text{model}}})$$<br>上式中$pos$指的是句中字的位置, 取值范围是$[0, \ max \ sequence \ length)$, $i$指的是词向量的维度, 取值范围是$[0, \ embedding \ dimension)$, 上面有$sin$和$cos$一组公式, 也就是对应着$embedding \ dimension$维度的一组奇数和偶数的序号的维度, 例如$0, 1$一组, $2, 3$一组, 分别用上面的$sin$和$cos$函数做处理, 从而产生不同的周期性变化。<br>看源码（就是对应的上面的公式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_angles</span><span class="params">(pos, i, d_model)</span>:</span></span><br><span class="line">  angle_rates = <span class="number">1</span> / np.power(<span class="number">10000</span>, (<span class="number">2</span> * (i//<span class="number">2</span>)) / np.float32(d_model))</span><br><span class="line">  <span class="keyword">return</span> pos * angle_rates</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positional_encoding</span><span class="params">(position, d_model)</span>:</span></span><br><span class="line">  angle_rads = get_angles(np.arange(position)[:, np.newaxis],</span><br><span class="line">                          np.arange(d_model)[np.newaxis, :],</span><br><span class="line">                          d_model)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 将 sin 应用于数组中的偶数索引（indices）；2i</span></span><br><span class="line">  angle_rads[:, <span class="number">0</span>::<span class="number">2</span>] = np.sin(angle_rads[:, <span class="number">0</span>::<span class="number">2</span>])</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 将 cos 应用于数组中的奇数索引；2i+1</span></span><br><span class="line">  angle_rads[:, <span class="number">1</span>::<span class="number">2</span>] = np.cos(angle_rads[:, <span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">  pos_encoding = angle_rads[np.newaxis, ...]</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> tf.cast(pos_encoding, dtype=tf.float32)</span><br></pre></td></tr></table></figure><p>输出这个周期性的矩阵图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pos_encoding = positional_encoding(<span class="number">50</span>, <span class="number">512</span>)</span><br><span class="line"><span class="keyword">print</span> (pos_encoding.shape)</span><br><span class="line"></span><br><span class="line">plt.pcolormesh(pos_encoding[<span class="number">0</span>], cmap=<span class="string">'RdBu'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Depth'</span>)</span><br><span class="line">plt.xlim((<span class="number">0</span>, <span class="number">512</span>))</span><br><span class="line">plt.ylabel(<span class="string">'Position'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411150113592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /><h4 id="2-Muti-Head-Attention"><a href="#2-Muti-Head-Attention" class="headerlink" title="2.Muti-Head Attention"></a>2.Muti-Head Attention</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面的基础上，我们已经有了词向量矩阵和位置嵌入了，例如有一些样本。维度是：$[batch size, \ sequence \ length]$,再在字典中找到对应的字向量，变为：$[batch size, \ sequence \ length, \ embedding \ dimension]$,同时我们再加上位置嵌入（位置嵌入维度一致，直接元素相加即可），相加后的维度还是$[batch size, \ sequence \ length, \ embedding \ dimension]$<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要了解Muti-Head Attention，首先要知道self-attention,Multi无非是在其基础上并行了多个头而已。</p><h5 id="2-1-self-Attention"><a href="#2-1-self-Attention" class="headerlink" title="2.1 self Attention"></a>2.1 self Attention</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Attention机制的创新点就在于这里，为了学到多重含义的表示，我们想让一个字的向量包含这句话所有字的一个相关程度（后面还会说），那么首先初始化三个权重矩阵$W_Q、W_K、W_V$，然后将$X_{embedding}$与这三个权重矩阵相乘，得到$Q、K、V$<br>也就是：<br>$$\begin{cases}Q=X_{embedding} W_Q \ K=X_{embedding} W_K \ V=X_{embedding} W_V\end{cases}$$<br>下面用图来理解更舒适！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9qYWxhbW1hci5naXRodWIuaW8vaW1hZ2VzL3QvdHJhbnNmb3JtZXJfc2VsZl9hdHRlbnRpb25fc2NvcmUucG5n?x-oss-process=image/format,png#pic_center =500x300"  style="zoom:50%;" /></p><p>得到了$Q、K、V$之后 那么我们用$q\times k$也就是对于一个字（中文是字，英文是词）它的score包含所有的自身$q$和别的字的$k$相乘,当然这里相乘肯定是和$k$的转置相乘哈！从而就可以得到一个注意力矩阵！(点积：两个向量越相似，点积则越大！)这里你会观察到，对角线上也就是每个字，自己对自己的相关程度，一行就是一个字中所有字与它的相关性。然后再对每一行做归一化（$softmax$），这样就保证对一个字来说，所有字与它的相关程度概率和为1！<br><img src="https://img-blog.csdnimg.cn/20200411153038943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x200"  style="zoom:50%;" /><br>然后论文中又除了一个$\sqrt{d_k}$,是为了把注意力矩阵变成标准正态分布，使得softmax归一化后的结果更加稳定，以便于反向传播时候获取平衡的梯度，最后将注意力矩阵给$V$加权，为啥要给$V$加权，其实就是因为注意力矩阵维度是$[batch \ size, \ sequence \ length, \ sequence \ length]$，而$V$维度是$[batch \ size ,\ sequence \ length, \ embedding \ dimension]$为了使得维度保持不变，则乘以$V$后为: $[batch \ size ,\ sequence \ length, \ embedding \ dimension]$,从而再次和$X_{embedding}$的维度相同了，是不是很妙！<br>$${Attention(Q, K, V) = softmax_k(\frac{QK^T}{\sqrt{d_k}}) V} $$<br>下图是论文中对$d_k$的解释：<br><img src="https://img-blog.csdnimg.cn/20200411155134175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="论文"></p><h6 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h6><p>包含$Q，K$相乘，注意到相乘的时候有个转置操作，以及后面对$V$加权，和我们给出的公式其实是一致的，这里的mask语句后面会讲。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaled_dot_product_attention</span><span class="params">(q, k, v, mask)</span>:</span></span><br><span class="line">  <span class="string">"""计算注意力权重。</span></span><br><span class="line"><span class="string">  q, k, v 必须具有匹配的前置维度。</span></span><br><span class="line"><span class="string">  k, v 必须有匹配的倒数第二个维度，例如：seq_len_k = seq_len_v。</span></span><br><span class="line"><span class="string">  虽然 mask 根据其类型（填充或前瞻）有不同的形状，</span></span><br><span class="line"><span class="string">  但是 mask 必须能进行广播转换以便求和。</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  参数:</span></span><br><span class="line"><span class="string">    q: 请求的形状 == (..., seq_len_q, depth)</span></span><br><span class="line"><span class="string">    k: 主键的形状 == (..., seq_len_k, depth)</span></span><br><span class="line"><span class="string">    v: 数值的形状 == (..., seq_len_v, depth_v)</span></span><br><span class="line"><span class="string">    mask: Float 张量，其形状能转换成</span></span><br><span class="line"><span class="string">          (..., seq_len_q, seq_len_k)。默认为None。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  返回值:</span></span><br><span class="line"><span class="string">    输出，注意力权重</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">  matmul_qk = tf.matmul(q, k, transpose_b=<span class="literal">True</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 缩放 matmul_qk</span></span><br><span class="line">  dk = tf.cast(tf.shape(k)[<span class="number">-1</span>], tf.float32)</span><br><span class="line">  scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将 mask 加入到缩放的张量上。</span></span><br><span class="line">  <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    scaled_attention_logits += (mask * <span class="number">-1e9</span>)  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># softmax 在最后一个轴（seq_len_k）上归一化，因此分数   （对注意力矩阵每一行归一化，则每个字的注意力向量一行，就是与其余字的相关程度，和为1）</span></span><br><span class="line">  <span class="comment"># 相加等于1。</span></span><br><span class="line">  attention_weights = tf.nn.softmax(scaled_attention_logits, axis=<span class="number">-1</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)  注意力矩阵</span></span><br><span class="line"></span><br><span class="line">  output = tf.matmul(attention_weights, v)  <span class="comment"># (..., seq_len_q, depth_v)  再把注意力矩阵乘V</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h5 id="2-2-Multi-Head-Attention"><a href="#2-2-Multi-Head-Attention" class="headerlink" title="2.2 Multi-Head Attention"></a>2.2 Multi-Head Attention</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么对于多头其实是一样的，只是在开始的时候将$embedding \ dimension$分割成了$h$份（头的个数）,这里每个头权重都不同，多头训练效果理论上肯定更好（反正想着就是这样，至于为什么，也不好解释）<br>，最后再把它及联拼接。大佬的图展现的很好：<br><img src="https://jalammar.github.io/images/t/transformer_multi-headed_self-attention-recap.png" zoom="100%" alt="多头级联"></p><h6 id="源码分析：-1"><a href="#源码分析：-1" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiHeadAttention</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads)</span>:</span></span><br><span class="line">    super(MultiHeadAttention, self).__init__()</span><br><span class="line">    self.num_heads = num_heads</span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> d_model % self.num_heads == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    self.depth = d_model // self.num_heads   <span class="comment">#本来QKV维度：【batch size，seq.length,embed dim】,拆分后就是【batch size，seq length，h，embed dim/h】</span></span><br><span class="line">                                            <span class="comment"># depth 就是用embed dim 除头的个数</span></span><br><span class="line">    </span><br><span class="line">    self.wq = tf.keras.layers.Dense(d_model)  <span class="comment">#初始化qkv矩阵</span></span><br><span class="line">    self.wk = tf.keras.layers.Dense(d_model)</span><br><span class="line">    self.wv = tf.keras.layers.Dense(d_model)</span><br><span class="line">    </span><br><span class="line">    self.dense = tf.keras.layers.Dense(d_model)</span><br><span class="line">        </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">split_heads</span><span class="params">(self, x, batch_size)</span>:</span> </span><br><span class="line">    <span class="string">"""拆分embedding dimension维度到 (num_heads, depth)，</span></span><br><span class="line"><span class="string">    这里的 depth=embed dim/h</span></span><br><span class="line"><span class="string">    转置结果使得形状为 (batch_size, num_heads, seq_len, depth)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    x = tf.reshape(x, (batch_size, <span class="number">-1</span>, self.num_heads, self.depth))</span><br><span class="line">    <span class="keyword">return</span> tf.transpose(x, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, v, k, q, mask)</span>:</span></span><br><span class="line">    batch_size = tf.shape(q)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    q = self.wq(q)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    k = self.wk(k)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    v = self.wv(v)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    q = self.split_heads(q, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_q, depth)</span></span><br><span class="line">    k = self.split_heads(k, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_k, depth)</span></span><br><span class="line">    v = self.split_heads(v, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_v, depth)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)   之前没有分头的时候是：【batch size,seq</span></span><br><span class="line">     <span class="comment">#length,embed dim】</span></span><br><span class="line">    <span class="comment"># attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)</span></span><br><span class="line">    scaled_attention, attention_weights = scaled_dot_product_attention(</span><br><span class="line">        q, k, v, mask)</span><br><span class="line">    </span><br><span class="line">    scaled_attention = tf.transpose(scaled_attention, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])  <span class="comment"># (batch_size, seq_len_q, num_heads, depth)  转置操作</span></span><br><span class="line"></span><br><span class="line">    concat_attention = tf.reshape(scaled_attention, </span><br><span class="line">                                  (batch_size, <span class="number">-1</span>, self.d_model))  <span class="comment"># (batch_size, seq_len_q, d_model) 级联操作 看下图</span></span><br><span class="line"></span><br><span class="line">    output = self.dense(concat_attention)  <span class="comment"># (batch_size, seq_len_q, d_model)</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h5 id="2-3-Mask"><a href="#2-3-Mask" class="headerlink" title="2.3 Mask"></a>2.3 Mask</h5><p>有两个mask：$\begin{cases}1.padding \  mask  \\2.lookahead mask（翻译任务中预测文本时(decoder部分))\end{cases}$</p><h6 id="2-3-1-padding-mask"><a href="#2-3-1-padding-mask" class="headerlink" title="2.3.1 padding mask"></a>2.3.1 padding mask</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当我们在确定$Max \  length$时候，对于不够长的句子肯定要做$padding$但是对于为0的那一部分在$softmax$时候会变为1：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 回顾$softmax$函数:</p><p>$$<br>\sigma (\mathbf {z} )_{i}= \frac {e^{z_i} } {\sum _{j=1} ^ {K} e^ {z_j} }<br>$$</p><p>$$ $$</p><p>$e^0$是1, 是有值的, 这样的话 $softmax$ 中被 $padding$ 的部分就参与了运算, 就等于是让无效的部分参与了运算,这样肯定不对, 这时就需要做一个$mask$让这些无效区域不参与运算, 我们一般给无效区域加一个很大的负数的偏置, 也就是:</p><p>$$z_{illegal}=z_{illegal}+bias_{illegal}$$<br>$$bias_{illegal}\to-\infty$$<br>$$e^{z_{illegal}}\to0$$</p><h6 id="源码分析：-2"><a href="#源码分析：-2" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_padding_mask</span><span class="params">(seq)</span>:</span></span><br><span class="line">  seq = tf.cast(tf.math.equal(seq, <span class="number">0</span>), tf.float32)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 添加额外的维度来将填充加到</span></span><br><span class="line">  <span class="comment"># 注意力对数（logits）。</span></span><br><span class="line">  <span class="keyword">return</span> seq[:, tf.newaxis, tf.newaxis, :]  <span class="comment"># (batch_size, 1, 1, seq_len)</span></span><br></pre></td></tr></table></figure><p>输出效果(把原本为0的地方变成了1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([[<span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">create_padding_mask(x)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411161219194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x150"  style="zoom:50%;" />最后再在一句代码中体现，如果mask不是None，则在此处乘以负无穷：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaled_dot_product_attention</span><span class="params">(q, k, v, mask)</span>:</span></span><br><span class="line">  <span class="string">"""计算注意力权重。</span></span><br><span class="line"><span class="string">  q, k, v 必须具有匹配的前置维度。</span></span><br><span class="line"><span class="string">  k, v 必须有匹配的倒数第二个维度，例如：seq_len_k = seq_len_v。</span></span><br><span class="line"><span class="string">  虽然 mask 根据其类型（填充或前瞻）有不同的形状，</span></span><br><span class="line"><span class="string">  但是 mask 必须能进行广播转换以便求和。</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  参数:</span></span><br><span class="line"><span class="string">    q: 请求的形状 == (..., seq_len_q, depth)</span></span><br><span class="line"><span class="string">    k: 主键的形状 == (..., seq_len_k, depth)</span></span><br><span class="line"><span class="string">    v: 数值的形状 == (..., seq_len_v, depth_v)</span></span><br><span class="line"><span class="string">    mask: Float 张量，其形状能转换成</span></span><br><span class="line"><span class="string">          (..., seq_len_q, seq_len_k)。默认为None。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  返回值:</span></span><br><span class="line"><span class="string">    输出，注意力权重</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">  matmul_qk = tf.matmul(q, k, transpose_b=<span class="literal">True</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 缩放 matmul_qk</span></span><br><span class="line">  dk = tf.cast(tf.shape(k)[<span class="number">-1</span>], tf.float32)</span><br><span class="line">  scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将 mask 加入到缩放的张量上。</span></span><br><span class="line">  <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    scaled_attention_logits += (mask * <span class="number">-1e9</span>)  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># softmax 在最后一个轴（seq_len_k）上归一化，因此分数   （对注意力矩阵每一行归一化，则每个字的注意力向量一行，就是与其余字的相关程度，和为1）</span></span><br><span class="line">  <span class="comment"># 相加等于1。</span></span><br><span class="line">  attention_weights = tf.nn.softmax(scaled_attention_logits, axis=<span class="number">-1</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)  注意力矩阵</span></span><br><span class="line"></span><br><span class="line">  output = tf.matmul(attention_weights, v)  <span class="comment"># (..., seq_len_q, depth_v)  再把注意力矩阵乘V</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h6 id="2-3-2-Lookahead-mask"><a href="#2-3-2-Lookahead-mask" class="headerlink" title="2.3.2 Lookahead mask"></a>2.3.2 Lookahead mask</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里我也不知道咋翻译（前瞻遮罩？）这个mask操作就是在翻译的时候，要预测第三个词，将仅使用第一个和第二个词，与此类似，预测第四个词，仅使用第一个，第二个和第三个词，依此类推。</p><h6 id="源码分析：-3"><a href="#源码分析：-3" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_look_ahead_mask</span><span class="params">(size)</span>:</span></span><br><span class="line">  mask = <span class="number">1</span> - tf.linalg.band_part(tf.ones((size, size)), <span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> mask  <span class="comment"># (seq_len, seq_len)</span></span><br></pre></td></tr></table></figure><p>  <strong>输出结果：</strong><br>  (每一行是一个时刻，第一个时刻，遮盖了后两个（遮盖操作后也就是变为了1）)，用第一个字预测第二个字；第二个时刻，遮盖了第三个字，用第1、2个字预测第三个字；第三个时刻，则是用前三个字去预测结束符……当然这里其实每次预测的时候解码器还加上了编码器输出的embedding向量，这一点后面会详细说！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = tf.random.uniform((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">temp = create_look_ahead_mask(x.shape[<span class="number">1</span>])</span><br><span class="line">print(x)</span><br><span class="line">temp</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411162211193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h4 id="3-Add-amp-Norm"><a href="#3-Add-amp-Norm" class="headerlink" title="3.Add&amp;Norm"></a>3.Add&amp;Norm</h4><h5 id="3-1残差连接"><a href="#3-1残差连接" class="headerlink" title="3.1残差连接"></a>3.1残差连接</h5><p><strong>归纳：模型太深，需要避免梯度消失</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们在上一步得到了经过注意力矩阵加权之后的$V$, 也就是$Attention(Q, \ K, \ V)$, 我们对它进行一下转置, 使其和$X_{embedding}$的维度一致, 也就是$[batch \ size, \ sequence \ length, \ embedding \ dimension]$, 然后把他们加起来做残差连接, 直接进行元素相加, 因为他们的维度一致:<br>$$X_{embedding} + Attention(Q, \ K, \ V)$$<br>在之后的运算里, 每经过一个模块的运算, 都要把运算之前的值和运算之后的值相加, 从而得到残差连接, 训练的时候可以使梯度直接走捷径反传到最初始层:<br>$$X + SubLayer(X) $$</p><h5 id="3-2-LayerNorm"><a href="#3-2-LayerNorm" class="headerlink" title="3.2 $LayerNorm$:"></a>3.2 $LayerNorm$:</h5><p><strong>归纳：加速收敛</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $Layer Normalization$的作用是把神经网络中隐藏层归一为标准正态分布, 也就是$i.i.d$独立同分布, 以起到加快训练速度, 加速收敛的作用:<br>$$ \mu_i=\frac {1} {m}\sum^{m} _ { i=1 } x _ {ij} $$<br>上式中以矩阵的行$(row)$为单位求均值;<br>$$\sigma^{2} _ { j } =\frac { 1 } { m } \sum^ { m } _ { i=1 } (x _ { ij } -\mu_ { j } )^ { 2 } $$<br>上式中以矩阵的行$(row)$为单位求方差;<br>$$LayerNorm(x)=\alpha \odot \frac{x_{ij}-\mu_{i}}<br>{\sqrt{\sigma^{2}_{i}+\epsilon}} + \beta \tag{eq.6}$$<br>然后用<strong>每一行</strong>的<strong>每一个元素</strong>减去<strong>这行的均值</strong>, 再除以<strong>这行的标准差</strong>, 从而得到归一化后的数值, $\epsilon$是为了防止除$0$;<br>之后引入两个可训练参数$\alpha, \ \beta$来弥补归一化的过程中损失掉的信息, 注意$\odot$表示元素相乘而不是点积, 我们一般初始化$\alpha$为全$1$, 而$\beta$为全$0$.</p><h6 id="源码分析：-4"><a href="#源码分析：-4" class="headerlink" title="源码分析："></a>源码分析：</h6><p>在源码中就是一个加号代表了一切！<code>out1 = self.layernorm1(x + attn_output)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderLayer</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads, dff, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(EncoderLayer, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.mha = MultiHeadAttention(d_model, num_heads)   </span><br><span class="line">    self.ffn = point_wise_feed_forward_network(d_model, dff)  <span class="comment"># 前向传播</span></span><br><span class="line"></span><br><span class="line">    self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    </span><br><span class="line">    self.dropout1 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout2 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    attn_output, _ = self.mha(x, x, x, mask)  <span class="comment"># (batch_size, input_seq_len, d_model)  三个x代表上一层的输出，N个encoder是串联的</span></span><br><span class="line">    attn_output = self.dropout1(attn_output, training=training)</span><br><span class="line">    out1 = self.layernorm1(x + attn_output)  <span class="comment"># (batch_size, input_seq_len, d_model) 残差连接</span></span><br><span class="line">    </span><br><span class="line">    ffn_output = self.ffn(out1)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    ffn_output = self.dropout2(ffn_output, training=training)</span><br><span class="line">    out2 = self.layernorm2(out1 + ffn_output)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> out2</span><br></pre></td></tr></table></figure><h4 id="4-FeedForward"><a href="#4-FeedForward" class="headerlink" title="4.FeedForward"></a>4.FeedForward</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前向传播层，就是一个全连接，<code>dff</code>设置了内部全连接层数，和以往的没什么区别，不多说了。</p><h5 id="源码分析：-5"><a href="#源码分析：-5" class="headerlink" title="源码分析："></a>源码分析：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point_wise_feed_forward_network</span><span class="params">(d_model, dff)</span>:</span> <span class="comment"># dff内部层维数</span></span><br><span class="line">  <span class="keyword">return</span> tf.keras.Sequential([</span><br><span class="line">      tf.keras.layers.Dense(dff, activation=<span class="string">'relu'</span>),  <span class="comment"># (batch_size, seq_len, dff)</span></span><br><span class="line">      tf.keras.layers.Dense(d_model)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><h4 id="Transformer-encoder整体结构"><a href="#Transformer-encoder整体结构" class="headerlink" title="Transformer encoder整体结构"></a>Transformer encoder整体结构</h4><p>1). 字向量与位置编码:<br>$$X = EmbeddingLookup(X) + PositionalEncoding $$<br>$$X \in \mathbb{R}^{batch \ size  \ * \  seq. \ len. \  * \  embed. \ dim.} $$<br>2). 自注意力机制:<br>$$Q = Linear(X) = XW_{Q}$$<br>$$K = Linear(X) = XW_{K} $$<br>$$V = Linear(X) = XW_{V}$$<br>$$X_{attention} = SelfAttention(Q, \ K, \ V) $$<br>3). 残差连接与$Layer \ Normalization$<br>$$X_{attention} = X + X_{attention} $$<br>$$X_{attention} = LayerNorm(X_{attention}) $$<br>4). $FeedForward$, 其实就是两层线性映射并用激活函数激活, 比如说$ReLU$:<br>$$X_{hidden} = Activate(Linear(Linear(X_{attention})))$$<br>5). 重复3).:<br>$$X_{hidden} = X_{attention} + X_{hidden}$$<br>$$X_{hidden} = LayerNorm(X_{hidden})$$<br>$$X_{hidden} \in \mathbb{R}^{batch \ size  \ * \  seq. \ len. \  * \  embed. \ dim.} $$</p><h4 id="Transformer-decoder部分"><a href="#Transformer-decoder部分" class="headerlink" title="Transformer decoder部分"></a>Transformer decoder部分</h4><img src="https://img-blog.csdnimg.cn/20200411142658336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x500"  style="zoom:30%;" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 还是这个图最直观，注意观察编码器和解码器的差异，最下面的一块其实差不多，只是解码器加了一个Mask，这个mask当然是Lookahead mask，因为翻译任务里面，我们是在解码器中输入一个词，解码器拿着编码器最终隐藏层输出的向量来预测下一个词，所以需要去遮盖后面的词：**解码器预测过程：**第1时刻——输入'I，解码器拿着编码器输出的embedding向量去预测'am'。第2时刻——输入'am'，解码器拿着embedding向量 + 'I' 去预测 'a'第3时刻——输入'a',编码器拿着embedding向量 + 'I' + 'a' 去预测 'student'...<img src="https://img-blog.csdnimg.cn/20200411171038906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x300"  style="zoom:30%;" /><h6 id="源码分析：-6"><a href="#源码分析：-6" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoderLayer</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads, dff, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(DecoderLayer, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.mha1 = MultiHeadAttention(d_model, num_heads)  <span class="comment">#decoder中有两个MultiHeadAttention，最下面一个有Lookahead mask，上面一个有padding mask</span></span><br><span class="line">    self.mha2 = MultiHeadAttention(d_model, num_heads)</span><br><span class="line"></span><br><span class="line">    self.ffn = point_wise_feed_forward_network(d_model, dff)</span><br><span class="line"> </span><br><span class="line">    self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    </span><br><span class="line">    self.dropout1 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout2 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout3 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, enc_output, training, </span></span></span><br><span class="line"><span class="function"><span class="params">           look_ahead_mask, padding_mask)</span>:</span></span><br><span class="line">    <span class="comment"># enc_output.shape == (batch_size, input_seq_len, d_model)</span></span><br><span class="line"></span><br><span class="line">    attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)  <span class="comment"># (batch_size, target_seq_len, d_model)下面一个，这里的输入和encoder一样 也是三个x</span></span><br><span class="line">    attn1 = self.dropout1(attn1, training=training)</span><br><span class="line">    out1 = self.layernorm1(attn1 + x)</span><br><span class="line">    </span><br><span class="line">    attn2, attn_weights_block2 = self.mha2(</span><br><span class="line">        enc_output, enc_output, out1, padding_mask)  <span class="comment"># (batch_size, target_seq_len, d_model) 上面一个，这里的输入不同，要注意：是两个encoder输出和一个decoder输出；但是维数都是一样的</span></span><br><span class="line">    attn2 = self.dropout2(attn2, training=training)</span><br><span class="line">    out2 = self.layernorm2(attn2 + out1)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    ffn_output = self.ffn(out2)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    ffn_output = self.dropout3(ffn_output, training=training)</span><br><span class="line">    out3 = self.layernorm3(ffn_output + out2)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> out3, attn_weights_block1, attn_weights_block2      <span class="comment"># 再有N个decoder串联</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的<code>self.mha1</code>和<code>self.mha2</code>就是图中解码器层定义的两个Multi-Head Attention，这里上面的Multi-Head Attention也就是<code>self.mha2</code>，它是只做了padding mask的，这个和编码器的一致，但是下面的这个Multi-Head Attention（<code>self.mha1</code>）就不一样了，它的mask自然是Lookahead mask，用于遮盖后面的词，现在基本上前后就可以串起来了！<br>注意看两个的输入：</p><figure class="highlight plain"><figcaption><span>x, x, look_ahead_mask)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;self.mha2(enc_output, enc_output, out1, padding_mask)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于下面的Multi-Head Attention<code>self.mha1</code>，它和编码器层那里的代码一致，都是接收三个相同的x（也就是q、k、v）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是对于上面的Multi-Head Attention<code>self.mha2</code>，它的输入是不同的，它是用的编码器的输出和解码器下面的Multi-Head Attention<code>self.mha1</code>的输出<code>out1</code>来共同输出<code>out3</code>，之前不理解为什么编码器那里要写三个x，写一个不也可以吗？反正都是一样，现在明白了，是为了和解码器这里的输入做到格式一致！！！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码器层、解码器层都理解完了，最后编码器串联N个，解码器串联N个就OK啦！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一个图说明了一切：<br><img src="https://img-blog.csdnimg.cn/20200411173424382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 之前不理解为什么画了这么多的线，一根线不行吗？还真不行，因为每次的解码器在预测的时候需要拿编码器输出的embedding向量呀！！</p><h6 id="源码分析：-7"><a href="#源码分析：-7" class="headerlink" title="源码分析："></a>源码分析：</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码器和解码器无非就是做了N个编码器层和解码器层，然后这里的<code>training</code>代表的是否训练，因为训练的时候和预测的时候不一样。<br><strong>编码器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_layers, d_model, num_heads, dff, input_vocab_size,</span></span></span><br><span class="line"><span class="function"><span class="params">               maximum_position_encoding, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(Encoder, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    self.num_layers = num_layers</span><br><span class="line">    </span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)</span><br><span class="line">    self.pos_encoding = positional_encoding(maximum_position_encoding, </span><br><span class="line">                                            self.d_model)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) </span><br><span class="line">                       <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_layers)]</span><br><span class="line">  </span><br><span class="line">    self.dropout = tf.keras.layers.Dropout(rate)</span><br><span class="line">        </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    seq_len = tf.shape(x)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将嵌入和位置编码相加。</span></span><br><span class="line">    x = self.embedding(x)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))</span><br><span class="line">    x += self.pos_encoding[:, :seq_len, :]</span><br><span class="line"></span><br><span class="line">    x = self.dropout(x, training=training)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_layers):</span><br><span class="line">      x = self.enc_layers[i](x, training, mask)   <span class="comment">#上一层的输出是下一层的输入 体现在这里</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br></pre></td></tr></table></figure><p><strong>解码器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_layers, d_model, num_heads, dff, target_vocab_size,</span></span></span><br><span class="line"><span class="function"><span class="params">               maximum_position_encoding, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(Decoder, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    self.num_layers = num_layers</span><br><span class="line">    </span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)</span><br><span class="line">    self.pos_encoding = positional_encoding(maximum_position_encoding, d_model)</span><br><span class="line">    </span><br><span class="line">    self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) </span><br><span class="line">                       <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_layers)]</span><br><span class="line">    self.dropout = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, enc_output, training, </span></span></span><br><span class="line"><span class="function"><span class="params">           look_ahead_mask, padding_mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    seq_len = tf.shape(x)[<span class="number">1</span>]</span><br><span class="line">    attention_weights = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    x = self.embedding(x)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))</span><br><span class="line">    x += self.pos_encoding[:, :seq_len, :]</span><br><span class="line">    </span><br><span class="line">    x = self.dropout(x, training=training)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_layers):</span><br><span class="line">      x, block1, block2 = self.dec_layers[i](x, enc_output, training,</span><br><span class="line">                                             look_ahead_mask, padding_mask)</span><br><span class="line">      </span><br><span class="line">      attention_weights[<span class="string">'decoder_layer&#123;&#125;_block1'</span>.format(i+<span class="number">1</span>)] = block1</span><br><span class="line">      attention_weights[<span class="string">'decoder_layer&#123;&#125;_block2'</span>.format(i+<span class="number">1</span>)] = block2</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x.shape == (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    <span class="keyword">return</span> x, attention_weights</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Transformer理解&quot;&gt;&lt;a href=&quot;#Transformer理解&quot; class=&quot;headerlink&quot; title=&quot;Transformer理解&quot;&gt;&lt;/a&gt;Transformer理解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;参考博客：&lt;/strong&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Transformer" scheme="https://ericzikun.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Transformer/"/>
    
    
    <category term="自然语言处理" scheme="https://ericzikun.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
    <category term="Transformer" scheme="https://ericzikun.github.io/tags/Transformer/"/>
    
    <category term="源码" scheme="https://ericzikun.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>终端命令及Colab白嫖必备</title>
    <link href="https://ericzikun.github.io/2020/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%8F%8AColab%E7%99%BD%E5%AB%96%E5%BF%85%E5%A4%87/"/>
    <id>https://ericzikun.github.io/2020/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%8F%8AColab%E7%99%BD%E5%AB%96%E5%BF%85%E5%A4%87/</id>
    <published>2020-04-10T15:24:35.000Z</published>
    <updated>2020-10-01T11:51:58.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="下载、解压命令（colab常用）："><a href="#下载、解压命令（colab常用）：" class="headerlink" title="下载、解压命令（colab常用）："></a>下载、解压命令（colab常用）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget + url</span><br><span class="line">unzip + filename</span><br></pre></td></tr></table></figure><h3 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ls----------------------显示当前文件夹所有文件</span><br><span class="line">ls -l ------------------显示当前文件夹所有文件及文件夹的详细信息(包含隐藏文件，就是文件名前带点的文件)</span><br><span class="line">pwd --------------------显示当前的path</span><br><span class="line">cd + path --------------表示到某一路径下</span><br><span class="line">cd …/ ------------------表示切换到上一层路径。</span><br><span class="line">sudo su ----------------改为root权限</span><br><span class="line">mkdir /data/path -------新增文件夹</span><br><span class="line">vim path ---------------查看某一文件</span><br><span class="line">：wq--------------------保存退出（查看或者修改某文件后）</span><br><span class="line">rm -rf path ------------删除path</span><br><span class="line">rm test.txt ------------删除test.txt</span><br><span class="line">control + c ------------退出当前对话</span><br><span class="line">cp &lt;文件&gt;&lt;目标文件&gt;或者----cp是copy 的缩写。用于复制文件或文件夹</span><br><span class="line">cp -r&lt;文件夹&gt;&lt;目标文件夹&gt;--cp是copy 的缩写。用于复制文件或文件夹</span><br><span class="line">touch test.txt----------创建一个文本文件</span><br><span class="line">用树结构查看文件夹</span><br><span class="line">先输入brew install tree 安装一个软件tree</span><br><span class="line">命令格式：tree 文件夹</span><br></pre></td></tr></table></figure><p><strong>树结构图：</strong><br><img src="https://img-blog.csdnimg.cn/20200410192110723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Colab-命令："><a href="#Colab-命令：" class="headerlink" title="Colab 命令："></a>Colab 命令：</h2><h3 id="初始化：（每次都需要）"><a href="#初始化：（每次都需要）" class="headerlink" title="初始化：（每次都需要）"></a>初始化：（每次都需要）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用GPU代码（必须）</span></span><br><span class="line">!pip install tensorflow-gpu==<span class="number">1.15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变工作文件夹----一定要到谷歌云盘中（必须，否则数据会丢失）</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"/content/drive/My Drive"</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#看一下GPU情况</span></span><br><span class="line">!nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="Colab不掉线："><a href="#Colab不掉线：" class="headerlink" title="Colab不掉线："></a>Colab不掉线：</h3><p>在Colab网页，右键检查，控制台console中输入一下代码回车，能够时不时点击页面，保证Colab不掉线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClickConnect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Working"</span>); </span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .querySelector(<span class="string">"#top-toolbar &gt; colab-connect-button"</span>)</span><br><span class="line">    .shadowRoot</span><br><span class="line">    .querySelector(<span class="string">"#connect"</span>)</span><br><span class="line">    .click()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">setInterval(ClickConnect,<span class="number">60000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux-常用命令&quot;&gt;&lt;a href=&quot;#Linux-常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux 常用命令&quot;&gt;&lt;/a&gt;Linux 常用命令&lt;/h2&gt;&lt;h3 id=&quot;下载、解压命令（colab常用）：&quot;&gt;&lt;a href=&quot;#下载、解</summary>
      
    
    
    
    <category term="技巧" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Linux" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/Linux/"/>
    
    
    <category term="效率" scheme="https://ericzikun.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="Mac" scheme="https://ericzikun.github.io/tags/Mac/"/>
    
    <category term="Linux" scheme="https://ericzikun.github.io/tags/Linux/"/>
    
    <category term="终端" scheme="https://ericzikun.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>保研经验总结</title>
    <link href="https://ericzikun.github.io/2020/04/09/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://ericzikun.github.io/2020/04/09/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-09T12:40:45.000Z</published>
    <updated>2020-10-01T11:50:36.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保研经验分享"><a href="#保研经验分享" class="headerlink" title="保研经验分享"></a>保研经验分享</h1><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594314594872&di=8d703ca2046d484997db024f93d04388&imgtype=0&src=http%3A%2F%2Fimg.pconline.com.cn%2Fimages%2Fphotoblog%2F5%2F6%2F3%2F0%2F563061%2F20083%2F24%2F1206373412367.jpg"  style="zoom: 100%;" /></p><h2 id="个人背景："><a href="#个人背景：" class="headerlink" title="个人背景："></a>个人背景：</h2><p>​    本人武汉理工大学航海技术专业，专业绩点排名：3/230,保研综合排名：1/230，四级：545，六级：496，一作EI会议论文一篇，国家大学生创新项目负责人，武汉理工大学自主创新项目负责人，获得多年奖学金、华中赛等小奖。</p><p>参加面试的学校：上交海洋，浙大海洋，武大水利，武大信管</p><p>最终去向：<strong>武大信管情报学</strong></p><h2 id="保研前期准备："><a href="#保研前期准备：" class="headerlink" title="保研前期准备："></a>保研前期准备：</h2><p>​    面对2019年暑期的夏令营，早在寒假就开始搜集大量学校的信息，当时还不知道有类似保研通、保研岛这种保研信息平台，走了些弯路。<strong>寒假</strong>我做了几件事：</p><h3 id="1-简单梳理报名时间点："><a href="#1-简单梳理报名时间点：" class="headerlink" title="1.简单梳理报名时间点："></a>1.简单梳理报名时间点：</h3><p>​    将所要报夏令营学校的历年时间点大致梳理，比如像金融专业，有的学校的夏令营早在<strong>3、4月份</strong>就开始报名了，所以一定<strong>提前了解报名时间段</strong>，错过时间段这种低级错误千万不能犯，身边也确实有同学因为拖到最后一天报名，<strong>网崩了没报上</strong>的！</p><p>​    建议用表格排列好相关学校，因为夏令营竞争相对比较激烈，各路大神都出来秀肌肉，对于本科学校一般、排名一般、科研寥寥无几的同学可能会比较被动，学校如果报高了，会有被刷的风险，在不确定自己会不会被刷的情况下，一定得<strong>多报一些学校</strong>，同一档次的学校报几个，不要瞧不起某些学校，最后说不定就是你的保底学校要了你，每年情况都不一样，结果瞬息万变，不要一味的相信自己专业学长学姐的经验，我们宿舍当时都过分依赖去年学长的经验，下意识认为今年武大水利也会要三四个我们专业的，结果只要了俩，一切以<strong>稳</strong>为前提！！</p><table><thead><tr><th align="center">心仪学校</th><th align="center">学院网址</th><th align="center">时间点</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">武汉大学</td><td align="center">xxx</td><td align="center">6月</td><td align="center">xxx</td></tr><tr><td align="center">上海交大</td><td align="center">xxx</td><td align="center">7月</td><td align="center">xxx</td></tr></tbody></table><h3 id="2-完成一份得体的简历、个人陈述："><a href="#2-完成一份得体的简历、个人陈述：" class="headerlink" title="2.完成一份得体的简历、个人陈述："></a>2.完成一份得体的简历、个人陈述：</h3><p>​    一份得体的简历在面试过程中尤为重要，寒假时间较多，可以抽时间做好一份‘完美’的简历，我印象中，面试的老师有对我简历有表示满意的，有位老师事后基本上就看我的简历跟我对话，面试过程中也不会去详细的看你的材料。</p><p>​    简历不需要太浮夸，过于注重美观也没必要，但是一定要<strong>简洁、调理清晰！</strong> 当时我觉得自己找的那种什么模板大礼包之类的好丑好丑，幸亏女友给我了一个她用的，清新好看又五脏俱全！页数最多不超过两页，期初我做了两页，后来删了一页，感觉一页更加精华和简约，把一页纸尽量塞满你的大学成就，低含金量的就不要放上去了，比如一个院唱歌、拔河比赛之类的，尽量放和学习相关的内容，我的简历大致分为以下几个板块：</p><img src="https://pic2.zhimg.com/80/v2-665f964a29f7389edccee185683736dd_1440w.jpg" alt="简历" style="zoom: 33%;" /><p>简历中几个注意的点：</p><ol><li><p>登记照一定去好一点的照相馆照，一般也就不到100块吧，但是可以把你修的还阔以的！</p></li><li><p>基本信息中的<strong>邮箱地址</strong>，一定要用学校邮箱，这样显得更加正式，千万别用qq邮箱，后缀显得没有识别度，老师喜欢用xxx.edu.cn来识别你的学校，起码不会把你当成垃圾邮件忽略！</p></li><li><p>本科如果做了科研，可以在基本信息中加上本科研究方向，尽可能与你申请的学校相近！如果差别太大就别写了。</p></li><li><p>软件掌握情况，可以简要写几个<strong>硬实力</strong>一点的，office能不写就不写，论文排版方面，如果做过数学建模的同学，应该知道latex，有的老师面试时候特意问是不是用latex排的版，可能老师比较喜欢用吧，会用的可以写上去！编程等工科的软件就不用说了，会的越多越好！</p></li><li><p>论文、软著、专利这些学术成果尽量用引用的格式来写，这样一目了然，论文中把自己的名字突出即可！（仿照老师网上的论文展示）</p></li></ol><p><strong>总结一下</strong>：整份简历要尽量<strong>匹配</strong>你所报的学校方向和老师，突出对方想看到的信息（可以加红），所以不同学校简历侧重点一定有所不同，需要小改动，建议后期直接用pdf编辑器完成，对于小改动效率比较高！</p><p>​    个人陈述需要根据每个学校的要求来写，字数要求不一，通过查阅去年该学校学院的通知来获知，额，我的文采很差很差，很感谢我的女友，个人陈述写了初稿之后给了女友和阿姨帮忙修改，反复修改之后，一份满意的个人陈述就大功告成了，前期我也看过一些网上的，但是写的太差太差了，可能真正用心写的别人也不会放在网上吧，所以不要期望于把别人的拿过来改改就行，每个人的经历都是独一无二的，别人不能替代你的想法！自己用心好好写，好好改就好了！</p><h3 id="3-提前准备好相关证明材料："><a href="#3-提前准备好相关证明材料：" class="headerlink" title="3.提前准备好相关证明材料："></a>3.提前准备好相关证明材料：</h3><p>​    由于大三下学期会超级无敌忙，建议在寒假准备好相关的证明材料，把奖状、证书、前五个学期的排名、成绩单都准备好、开学直接去学院盖章就行了，不要拖到最后！！避免扎堆，每份证明做好pdf电子版本，后期每个学校都需要打印很多材料！</p><h3 id="4-主攻笔试、面试："><a href="#4-主攻笔试、面试：" class="headerlink" title="4.主攻笔试、面试："></a>4.主攻笔试、面试：</h3><p>​    通过了层层筛选，很荣幸你通过了学校初审，剩下的重中之重当当然是笔试和面试，但是如果真正等到暑假再准备，对于跨专业的同学来说就不太够了，如果准备跨专业，寒假就可以开始准备相关课程的学习了，同时一定得找到去年去了该校夏令营的学长学姐问清楚笔试面试的题目，这个很重要！我当时就是有学长给了我英语面试的题库，面试过程还算比较满意，只要做足了准备，就不会怕！</p><p>​    <strong>注意了！！</strong>有论文的同学，一定把自己写的论文弄熟练，虽然是自己写的，时间长了难免会忘记一些细节，有论文在面试过程中很占优势，去了几个学校能感觉到本科手握一两篇论文的相对比较少（顶尖学校顶尖专业除外）所以一定要把这个优势发挥好，能够和面试老师对答如流，其实有些老师真的不一定对你的研究很感兴趣，就是问问你的思路啊，其中某个模型的优劣？或者让你总体概括一下你的论文，武大水利曾有一位老师就是问我”<strong>你来几句话介绍一下你的论文，考察一下你的概括能力</strong>“</p><h2 id="夏令营和预推免的区别"><a href="#夏令营和预推免的区别" class="headerlink" title="夏令营和预推免的区别"></a>夏令营和预推免的区别</h2><p>​    夏令营的竞争压力要远大于九月的预推免，因为夏令营很多都是一个大佬报了N个学校，最后隔了N-1的，很多学校面临被割的风险，所以在九月预推免中还会在招一波，实质上两者是一样的，只是考核方式大多学校预推免简单一点。</p><p>​    不要以为夏令营他没要你，预推免就一定不会要你，很多时候学校他也怕被割，预推免需要招一波学生，又比如我们宿舍，夏令营时候看见北航交通A+学科很难进，结果九月我们宿舍不敢报，保研边缘的同学报了被顺利录取，这种案例还真不少，认得的双非的同学最后去的学校都很好，关键在于你敢不敢报！！很多时候不是学校不要你，是你压根没给他机会选你啊！</p><p>​    综上，对自己有个相对客观的定位后，尽可能多报一些学校，千万不要只报两三个学校，虽然报名过程很麻烦，但是挺一挺就过去了，身边当时嫌麻烦没报名的同学最后基本上都后悔了，保研就这一次，在有限时间内做出自己最优的决策，去到自己最理想的学校，学自己喜欢的专业，尽量不要给自己留下遗憾！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;保研经验分享&quot;&gt;&lt;a href=&quot;#保研经验分享&quot; class=&quot;headerlink&quot; title=&quot;保研经验分享&quot;&gt;&lt;/a&gt;保研经验分享&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=</summary>
      
    
    
    
    <category term="升学就业" scheme="https://ericzikun.github.io/categories/%E5%8D%87%E5%AD%A6%E5%B0%B1%E4%B8%9A/"/>
    
    <category term="保研" scheme="https://ericzikun.github.io/categories/%E5%8D%87%E5%AD%A6%E5%B0%B1%E4%B8%9A/%E4%BF%9D%E7%A0%94/"/>
    
    
    <category term="保研" scheme="https://ericzikun.github.io/tags/%E4%BF%9D%E7%A0%94/"/>
    
    <category term="经验" scheme="https://ericzikun.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
    <category term="升学，读研" scheme="https://ericzikun.github.io/tags/%E5%8D%87%E5%AD%A6%EF%BC%8C%E8%AF%BB%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装gensim踩坑</title>
    <link href="https://ericzikun.github.io/2020/04/08/Mac%E5%AE%89%E8%A3%85gensim%E8%B8%A9%E5%9D%91/"/>
    <id>https://ericzikun.github.io/2020/04/08/Mac%E5%AE%89%E8%A3%85gensim%E8%B8%A9%E5%9D%91/</id>
    <published>2020-04-08T02:22:27.000Z</published>
    <updated>2020-10-01T13:03:18.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac环境pip-install-gensim报错"><a href="#mac环境pip-install-gensim报错" class="headerlink" title="mac环境pip install gensim报错"></a>mac环境pip install gensim报错</h1><p>用pip安装gensim包时，显示：<br>ERROR: Exception:<br>Traceback (most recent call last):</p><p>用了多种方式未果，采用镜像安装成功！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install   gensim  -i  https://pypi.doubanio.com/simple</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac环境pip-install-gensim报错&quot;&gt;&lt;a href=&quot;#mac环境pip-install-gensim报错&quot; class=&quot;headerlink&quot; title=&quot;mac环境pip install gensim报错&quot;&gt;&lt;/a&gt;mac环境pip in</summary>
      
    
    
    
    <category term="技巧" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="报错" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/%E6%8A%A5%E9%94%99/"/>
    
    
    <category term="报错" scheme="https://ericzikun.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>mac安装cnpm踩坑</title>
    <link href="https://ericzikun.github.io/2020/04/08/mac%E5%AE%89%E8%A3%85cnpm%E8%B8%A9%E5%9D%91/"/>
    <id>https://ericzikun.github.io/2020/04/08/mac%E5%AE%89%E8%A3%85cnpm%E8%B8%A9%E5%9D%91/</id>
    <published>2020-04-08T02:21:50.000Z</published>
    <updated>2020-10-01T13:03:13.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac安装cnpm报错"><a href="#mac安装cnpm报错" class="headerlink" title="mac安装cnpm报错"></a>mac安装cnpm报错</h1><p>错误如图：<br><img src="https://img-blog.csdnimg.cn/20200225104733764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>报错原因：npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules<br>此报错原因是由于没有权限，加上sudo即可解决！<br>sudo npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>大功告成：<br><img src="https://img-blog.csdnimg.cn/20200225104918642.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mac安装cnpm报错&quot;&gt;&lt;a href=&quot;#mac安装cnpm报错&quot; class=&quot;headerlink&quot; title=&quot;mac安装cnpm报错&quot;&gt;&lt;/a&gt;mac安装cnpm报错&lt;/h1&gt;&lt;p&gt;错误如图：&lt;br&gt;&lt;img src=&quot;https://img-blo</summary>
      
    
    
    
    <category term="技巧" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="报错" scheme="https://ericzikun.github.io/categories/%E6%8A%80%E5%B7%A7/%E6%8A%A5%E9%94%99/"/>
    
    
    <category term="报错" scheme="https://ericzikun.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
</feed>

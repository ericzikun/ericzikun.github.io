<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis缓存穿透 击穿 雪崩</title>
      <link href="2022/02/14/deep19-Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%87%BB%E7%A9%BF-%E9%9B%AA%E5%B4%A9/"/>
      <url>2022/02/14/deep19-Redis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%87%BB%E7%A9%BF-%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存请求流程"><a href="#缓存请求流程" class="headerlink" title="缓存请求流程"></a>缓存请求流程</h2><p>Redis缓存的雪崩、穿透、击穿属于日常工作中经常会遇到的经典问题，下面来一探究竟，他们的解决方案主要是：布隆过滤器、分布式锁（下次再写）<br><img src="https://img-blog.csdnimg.cn/0378bf2a880f45c8b84d9019b13ca178.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这是一个简单的客户端、服务端请求Redis的流程图，简单来说就是当用户向服务端进行访问时，服务端如果需要向数据库请求数据时，先去缓存中看有没有，有则直接返回，没有才会再去数据库中查询返回，这是一个正常的缓存流程。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p><img src="https://img-blog.csdnimg.cn/f989928a5e56421fb100e3ea1a9845ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>比如这个某宝的场景，当双十一来临之日，用户的访问量是非常之大的，所以有很多的数据是放进Redis中缓存起来，对应了Redis的key，并且设置了缓存失效时间是三小时，当双十一期间，购物超过三小时之后，缓存同时在一瞬间全部都失效了，导致所有的请求全部打到了数据库上，造成数据库响应不及时而挂掉，这时候就没办法对外提供该服务了。<br>简单来说：用户访问某宝，Redis中的key大面积失效，导致直接与数据库沟通，这种现象就叫缓存雪崩。<br>解决方案:</p><ul><li>设置失效时间，让他不要在同一时间失效，在设置缓存的时候，随机初始化失效时间，这样就不会让所有的缓存在同一时间全部失效，尽可能分散分布。</li><li>Redis一般都是集群部署，我们将热点key放到不同的节点上去，让这些热点缓存平均的分布在不同的节点上。</li><li>不设置缓存失效时间</li><li>跑定时任务，不断的刷新缓存，就是当缓存即将失效的时候再去让他延长三小时</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src="https://img-blog.csdnimg.cn/6da58d46056a49e39ef4ca0de694ad83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里有个场景，比如有个黑客想攻击我们的网站：<br>数据库的主键都是从0开始递增，是没有负数的，这个黑客一直用id&lt;0的方式向我们的服务器进行请求，redis自然没有这个id，就会向MySQL进行请求，这样就造成请求不断的打到数据库上，因为Redis并没有拦截id&lt;0的数据，直接被这样的非法请求给穿透了。<br>简单来说：缓存穿透就是Redis和数据库中都没有这样的数据，一般出现这种情况都不是正常的用户，都是恶意用户。<br>解决方案：</p><ul><li>当数据穿透Redis打到数据库上时，数据库返回的空值也要同步到Redis中去，起码保证这个非法id下次请求就直接从Redis中返回了</li><li>（黑客会换不同的非法参数），直接拉黑ip</li><li>（黑客也会换不同的ip），对输入的参数进行合法性校验</li><li>布隆过滤器</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p><img src="https://img-blog.csdnimg.cn/96f5eb51acc34c21ae25340625373c38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>比如这个场景：双十一的时候，把马爸爸的鞋拿出来拍卖，程序员就把鞋的数据放到了Redis缓存中，对应一个key，拍卖的时候，可想而知，大家的热情非常高涨，一直持续了4小时，这个鞋缓存失效了，导致大量的请求查询不到这个鞋的数据，进而全部打到数据库上，造成数据库响应不及时而挂掉。<br>简单来说：就是击穿某一个非常热点的key<br>解决方案：</p><ul><li>让缓存永远不过期（不太好）</li><li>最好的方式：分布式锁（在请求数据库这一步给上锁，这时候只有一个线程可以抢到锁，也就是只有一个线程能操作数据库，那么这时候数据库的压力就非常小了，当查询到这个热点key后又写会Redis中，其他没有抢到锁的线程，让他先睡几毫秒，再重新去redis中查询数据）</li></ul><p>思考：<br>一个项目可以分为三个阶段，上线前准备、项目运行中的准备、项目宕机后的处理措施。<br>比如项目上线前，可以给它搭成集群：Redis集群、MySQL集群、本身的分布式集群，这样可以形成高可用集群，增强了系统的健壮性。<br>项目运行过程中发生的一些问题，可以采用限流降级的处理措施，防止大量请求打到数据库上，造成系统的不可用。<br>如果系统真的挂掉了，可以集成一些报警系统，即使的通知我们的开发人员，同时快速重启这个项目，利用Redis的aof、rdb持久化机制，去快速的恢复缓存数据，最大限度的去减少系统不可用的时间</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存穿透 </tag>
            
            <tag> 缓存击穿 </tag>
            
            <tag> 缓存雪崩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器【1970年由布隆提出；Redis缓存穿透解决方案】</title>
      <link href="2022/02/14/deep18-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%901970%E5%B9%B4%E7%94%B1%E5%B8%83%E9%9A%86%E6%8F%90%E5%87%BA%EF%BC%9BRedis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%91/"/>
      <url>2022/02/14/deep18-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%901970%E5%B9%B4%E7%94%B1%E5%B8%83%E9%9A%86%E6%8F%90%E5%87%BA%EF%BC%9BRedis%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是布隆过滤器"><a href="#什么是布隆过滤器" class="headerlink" title="什么是布隆过滤器"></a>什么是布隆过滤器</h2><p>布隆过滤器（Bloom Filter），是1970年，由一个叫布隆的小伙子提出的，距今已经五十年了。</p><p>它实际上是一个很长的二进制向量和一系列随机映射函数，二进制大家应该都清楚，存储的数据不是0就是1，默认是0。</p><p>主要用于判断一个元素是否在一个集合中，0代表不存在某个数据，1代表存在某个数据。<br><img src="https://img-blog.csdnimg.cn/215960170bbf4f779149909e57969050.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="布隆过滤器用途"><a href="#布隆过滤器用途" class="headerlink" title="布隆过滤器用途"></a>布隆过滤器用途</h2><ul><li><p>解决Redis缓存穿透 </p></li><li><p>举例：在爬虫时，对爬虫网址进行过滤，已经存在布隆中的网址，不再爬取。</p></li><li><p>举例：垃圾邮件过滤，对每一个发送邮件的地址进行判断是否在布隆的黑名单中，如果在就判断为垃圾邮件。</p></li></ul><h2 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h2><p>存入过程<br>布隆过滤器上面说了，就是一个二进制数据的集合。当一个数据加入这个集合时，经历如下洗礼（这里有缺点，下面会讲）：</p><ol><li>通过K个哈希函数计算该数据，返回K个计算出的hash值</li><li>这些K个hash值映射到对应的K个二进制的数组下标</li><li>将K个下标对应的二进制数据改成1。</li></ol><p>例如，第一个哈希函数返回x，第二个第三个哈希函数返回y与z，那么： X、Y、Z对应的二进制改成1。<br><img src="https://img-blog.csdnimg.cn/ccb185430544403ab921a5275cee4918.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h2><p>布隆过滤器主要作用就是查询一个数据，在不在这个二进制的集合中，查询过程如下：</p><ol><li><p>通过K个哈希函数计算该数据，对应计算出的K个hash值</p></li><li><p>通过hash值找到对应的二进制的数组下标</p></li><li><p>判断：如果存在一处位置的二进制数据是0，那么该数据不存在。如果都是1，该数据存在集合中。（这里有缺点，下面会讲）</p></li></ol><h2 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h2><p>一般不能删除布隆过滤器里的数据，这是一个缺点之一，我们下面会分析。</p><h2 id="布隆过滤器的优缺点"><a href="#布隆过滤器的优缺点" class="headerlink" title="布隆过滤器的优缺点"></a>布隆过滤器的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>由于存储的是二进制数据，所以占用的空间很小</p><p>它的插入和查询速度是非常快的，时间复杂度是O（K），可以联想一下HashMap的过程</p><p>保密性很好，因为本身不存储任何原始数据，只有二进制数据</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>这就要回到我们上面所说的那些缺点了。</p><p>添加数据是通过计算数据的hash值，那么很有可能存在这种情况：两个不同的数据计算得到相同的hash值。<br><img src="https://img-blog.csdnimg.cn/5263f8a6caba46a2b780cc5c270ca85d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>例如图中的“你好”和“hello”，假如最终算出hash值相同，那么他们会将同一个下标的二进制数据改为1。这个时候，你就不知道下标为2的二进制，到底是代表“你好”还是“hello”。</p></blockquote><p>由此得出如下缺点：</p><ol><li><p>存在误判<br>假如上面的图没有存”hello”，只存了”你好”，那么用”hello”来查询的时候，会判断”hello”存在集合中。<br>因为“你好”和“hello”的hash值是相同的，通过相同的hash值，找到的二进制数据也是一样的，都是1。</p></li><li><p>删除困难<br>还是用上面的举例，因为“你好”和“hello”的hash值相同，对应的数组下标也是一样的。<br>这时候想去删除“你好”，连“hello”都一起删了。（0代表有这个数据，1代表没有这个数据）</p></li></ol><p>实现布隆过滤器<br>有很多种实现方式，其中一种就是Guava提供的实现方式。</p><ol><li>引入Guava pom配置 </li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;29.0-jre&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 预计要插入多少数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> size = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 期望的误判率</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> fpp = <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 布隆过滤器</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, fpp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入10万样本数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">      bloomFilter.put(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用另外十万测试数据，测试误判率</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &lt; size + <span class="number">100000</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(i + <span class="string">"误判了"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"总共的误判数:"</span> + count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7983195b95a0427387443fb2d3b66ae0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="深入分析代码"><a href="#深入分析代码" class="headerlink" title="深入分析代码"></a>深入分析代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="keyword">static</span> &lt;T&gt; <span class="function">BloomFilter&lt;T&gt; <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Funnel&lt;? <span class="keyword">super</span> T&gt; funnel, <span class="keyword">long</span> expectedInsertions, <span class="keyword">double</span> fpp, Strategy strategy)</span> </span>&#123;</span><br><span class="line">    。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>funnel：数据类型(一般是调用Funnels工具类中的)</li><li>expectedInsertions：期望插入的值的个数</li><li>fpp：误判率(默认值为0.03)</li><li>strategy：哈希算法</li></ul><h3 id="调整fpp误判率"><a href="#调整fpp误判率" class="headerlink" title="调整fpp误判率"></a>调整fpp误判率</h3><p>情景一：fpp = 0.01</p><ul><li>误判个数：947<br><img src="https://img-blog.csdnimg.cn/11bcaf53dfeb4145aec70d3d786ae394.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>占内存大小：9585058位数<br><img src="https://img-blog.csdnimg.cn/8173ae884909482ba4263d974888df7d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h2 id="情景总结"><a href="#情景总结" class="headerlink" title="情景总结"></a>情景总结</h2></li><li>误判率可以通过fpp参数进行调节</li><li>fpp越小，需要的内存空间就越大：0.01需要900多万位数，0.03需要700多万位数。</li><li>fpp越小，集合添加数据时，就需要更多的hash函数运算更多的hash值，去存储到对应的数组下标里。（忘了去看上面的布隆过滤存入数据的过程）</li></ul><h2 id="Redis缓存穿透解决方案：布隆过滤器"><a href="#Redis缓存穿透解决方案：布隆过滤器" class="headerlink" title="Redis缓存穿透解决方案：布隆过滤器"></a>Redis缓存穿透解决方案：布隆过滤器</h2><p>首先，布孔过滤器类似于一个白名单、黑名单，主要元素就是判断元素存不存在一个过滤器中，核心在此。</p><p><img src="https://img-blog.csdnimg.cn/c1fa52df01bf41e99ecccc5884f1f9d6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>场景：<br>前端发送一个查询请求，通过参数key，首先通过布隆过滤器，如果不存在过滤器（白名单）中，就会被过滤器给拦截，然后直接返回这个空数据给前端；如果key存在于过滤器中，就会往下执行正常的查Redis、mysql的流程；<br>这里有个流程4：如果mysql中查询不到这个key，说明什么？说明key在白名单中，单数MySQL查不到，也就是说布隆过滤器误判了！那么这个4路线就是打算把这个误判给删除，以防止下次重复同样的请求，但是由于布隆过滤器哈希碰撞导致删除很难（容易误伤），所以这个线路4是实际走不通的！<br>注意</p><ol><li>整体来说，由于我们前面说到布隆过滤器的误判概率是比较小的，所以直接打到MySQL的概率也就小，这种情况不用过于担心！</li><li>所有合法参数key都要放到布隆过滤器、Redis中。</li></ol><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><p><img src="https://img-blog.csdnimg.cn/83675d075f644ef09d157031b5847517.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>场景:某视频网站推送视频给用户<br>布隆过滤器作用:当黑名单使用。<br>要求:已经推送过的视频,不在推送给用户<br>流程:当推送给用户一批视频时,先判断这些视频是否存在过滤器里,如果存在就不推送给用户,不存在就推送给用户,同时将推送过的视频存入过滤器黑名单里。防止下次重复推送。</p><p>代码：<br>用户实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String maYunPhone = <span class="string">"18890019390"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决缓存穿透—白名单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonBloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造Redisson</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> RedissonClient redisson = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> RBloomFilter&lt;String&gt; bloomFilter = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">      Config config = <span class="keyword">new</span> Config();</span><br><span class="line">      config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//构造Redisson</span></span><br><span class="line">      redisson = Redisson.create(config);</span><br><span class="line">      <span class="comment">//构造布隆过滤器</span></span><br><span class="line">      bloomFilter = redisson.getBloomFilter(<span class="string">"userIdFilter"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将查询数据放入Redis缓存和布隆过滤器里</span></span><br><span class="line">      initData(redisson, bloomFilter);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    User user = getUserById(<span class="number">2L</span>);</span><br><span class="line">    System.out.println(<span class="string">"user对象为："</span> + JSON.toJSONString(user));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">(RedissonClient redisson, RBloomFilter&lt;String&gt; bloomFilter)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span></span><br><span class="line">      bloomFilter.tryInit(<span class="number">100000000L</span>,<span class="number">0.01</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//将id为1的数据，插入到布隆过滤器中</span></span><br><span class="line">      bloomFilter.add(<span class="string">"1"</span>);</span><br><span class="line">      bloomFilter.add(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将id为1对应的user数据，插入到Redis缓存中</span></span><br><span class="line">      redisson.getBucket(<span class="string">"1"</span>).set(<span class="string">"&#123;id:1, userName:'张三', age:18&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">null</span> == id) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String idKey = id.toString();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 开始模拟缓存穿透</span></span><br><span class="line">      <span class="comment">// 前端查询请求key</span></span><br><span class="line">      <span class="keyword">if</span> (bloomFilter.contains(idKey)) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 通过了过滤器白名单校验，去Redis里查询真正的数据</span></span><br><span class="line">          RBucket&lt;Object&gt; bucket = redisson.getBucket(idKey);</span><br><span class="line">          Object object = bucket.get();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果Redis有数据，直接返回该数据</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != object) &#123;</span><br><span class="line">              System.out.println(<span class="string">"从Redis里面查询出来的"</span>);</span><br><span class="line">              String userStr = object.toString();</span><br><span class="line">              <span class="keyword">return</span> JSON.parseObject(userStr, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果Redis为空，去查询数据库</span></span><br><span class="line">          User user = selectByDb(idKey);</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 将数据重新刷进缓存</span></span><br><span class="line">              redisson.getBucket(id.toString()).set(JSON.toJSONString(user));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> User <span class="title">selectByDb</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"从MySQL里面查询出来的"</span>);</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setId(<span class="number">1L</span>);</span><br><span class="line">      user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">      user.setAge(<span class="number">18</span>);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分转载于：<br><a href="https://www.cnblogs.com/itlaoge/p/14219693.html" target="_blank" rel="noopener">https://www.cnblogs.com/itlaoge/p/14219693.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 布隆过滤器 </tag>
            
            <tag> 缓存穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL用了索引为什么还是查询很慢？查询速度和什么因素有关？</title>
      <link href="2022/02/13/deep17-MySQL%E7%94%A8%E4%BA%86%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%BE%88%E6%85%A2%EF%BC%9F/"/>
      <url>2022/02/13/deep17-MySQL%E7%94%A8%E4%BA%86%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%BE%88%E6%85%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近几个月在华为实习的过程中，有个场景下取数，对于一个sn号的查询竟然长达几分钟的时间，批量查几十个sn时，则需要一二十分钟的sql查询时间，故专门对这个问题进行一些整理和思考。<br>首先，这个数据库是存在HIVE上，经过和一些前辈交流后，了解到企业中的数据库主要分为两大种：OLTP（on-line transaction processing）事务型、OLAP（On-Line Analytical Processing）分析型。</p><ul><li>OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。</li><li>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。 </li></ul><ol><li>那么，事务型数据库OLTP主要以小的事务以及小的查询为主，评估其系统的时候，一般看其每秒执行的Transaction以及Execute SQL的数量。在这样的系统中，单个数据库每秒处理的Transaction往往超过几百个，或者是几千个，Select 语句的执行量每秒几千甚至几万个。OLTP系统最容易出现瓶颈的地方就是CPU与磁盘子系统。</li><li>OLAP，也叫联机分析处理（Online Analytical Processing）系统，有的时候也叫DSS决策支持系统，就是我们说的数据仓库。在这样的系统中，语句的执行量不是考核标准，因为一条语句的执行时间可能会非常长，读取的数据也非常多。所以，在这样的系统中，考核的标准往往是磁盘子系统的吞吐量（带宽），如能达到多少MB/s的流量。磁盘子系统的吞吐量则往往取决于磁盘的个数，这个时候，Cache基本是没有效果的，数据库的读写类型基本上是db file scattered read与direct path read/write。应尽量采用个数比较多的磁盘以及比较大的带宽，如4Gb的光纤接口。<br>在OLAP系统中，常使用分区技术、并行技术。</li></ol><h1 id="查询速度影响因素"><a href="#查询速度影响因素" class="headerlink" title="查询速度影响因素"></a>查询速度影响因素</h1><p>回到正题，为什么我用了索引，查询速度还是很慢？到底会出现什么问题，以及如何去解决？本文来探究一二。</p><p>先给出结论：MySQL用到了索引和执行时间的长短没有必然关系，确定查询执行效率的是 “<strong>扫描行数</strong>”与“<strong>回表次数</strong>”。 </p><ul><li>扫描行数</li><li>回表次数</li></ul><p>在实际的sql优化过程中，也是尽量去优化这两块影响因素。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>举例说明：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">a <span class="built_in">varchar</span>(<span class="number">64</span>)<span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">b <span class="built_in">int</span>(<span class="number">11</span>)<span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line"><span class="keyword">KEY</span> a(a) <span class="keyword">ENGINE</span>-<span class="keyword">InnoDB</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> OK, O <span class="keyword">rows</span> affected(<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><br>先建一个表，InnoDB必须有一个主键索引，这里给id为主键，其次有a、b两个字段，再给a字段（姓名字段）一个普通索引，目前就有了主键索引和a索引树结构，如下图所示：</p><p> <img src="https://img-blog.csdnimg.cn/b00afa5810134e7da7773d258828dc5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>这里再回顾一下，InnoDB默认有主键索引，存储的是主键id1、2、3…，它是采用B+ tree的聚簇索引，所有的数据都存放在叶子结点中，而普通索引a的数据只包含对应的id，没有整行数据，所以如果通过普通索引找到了某个id，需要select别的字段，则还需要回表找主键索引中的整行数据取值！</p></blockquote><blockquote><p>慢查询:<br>sq中慢查询阈值为ong_ query time=10s<br>当sq执行后大于10s就会被记录到慢sq志<br>般建议缩小到1s，一般来说当并发系统中某一条sql查询时间大于1s了，对整体系统的性能影响就会比较大了。</p></blockquote><h2 id="情况1："><a href="#情况1：" class="headerlink" title="情况1："></a>情况1：</h2><p>select * from t #全表扫描<br><img src="https://img-blog.csdnimg.cn/e21558f2aa7a49b787b25de97d3f242e.png" alt="在这里插入图片描述"></p><p>其中，type=ALL表示扫描所有行，速度是最慢的，从头到尾扫描。</p><h2 id="情况2："><a href="#情况2：" class="headerlink" title="情况2："></a>情况2：</h2><p>select * from where id = 2 #主键索引快速过滤<br><img src="https://img-blog.csdnimg.cn/b49d907f292a4237b0546dfbc6983191.png" alt="在这里插入图片描述"><br>根据主键id索引进行查询，这时采用了key也就是索引，速度是最快的，也不用回表</p><h2 id="情况3："><a href="#情况3：" class="headerlink" title="情况3："></a>情况3：</h2><p>select a from t #索引覆盖，无需回表<br><img src="https://img-blog.csdnimg.cn/a5bac585102b40c897df3d3857684666.png" alt="在这里插入图片描述"><br>采用了索引覆盖，查询速度也是很快的，因为也不用回表，采用了索引为a，取的也是a字段，也是一步到位。</p><blockquote><p>在MySQL大分页的过程中也用到了索引覆盖的方式进行了优化</p></blockquote><h2 id="情况4："><a href="#情况4：" class="headerlink" title="情况4："></a>情况4：</h2><p>select * from t where id&gt;0 #基于id扫描全表，且产生大量回表，速度慢<br> <img src="https://img-blog.csdnimg.cn/a8c3b2516da84b6d9ff825cd2f52840a.png" alt="在这里插入图片描述"></p><p>用*或者多个字段可能要全表扫描。<br>一般来说查询的数据量要是全表的25%以内，数据库才会判断有走索引的价值，这里不能光看key中有primary就认为走了索引就很快，而还要看row中扫描了多少行，这种情况下row中的行数就等于表的总行数，查询的速度并不快，是全表扫描！</p><h2 id="情况5："><a href="#情况5：" class="headerlink" title="情况5："></a>情况5：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create index t on(a, b)</span><br><span class="line">假设t表有1亿人,其中600万姓“张”</span><br><span class="line"></span><br><span class="line">select* from t <span class="built_in">where</span> a=张三 and b=23</span><br><span class="line">索引选择性就很好</span><br><span class="line"></span><br><span class="line">select from t <span class="built_in">where</span> a like 5k%<span class="string">' and b =23</span></span><br><span class="line"><span class="string">索引选择性较差,但仍会用到索引</span></span><br></pre></td></tr></table></figure><p>作为联合索引，根据前面博客提到的最左前缀法则，我们必须在where中按照联合索引的顺序来查，在左索引基础上查右索引，所以第一句sql是比较快的，直接可以在联合索引树中找到张三这个人；而第二句由于使用了模糊查询，如果姓张的人超过了总数的10%、15%，MySQL就会认为这样的选择性太差，就不会给使用索引了！（没有使用索引的价值！）而转去走全表扫描了。这里的设计是1亿人中有600万人姓“张”，所以虽然索引选择性相对较差，但是MySQL认为还是可以用索引。<br>MySQL5.6之后做的优化：index condition pushdown，优化了回表数量级</p><ul><li>mysq5.6以前,基于左侧列对600万张回表筛选23岁数据,速度比较慢</li><li>mysq5.6以后,基于联合索引左侧列a筛选“张”再去筛选“23岁”,再讲符<br>合条件的id回表提取,回表数量大幅度减少<br>这种新特性称为” index condition pushdown”</li></ul><p>几种调优方式：</p><ol><li>增加多种不同规格索引提高索引选择性(5~6组)</li><li>空间换时间,定时任务增加时报、日报、约报等中间结果</li><li>边缘运算数据压缩:物联网惯用伎俩<br>4硬件调优:增大 innodb buffer pool多利用内存,减少硬盘回表<blockquote><p>解释：<br>2.每一个小时 每一分钟去做计算，做汇总，而不是全量汇总，这样数据量就小很多了<br>3.边缘运算：比如几百万的基站给服务器去每秒上传数据，那么服务器的压力肯定是很大的，如果过往一个小时内数据没有任何异常，则可以用一个表达式把一个小时的数据状态记录压缩成一条记录，实现数据的压缩，再向上上报一次，压力大大降低<br>4.从硬件角度优化，增大内存！</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> InnoDB </tag>
            
            <tag> sql优化 </tag>
            
            <tag> 查询速度 </tag>
            
            <tag> OLAP </tag>
            
            <tag> OLTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探MySQL 读已提交和可重复读级别下 MVCC并发版本控制实现原理</title>
      <link href="2022/02/07/deep16-MySQL-%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4%E5%92%8C%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%BA%A7%E5%88%AB%E4%B8%8B-MVCC%E5%B9%B6%E5%8F%91%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>2022/02/07/deep16-MySQL-%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4%E5%92%8C%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%BA%A7%E5%88%AB%E4%B8%8B-MVCC%E5%B9%B6%E5%8F%91%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="事务ACID回顾"><a href="#事务ACID回顾" class="headerlink" title="事务ACID回顾"></a>事务ACID回顾</h2><p>InnDB引擎下，具备事务功能，事务具备ACID（原子性、一致性、隔离性、持久性），一致性其实是目的，由原子性、隔离性和持久性共同来保证！原子性是由undo log来进行保证的（回滚的时候采用undo log），持久性由InnoDB的redo log、undo log、 binlog来保证，而隔离性指的是它有四个隔离级别，分别是：</p><ul><li><p>读未提交</p></li><li><p>读提交</p></li><li><p>可重复读</p></li><li><p>串行化</p><p><img src="https://img-blog.csdnimg.cn/067f353e47b34f71b0e5823ca2314725.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li></ul><p>其中我们用的比较多的是 读提交（RC） 和 可重复读（RR），下面来详细介绍一下他们是如何通过MVCC多版本并发控制实现的。</p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><p>在MySQL InnoDB存储引擎下,RC、RR基于MVCC（<strong>多版本并发控制</strong>）进行并发事务控制</p><p>MVCC是基于”数据版本”<strong>对并发事务进行访问</strong></p><p>下面举一个例子来说明实现原理：</p><p> <img src="https://img-blog.csdnimg.cn/a8f9adfd0fa549b99d39cea25a74e2fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>现在有三个事务，事务id分别是 trx_id = 1、2、3、4；前面三个事务都对张三这个人做了name的更新并且提交，事务4就是在两个时间段去做了“读”操作，我们先来看在“读提交”的隔离级别下，事务4的两次读操作会读出什么结果呢？</p><p>如果是RC级别，那么 select1 = 张三，select2=张小三，在图中可以看出这个时序关系。</p><p>如果是RR级别，那么select1= 张三，select2=张三，两次结果相同。</p><p>下面来分析底层实现原理：</p><h3 id="undo-log版本链"><a href="#undo-log版本链" class="headerlink" title="undo log版本链"></a>undo log版本链</h3><p>先来了解一下undo log版本链，他用链的形式存储了数据的变化：</p><p> <img src="https://img-blog.csdnimg.cn/481ad58818164bd0b199ce5236c82d8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>其中trx_id代表导致当前数据版本的事务id，DB_ROLL_PTR储存着上一个数据版本的数据地址</p><blockquote><p>这里补充一个undo log回滚的过程：</p><p>如果要回滚，那么就得</p><p>比如插入一条记录，得把这个记录的id记录下来，回滚的时候直接删掉这个id即可。</p><p>删除记录则要把记录的内容保留，回滚的时候插入即可。修改的时候则把旧值记录，回滚时直接把旧值写入。</p><p>问：</p><p>undo log不是会被删除吗？中间数据万一被删了版本链不就断了吗？</p><p>undo log版本链不是立即删除，mysql确保版本链数据不再被“引用”后再进行删除！</p></blockquote><h3 id="ReadView"><a href="#ReadView" class="headerlink" title="ReadView"></a>ReadView</h3><p>ReadView就是读视图，</p><p>ReadView是“<strong>快照读</strong>”SQL执行时MVCC提取数据的<strong>依据</strong>.</p><p><strong>快照读就是最普通的Select查询SQL语句</strong></p><p>当前读指代执行下列语句时进行数据读取的方式（比如插入或者删除数据，必须是最新的表的状态下去做变更操作！）</p><p>Insert、Update、Delete、</p><p>Select…for update</p><p>Select…lock in share mode</p><p>只有当快照读的时候才会用到MVCC</p><p>ReadView的数据结构：</p><p>ReadView是一个数据结构，包含4个字段</p><ul><li>m_ids:当前活跃的事务编号集合</li><li>min_trx_id:最小活跃事务编号</li><li>max_trx_id:预分配事务编号，当前最大事务编号+1</li><li>creator_trx_id:ReadView创建者的事务编号</li></ul><h3 id="读已提交（RC）下"><a href="#读已提交（RC）下" class="headerlink" title="读已提交（RC）下"></a>读已提交（RC）下</h3><p>读已提交（RC）：在每执行一次快照读的时候，都去生成一个ReadView，所以两次生成了两个不同的ReadView读视图</p><p><img src="https://img-blog.csdnimg.cn/e546b3e4b7614607a94298dfa44912fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/13d0001ccbcd4131b89202f3a34dd46f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>分析：</p><p>在事务4的第一个select语句执行时，生成了一个ReadVIew，它是用来判断读取undo log版本链中具体哪一个数据版本的，根据右侧的规则一步步进行判断即可，</p><p>举例：</p><p>先对TRX_ID = 3进行判断：</p><p>从undo log的最新一个版本（TRX-ID = 3）开始遍历，当前的事务id为3，不等于creator_id，也就是说，select的事务和这个数据版本不是同一个事务，那就继续向下判断（如果相等，说明select事务之前可能做了一个更新操作，之后才select 是同一个事务中的前后操作 所以肯定是可以读的！）</p><p>继续判断：当前的事务id和min_trx_id相比，比min要大，所以还得继续判断（如果确实比min小，那么说明是在最小活跃事务之前数据提交得，是可以访问的）</p><p>继续判断：当前事务id和max_trx_id相比，比max要小，所以还得继续判断（如果比max大，说明这个数据版本在的事务是在ReadView生成之后才开启的，不允许访问）</p><p>继续判断：如果当前事务在min和max之前，就是最小活跃事务和最大活跃事务之间，并且还要判断当前事务存在于活跃事务中（m_ids：记录了还有哪些事务没有被提交），如果不在活跃事务中也就是提交了，那就可以访问</p><p>先对TRX_ID = 2进行判断：</p><p>…</p><p>先对TRX_ID = 1进行判断：</p><p>满足条件 trx_id &lt; min_trx_id(2) 成立，说明在最小活跃事务之前就提交了已经，可以访问！</p><h3 id="可重复读（RR）下"><a href="#可重复读（RR）下" class="headerlink" title="可重复读（RR）下"></a>可重复读（RR）下</h3><p>仅在第一次执行快照读时生成ReadView，后续快照读复用前面的ReadVIew</p><p> <img src="https://img-blog.csdnimg.cn/7f4b58ac7060498a942767566ec95664.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>RR级别下使用MVCC能避免幻读吗？</p><p>能，但不完全能！</p><ol><li>连续多次快照读，ReadView会产生复用，没有幻读问题</li><li>当两次快照读之间存在当前读，<strong>ReadView会重新生成，导致产生幻读</strong></li></ol></blockquote><p>举例：</p><p>在事务B中两次select快照读的中间有一个 更新语句（当前读），这种情况下，第二次的快照读生成的ReadVIew就会重新生成，而不是复用，否则在同一个事务中前后就会造成不一致！</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> InnoDB </tag>
            
            <tag> MVCC </tag>
            
            <tag> 隔离级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL底层采用B+ tree的原因剖析【哈希、平衡二叉、B树为啥不行？】</title>
      <link href="2022/01/27/deep14-MySQL%E5%BA%95%E5%B1%82%E9%87%87%E7%94%A8B-tree%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>2022/01/27/deep14-MySQL%E5%BA%95%E5%B1%82%E9%87%87%E7%94%A8B-tree%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL索引底层采用B-tree的原因"><a href="#MySQL索引底层采用B-tree的原因" class="headerlink" title="MySQL索引底层采用B+ tree的原因"></a>MySQL索引底层采用B+ tree的原因</h1><h2 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/ClosedHash.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/ClosedHash.html</a></p><p>通过 哈希 函数计算和类似取余运算，可以将元素插入到对应的bucket中，find的过程是o(1)时间复杂度，那find速度这么快，为啥Mysql底层不用呢？<br> <img src="https://img-blog.csdnimg.cn/df8153bbe6144c2fa2ea631bf22dac01.gif" alt="在这里插入图片描述"></p><p>因为Mysql的查询涉及大量的范围查询，Hash索引这个无序集合，是不支持范围查询的，再比如mysql的排序查询（order by），而哈希是无序的，也无法支持！就像我们的uuid是无序的，不可能用他来做主键。</p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/AVLtree.html</a></p><p>平衡二叉树的左右子树的高度差不会大于1。</p><p>无论怎么插，高度差都会维持，</p><p>随着树的高度增加，他的查询速度也会逐渐变慢，</p><p>比如这里找8，一次就找到了，但是找10找了三次。</p><p>还有一个致命缺点，如果我们去查5，通过三次定位找到了5，如果要找大于5的数据，就要从5这个节点往回查找，找到6，7，再回到更上一层的8，往下再9、10，这样才把大于5的数据找出来了，想象一下，如果大于5的数据特别多，那么回旋查询的次数就会增多，在这种范围查找上的效率很低。</p><p>这就是平衡二叉树的缺点：</p><ul><li><p>高度越高，查询速度越慢</p></li><li><p>范围查找需要回旋的次数很大，效率低</p><p><img src="https://img-blog.csdnimg.cn/de7ce7d8c3814a3a955733f229b84e38.gif" alt="在这里插入图片描述"></p></li></ul><p><img src="https://img-blog.csdnimg.cn/8497978b36c145cca37c16a127c4617b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p><p> <img src="https://img-blog.csdnimg.cn/77e9a5963064495a8ad671671201ab37.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1c2b6713610e4b15bd504a2830e8a375.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>B树最大的特点就是一个节点可以存两个值</p><p>这样存储有什么好处呢？</p><p>对比平衡二叉树，同时存10个数字的情况下，平衡二叉树有4层，而B树只有三层。</p><p>树的高度上面，B树更优（毕竟一个节点存放的数字更多了，更紧凑）</p><p>变矮之后的好处就在于：查询的效率变高了，查数字的速度更快了</p><p>样例：之前平衡树找10需要找3次，而B树只用了2次。</p><p>所以，<strong>从平衡二叉树-&gt;B树，解决了树的高度的问题，树越矮，查询的效率越高。</strong></p><p>那么，B树存在回旋查找的问题吗？答案是肯定的：</p><p>比如要查找大于5的数，一样需要回旋到上一层的6、8…，所以B树的范围查找仍然不太理想。</p><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p><p> <img src="https://img-blog.csdnimg.cn/6eb238e2215348c082328ca82630ecf5.gif" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3e8f3c6e346942e2a52b2ca4a35a1647.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>B+树彻底解决了回旋查找的问题</p><p>它和B树的共同特点是一个节点可以存两个值，B+树和B树的明显区别就在叶子节点，B+树用了一个链表去解决了回旋查找的问题（比如查找大于5的数，找到5之后，通过链表直接把后面的数字全拿出来了），所以范围查找的效率极高。</p><p><strong>这也解释了为什么排序的时候要用索引去排序，因为B+树已经帮我们排好序了！我们按照索引排序的话，就不会触发文件内排序了！</strong></p><p>上面的树和叶子节点的关系：</p><ul><li><p>凡是非叶子结点出现的数组都会出现的叶子节点</p></li><li><p>非叶子节点只存储key，不存储value，这里的key就是这些数字索引，而叶子节点存储的除了key之外，还有value（数字的地址）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> B+树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL如何通过索引找到一条真实的数据？</title>
      <link href="2022/01/27/deep15-MySQL%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E6%89%BE%E5%88%B0%E4%B8%80%E6%9D%A1%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>2022/01/27/deep15-MySQL%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E6%89%BE%E5%88%B0%E4%B8%80%E6%9D%A1%E7%9C%9F%E5%AE%9E%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL如何通过索引找到一条真实的数据"><a href="#MySQL如何通过索引找到一条真实的数据" class="headerlink" title="MySQL如何通过索引找到一条真实的数据"></a>MySQL如何通过索引找到一条真实的数据</h1><h2 id="Mylsan和-InnoDB常见区别"><a href="#Mylsan和-InnoDB常见区别" class="headerlink" title="Mylsan和 InnoDB常见区别"></a>Mylsan和 InnoDB常见区别</h2><h3 id="事务方面"><a href="#事务方面" class="headerlink" title="事务方面"></a>事务方面</h3><p>noDB支持事务, MyISAM不支持事务。这是 MySQL将默认存储引擎从 MyISAM变成 innoDB的重要原因之</p><h3 id="外键方面"><a href="#外键方面" class="headerlink" title="外键方面"></a>外键方面</h3><p>nnoDB支持外键,而 MyISAM不支持。对一个包含外键的 innoDB表转为 MYISAM会失败。</p><h3 id="索引层面"><a href="#索引层面" class="headerlink" title="索引层面"></a>索引层面</h3><p>innoDB是<strong>聚集(聚簇)索引</strong>, MyISAM是非聚集(非聚簇)索引。后面会重点讲解这两种索引的区别<br>MyISAM支持 FULLTEXT类型的<strong>全文索引,</strong><br>innoDB不支持 FULLTEXT类型的全文索引,但是 innoDB可以使用 sphinx插件支持全文索引,并且效果更好。</p><h3 id="锁粒度方面"><a href="#锁粒度方面" class="headerlink" title="锁粒度方面"></a>锁粒度方面</h3><p>innoDB最小的锁粒度是行锁, MyISAM最小的锁粒度是表锁。<br>一个更新语句会锁住整张表,导致其他查询和更新都会被阻塞,因此并发访问受限</p><p>这也是MySQL将默认存储引擎从MyISAM变成InnoDB的重要原因之一。</p><h3 id="硬盘存储结构"><a href="#硬盘存储结构" class="headerlink" title="硬盘存储结构"></a>硬盘存储结构</h3><p>MyISAM在磁盘上存储成三个文件。第一个文件的名字以表的名字开始，扩展名指出文件类型。</p><ul><li>frm文件存储表的定义</li><li>数据文件的扩展名为.MND( MYData)</li><li>素引文件的扩展名是,MYr( MYIndex)</li></ul><p>Innodb存储引擎存储数据库数据，一共有两个文件（没有专门保存数据的文件）：</p><ul><li>frm文件存储表的定义</li><li>Ibd文件：数据和索引存储文件。数据以主键进行聚集存储，把真正的数据保存在叶子节点中。</li></ul><h3 id="聚簇索引-和非聚簇索引"><a href="#聚簇索引-和非聚簇索引" class="headerlink" title="聚簇索引 和非聚簇索引"></a>聚簇索引 和非聚簇索引</h3><h4 id="聚簇索引-InnoDB"><a href="#聚簇索引-InnoDB" class="headerlink" title="聚簇索引( InnoDB)"></a>聚簇索引( InnoDB)</h4><p>将<strong>数据存储</strong>与<strong>素引</strong>放到了一块,索引结构的<strong>叶子节点保存了数据</strong>（B+ tree）<br>表数据按照索引的顺序来存储的,也就是说索引项的顺序与表中记录的物理顺序一致。<br>InnoDB中,在聚簇索引之上创建的索引称之为辅助索引,像复合索引、前缀索引、唯一索引等等。</p><ul><li>聚簇索引默认是主键</li><li>如果表中没有定义主键, InnoDB会选择一个<strong>唯一的非空索引代替</strong>。【唯一非空索引】</li><li>如果没有这样的索引, InnoDB会在内部生成一个名为GEN_ CLUST INDEX的隐式的聚簇索引。</li></ul><h4 id="非聚簇索引-MyISAM"><a href="#非聚簇索引-MyISAM" class="headerlink" title="非聚簇索引( MyISAM)"></a>非聚簇索引( MyISAM)</h4><p>将数据与索引分开存储,表数据存储顺序与索引顺序无关。</p><h2 id="MyISAM索引查询数据过程"><a href="#MyISAM索引查询数据过程" class="headerlink" title="MyISAM索引查询数据过程"></a>MyISAM索引查询数据过程</h2><p><img src="https://img-blog.csdnimg.cn/8b845237939f4e40bc068520efd7c781.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>该图的左边是索引文件，右边是数据文件。</p><p>索引文件和数据文件是分开存储的。</p><p>之前提到过，索引是B+ tree存储的，左图的非叶子节点就是主键id，叶子结点存储的除了id外，还有每一行数据的物理存储地址，通过B+ tree找到id对应的地址，再通过右边的地址映射找到数据。</p><h2 id="InnoDB索引结构"><a href="#InnoDB索引结构" class="headerlink" title="InnoDB索引结构"></a>InnoDB索引结构</h2><p><img src="https://img-blog.csdnimg.cn/9cf035b3883946a5ae135935a6137ee2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> 对于InnoDB来说，它的索引和数据是存储到同一个文件里面去的，</p><ul><li>左图叫聚簇索引：InnoDB中以主键id为索引key</li><li>右图是辅助索引：别的字段为索引</li></ul><p>InnoDB同样是B+ tree，而这里和MyISAM引擎不同的是，叶子节点储存的不再是物理地址，而是真实的数据！</p><p>比如找id为15的数据，通过左图的B+ tree找到它对应的叶子结点，直接就把它整行的数据都拿出来了，不用再去找物理地址了！【和MyISAM区分开】</p><p>右图：辅助索引的叶子节点存储的是辅助索引key和它对应的id主键，而不是整行的数据！所以如果要如果user_name这个辅助索引找整行的数据，比如找user_name = Eric的整行数据，先要通过右图辅助索引找到它对应的id，然后再通过左图的聚簇索引找到它对应的叶子节点，从而才能拿到整行的数据！</p><p>这样就解释了，为什么 select的时候，尽量使用<strong>覆盖索引</strong>，也就是和后面检索条件中的索引尽可能一致或者是查它id，这样一次查到，而不用再去左图聚簇索引中查了！</p><h2 id="对比MyISAM和InnoDB"><a href="#对比MyISAM和InnoDB" class="headerlink" title="对比MyISAM和InnoDB"></a>对比MyISAM和InnoDB</h2><ul><li><p>MyISAM：无论是主键索引还是普通索引，查找数据的流程都是一样的，都会先去B+ tree找到对应叶子节点，再去物理地址取数据。【<strong>先找地址，再通过地址找数据</strong>】</p></li><li><p>InnDB，查找数据的流程分为两种类型</p><ul><li>聚簇索引：通过主键id能够直接取出全部数据（叶子节点中存放真实数据）</li><li>辅助索引：通过索引找到对应id，再通过聚簇索引的B+ tree找到真实数据，要找两次！</li></ul></li><li><p>InnoDB在<strong>聚簇索引</strong>的查询过程中比MyISAM快一些；InnoDB辅助索引的查询过程在一定程度上比MyISAM慢一些</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> B+树 </tag>
            
            <tag> 索引 </tag>
            
            <tag> InnoDB </tag>
            
            <tag> MyISAM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还不了解lambda？还再用迭代遍历操作集合？赶紧上Stream流！</title>
      <link href="2021/11/28/deep13-%E7%B3%BB%E7%BB%9F%E6%A2%B3%E7%90%86Java-lambda-Stream-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2021/11/28/deep13-%E7%B3%BB%E7%BB%9F%E6%A2%B3%E7%90%86Java-lambda-Stream-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程（Lambda-amp-amp-Stream）"><a href="#函数式编程（Lambda-amp-amp-Stream）" class="headerlink" title="函数式编程（Lambda &amp;&amp; Stream）"></a>函数式编程（Lambda &amp;&amp; Stream）</h1><p>参考：《Java8实战》+《B站三更草堂》</p><h1 id="以sort引入"><a href="#以sort引入" class="headerlink" title="以sort引入"></a>以sort引入</h1><p>匿名内部类-&gt;lambda</p><p>​    我们常常用传入Comparator来完成排序行为的传入，这里我们传进去的实际上是如何排序这个行为，lambda实际上就是让我们尽可能的去关注这个行为本身，至于Comparator这个接口里面要覆盖重写的方法叫啥，我们其实没必要过多的关心，关注一下返回类型就够了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">        Collections.sort(integers, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1 - o2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(integers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个简单例子很容易转换为lambda，这里刚开始不熟悉，可以直接使用IDEA的自动转换功能</p><p> <img src="https://img-blog.csdnimg.cn/c314e2b31afe4399b7ff22f750f4b8e3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>);</span><br><span class="line">       Collections.sort(integers, (o1, o2) -&gt; o1-o2);</span><br><span class="line">       System.out.println(integers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="几个官方提供的接口"><a href="#几个官方提供的接口" class="headerlink" title="几个官方提供的接口"></a>几个官方提供的接口</h1><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p>​    再来几个官方提供的常用接口，其实接口叫什么名字并不重要，具体的行为是我们程序员去设计的，我们只需要关注它的返回值类型就行了，比如Predicate这个接口</p><p>​    比如我们要对一组数做相同的判定操作，这个判定操作返回的就是布尔类型，每个数字是或否，那么官方提供的IntPredicate这个接口的test方法就能满足我们这个需求，我们只需要在调用printNum方法时，传入判定的具体内容，就可以灵活改变判定行为了，这个在《Java8实战》中聊的比较多，主要是为了方法的扩展性，当需求不断变更时，我们只需要去改变传入的行为即可，而不是整篇代码大幅度修改，那么显得并不那么优雅！<br><img src="https://img-blog.csdnimg.cn/51b61fd839a94533a53bc7daba18f5fd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       printNum(<span class="keyword">new</span> IntPredicate() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">           </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> value%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           &#125; &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(IntPredicate predicate)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">           <span class="keyword">if</span>(predicate.test(i))&#123; System.out.println(i);</span><br><span class="line">           &#125; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>​    Function函数简单来说，就是传入一个类型T，返回一个类型R，具体怎么操作T这个传入，自己来定行为即可！</p><p>这样就大大扩展了我们实际想去传入的这个行为，因为这个行为的扩展还包括了我们想灵活定制的传入传出类型！比如这里我们将字符串接受，返回Integer类型：<br><img src="https://img-blog.csdnimg.cn/ceb47129de1f41649027f79fb6bfa07e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer result = typeConver(<span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">R <span class="title">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"1235"</span>;</span><br><span class="line">        R result = function.apply(str);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c256eaf7438b450097306cd7cfb7cd50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>还可以对输出类型做改变，比如改成双层List：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = typeConver(<span class="keyword">new</span> Function&lt;String, List&lt;List&lt;Integer&gt;&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; apply(String s) &#123;</span><br><span class="line"></span><br><span class="line">                List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                integers.add(Integer.valueOf(s));</span><br><span class="line">                List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                list.add(integers);</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">R <span class="title">typeConver</span><span class="params">(Function&lt;String, R&gt; function)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"1235"</span>;</span><br><span class="line">        R result = function.apply(str);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/1865897b7c4b4e5ab1b32a3f66c0c27a.png" alt="在这里插入图片描述"></p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>​    这个接口返回的类型最简单，因为它没有返回，比如这个IntConsumer，接受的Int类型，啥也不返回，一般我们主要用于打印语句上：</p><p>​    当然还有Consumer<T>，void accept(T t)接受泛型输入</p><p> <img src="https://img-blog.csdnimg.cn/979d6217e97a4b8ab6d818ac4038d57b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       foreachArr(<span class="keyword">new</span> IntConsumer() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">               System.out.println(value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foreachArr</span><span class="params">(IntConsumer consumer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">           consumer.accept(i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p>生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p><p><img src="https://img-blog.csdnimg.cn/daea3d4c566743bd97fb570a08f2a8c0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="流Stream"><a href="#流Stream" class="headerlink" title="流Stream"></a>流Stream</h1><p>​    流的操作主要分为创建、中间操作、终结操作：</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>​    创建很简单，分为集合单列对象、数组、双列集合（Map-&gt;entrySet）</p><p>集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line">Stream&lt;Author&gt; stream = authors.stream();</span><br></pre></td></tr></table></figure><p>数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(arr); </span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of(arr);</span><br></pre></td></tr></table></figure><p>双列集合：</p><p>本质上还是将Map转化为单列集合entrySet 再做流操作，和前面一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">map.put(<span class="string">"蜡笔小新"</span>,<span class="number">19</span>);</span><br><span class="line">map.put(<span class="string">"黑子"</span>,<span class="number">17</span>);</span><br><span class="line">map.put(<span class="string">"日向翔阳"</span>,<span class="number">16</span>);</span><br><span class="line">Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><h3 id="流式debug"><a href="#流式debug" class="headerlink" title="流式debug"></a>流式debug</h3><p> <img src="https://img-blog.csdnimg.cn/fc7644b506234c1e9e16e7c4a413569c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>​    过滤操作，简单来说就是对集合中的元素根据每个判定条件筛选过滤，比如年龄都大于18、名字长度都小于3…<br>​    前面调到了Predicate，返回一个布尔类型判定, 这里的filter传入的就是该匿名内部类，可以对集合里面的元素对象的属性做任何值的判定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">       authors.stream()<span class="comment">//把集合转换成流</span></span><br><span class="line">               .distinct()<span class="comment">//先去除重复的作家</span></span><br><span class="line">               .filter(<span class="keyword">new</span> Predicate&lt;Author&gt;() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span>  author.getAge() &lt; <span class="number">18</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)<span class="comment">//筛选年龄小于18的</span></span><br><span class="line">               .forEach(author -&gt; System.out.println(author.getName()));<span class="comment">//遍历打印名字</span></span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()<span class="comment">//把集合转换成流</span></span><br><span class="line">                .distinct()<span class="comment">//先去除重复的作家</span></span><br><span class="line">                .filter(<span class="keyword">new</span> Predicate&lt;Author&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span>  author.getAge() &lt; <span class="number">18</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)<span class="comment">//筛选年龄小于18的</span></span><br><span class="line">                .forEach(author -&gt; System.out.println(author.getName()));<span class="comment">//遍历打印名字</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>​    map操作相当于是将集合里面的对象一一映射到另一个对象上去，比如我想拿到作者集合中的所有人名，类型为List&lt;String&gt;而不是List&lt;Author&gt;，这里就已经改变了集合中的元素类型了，按传统方法不用流的话，就要再new一个List&lt;String&gt;，遍历一遍List&lt;Author&gt;，不断的add，相当不优雅！这里直接用map操作得到想要的映射对象。</p><p>​    那么此处传入的接口应该是啥呢？很明显是前后类型不一致，传入的就是Function接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.map(<span class="keyword">new</span> Function&lt;Author, String&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> author.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()<span class="comment">//把集合转换成流</span></span><br><span class="line">                .map(author -&gt; author.getName())</span><br><span class="line">                .forEach(authorName -&gt; System.out.println(authorName));<span class="comment">//遍历打印名字</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b3051af8557d4d4aa349337663a351cb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>​    这个很简单，就是<strong>去重</strong>操作，基于对象的equals重写方法，一般默认去比较对象的属性值是否相等，如果作者的名字、年龄等其他属性都相等的情况下，说明是同一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line">authors.stream()</span><br><span class="line">       .distinct()</span><br><span class="line">.forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>​    这个排序操作，本文一开始就引入了，这里就不赘述了，直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors(); 对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br><span class="line">authors.stream() </span><br><span class="line">  .distinct()</span><br><span class="line">    .sorted((o1, o2) -&gt; o2.getAge()-o1.getAge()) </span><br><span class="line">  .forEach(author -&gt;System.out.println(author.getAge()));</span><br></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>​    flatMap，翻译过来就是平铺下去，和map的区别在于，map是一个对象对应一个值做映射，而flatMap中一个对象可以对应多个值，比如这里每个作者有一个Book集合，我们想把所有Book都放在一个集合中，这里相当于把每个对象所对应关联的那个属性值拼接在一个集合里面，就可以这样做：</p><p>​    这里Function第二个参数是Stream，要记得转换一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//     打印所有书籍的名字。要求对重复的元素进行去重。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .flatMap(<span class="keyword">new</span> Function&lt;Author, Stream&lt;? extends Book&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Stream&lt;? extends Book&gt; apply(Author author) &#123;</span><br><span class="line">                        <span class="keyword">return</span> author.getBooks().stream();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;) .distinct()</span><br><span class="line">                .forEach(book -&gt; System.out.println(book.getName()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//     打印所有书籍的名字。要求对重复的元素进行去重。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()</span><br><span class="line">                .flatMap(author -&gt; author.getBooks().stream()) .distinct()</span><br><span class="line">                .forEach(book -&gt; System.out.println(book.getName()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>​    设置一个返回的长度限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line">authors.stream()</span><br><span class="line">.distinct()</span><br><span class="line">.sorted()</span><br><span class="line">.limit(<span class="number">2</span>)</span><br><span class="line">.forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h3><p>​    跳过几个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line">authors.stream()</span><br><span class="line">.distinct()</span><br><span class="line">.sorted()</span><br><span class="line">.skip(<span class="number">1</span>)</span><br><span class="line">.forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h2 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h2><p>​    在前面流已经经过了一些列中间操作，对元素中的对象比如做了筛选过滤、去重、后者映射等等，现在已经有这些元素了，下面要对这些元素进行最终的输出，可以采用以下几种方式，最简单的遍历foreach（最常用的就是打印输出每个元素），count统计个数、max&amp;min计算值的最值、collect用于将元素转化为List输出或者合并字符串等等。</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有年龄小于18的作家的名字，并且要注意去重</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        authors.stream()<span class="comment">//把集合转换成流</span></span><br><span class="line">                .map(author -&gt; author.getName())</span><br><span class="line">                .forEach(authorName -&gt; System.out.println(authorName));<span class="comment">//遍历打印名字</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="max-amp-min"><a href="#max-amp-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h3><p>​    可以用来或者流中的最值。 例子:</p><p>分别获取这些作家的所出书籍的最高分和最低分并打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">       Optional&lt;Integer&gt; max = authors.stream()</span><br><span class="line">               .flatMap(author -&gt; author.getBooks().stream()).map(book -&gt; book.getScore())</span><br><span class="line">               .max((score1, score2) -&gt; score1 - score2);</span><br><span class="line">       Optional&lt;Integer&gt; min = authors.stream().flatMap(author -&gt; author.getBooks().stream()).map(book -&gt; book.getScore())</span><br><span class="line">               .min((score1, score2) -&gt; score1 - score2);</span><br><span class="line">       System.out.println(max.get());</span><br><span class="line">       System.out.println(min.get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h3><p>把当前流转换成一个集合。 例子:</p><p>获取一个存放所有作者名字的List集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        List&lt;String&gt; nameList = authors.stream()</span><br><span class="line">                .map(author -&gt; author.getName())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(nameList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/edbbcd8252624fdb8d9deeabe964b722.png" alt="在这里插入图片描述"></p><p>这里还有个骚操作，可以转化为Map，设定好key和value分别是什么即可，类型可以自定义，依旧还是Function接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="comment">//        Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream().distinct()</span></span><br><span class="line"><span class="comment">//                .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getBooks()));</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = authors.stream().distinct()</span><br><span class="line">                .collect(Collectors.toMap(author -&gt; author.getName(), author -&gt; author.getAge()));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查找与匹配</p><h3 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h3><p>可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p>例子: 判断是否有年龄在29以上的作家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 判断是否有年龄在29以上的作家 </span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line"><span class="keyword">boolean</span> flag = authors.stream()</span><br><span class="line">.anyMatch(author -&gt; author.getAge() &gt; <span class="number">29</span>); </span><br><span class="line">System.out.println(flag);</span><br></pre></td></tr></table></figure><h3 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h3><p>可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。 例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 判断是否所有的作家都是成年人 </span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors(); </span><br><span class="line"><span class="keyword">boolean</span> flag = authors.stream()</span><br><span class="line">.allMatch(author -&gt; author.getAge() &gt;= <span class="number">18</span>); </span><br><span class="line">System.out.println(flag);</span><br></pre></td></tr></table></figure><h3 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h3><p>可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false 例子:</p><p>判断作家是否都没有超过100岁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 判断作家是否都没有超过100岁的。 </span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="keyword">boolean</span> b = authors.stream()</span><br><span class="line">.noneMatch(author -&gt; author.getAge() &gt; <span class="number">100</span>);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h3 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h3><p>​    获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><p>例子：</p><p>​    获取任意一个年龄大于18的作家，如果存在就输出他的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取任意一个年龄大于18的作家，如果存在就输出他的名字</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Optional&lt;Author&gt; optionalAuthor = authors.stream()</span><br><span class="line">                .filter(author -&gt; author.getAge()&gt;<span class="number">18</span>)</span><br><span class="line">                .findAny();</span><br><span class="line"></span><br><span class="line">        optionalAuthor.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h3><p>​    获取流中的第一个元素。</p><p>例子：</p><p>​    获取一个年龄最小的作家，并输出他的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        获取一个年龄最小的作家，并输出他的姓名。</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Optional&lt;Author&gt; first = authors.stream()</span><br><span class="line">                .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())</span><br><span class="line">                .findFirst();</span><br><span class="line"></span><br><span class="line">        first.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h3><p>​    对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p><p>​    reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p><p>​    reduce两个参数的重载形式内部的计算方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T result = identity;</span><br><span class="line"><span class="keyword">for</span> (T element : <span class="keyword">this</span> stream)</span><br><span class="line">result = accumulator.apply(result, element)</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>​    其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p><p>例子：</p><p>​    使用reduce求所有作者年龄的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者年龄的和</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Integer sum = authors.stream()</span><br><span class="line">                .distinct()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(<span class="number">0</span>, (result, element) -&gt; result + element);</span><br><span class="line">        System.out.println(sum);</span><br></pre></td></tr></table></figure><p>​    使用reduce求所有作者中年龄的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最大值</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Integer max = authors.stream()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);</span><br><span class="line"></span><br><span class="line">        System.out.println(max);</span><br></pre></td></tr></table></figure><p>​    使用reduce求所有作者中年龄的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最小值</span></span><br><span class="line">        List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">        Integer min = authors.stream()</span><br><span class="line">                .map(author -&gt; author.getAge())</span><br><span class="line">                .reduce(Integer.MAX_VALUE, (result, element) -&gt; result &gt; element ? element : result);</span><br><span class="line">        System.out.println(min);</span><br></pre></td></tr></table></figure><p>​    reduce一个参数的重载形式内部的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> foundAny = <span class="keyword">false</span>;</span><br><span class="line">  T result = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (T element : <span class="keyword">this</span> stream) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!foundAny) &#123;</span><br><span class="line">          foundAny = <span class="keyword">true</span>;</span><br><span class="line">          result = element;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          result = accumulator.apply(result, element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></figure><p>​    如果用一个参数的重载方法去求最小值代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        使用reduce求所有作者中年龄的最小值</span></span><br><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Optional&lt;Integer&gt; minOptional = authors.stream()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .reduce((result, element) -&gt; result &gt; element ? element : result);</span><br><span class="line">minOptional.ifPresent(age-&gt; System.out.println(age));</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p>​    我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>​    例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Author author = getAuthor();</span><br><span class="line"><span class="keyword">if</span>(author!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    System.out.println(author.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    尤其是对象中的属性还是一个对象的情况下。这种判断会更多。    </p><p>​    而过多的判断语句会让我们的代码显得臃肿不堪。</p><p>​    所以在JDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常。</p><p>​    并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>​    Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>​    我们一般使用<strong>Optional</strong>的<strong>静态方法ofNullable</strong>来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author author = getAuthor();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);</span><br></pre></td></tr></table></figure><p>​    你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>​    而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​    如果你<strong>确定一个对象不是空</strong>的则可以使用<strong>Optional</strong>的<strong>静态方法of</strong>来把数据封装成Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Author author = <span class="keyword">new</span> Author();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.of(author);</span><br></pre></td></tr></table></figure><p>​    但是一定要注意，如果使用of的时候传入的参数必须不为null。（尝试下传入null会出现什么结果）</p><p>​    如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用<strong>Optional</strong>的<strong>静态方法empty</strong>来进行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional.empty()</span><br></pre></td></tr></table></figure><p>​    </p><p>​    所以最后你觉得哪种方式会更方便呢？<strong>ofNullable</strong></p><h3 id="安全消费值"><a href="#安全消费值" class="headerlink" title="安全消费值"></a>安全消费值</h3><p>​    我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其<strong>ifPresent</strong>方法对来消费其中的值。</p><p>​    这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>​    例如,以下写法就优雅的避免了空指针异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"></span><br><span class="line">authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h3><p>​    如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h3 id="安全获取值"><a href="#安全获取值" class="headerlink" title="安全获取值"></a>安全获取值</h3><p>​    如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p><ul><li><p>orElseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line">Author author1 = authorOptional.orElseGet(() -&gt; <span class="keyword">new</span> Author());</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Author author = authorOptional.orElseThrow((Supplier&lt;Throwable&gt;) () -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">"author为空"</span>));</span><br><span class="line">    System.out.println(author.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">    throwable.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>​    我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line">authorOptional.filter(author -&gt; author.getAge()&gt;<span class="number">100</span>).ifPresent(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>​    我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现Optional的好处，<strong>更推荐使用ifPresent方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (authorOptional.isPresent()) &#123;</span><br><span class="line">    System.out.println(authorOptional.get().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>​    Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Optional&lt;Author&gt; authorOptional = getAuthorOptional();</span><br><span class="line">    Optional&lt;List&lt;Book&gt;&gt; optionalBooks = authorOptional.map(author -&gt; author.getBooks());</span><br><span class="line">    optionalBooks.ifPresent(books -&gt; System.out.println(books));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> Stream </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 匿名内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法传参/值传递/引用传递</title>
      <link href="2021/11/06/deep12-Java%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82-%E5%80%BC%E4%BC%A0%E9%80%92-%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
      <url>2021/11/06/deep12-Java%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82-%E5%80%BC%E4%BC%A0%E9%80%92-%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文主要讲解Java方法传参、值传递、引用传递，其中涉及到JVM的相关知识，最近弥补了这一块，发现理解很多问题都变得豁然开朗了，知其所以然！（JVM在我其他博客中有详细辨析）<br><img src="https://img-blog.csdnimg.cn/c67559137da140af82c20d0920c3864e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在刷力扣题目时，遇到这样一个问题，当我把一个变量传进dfs方法后，无论递归中如何对该变量赋值，最终都没有生效，今来探究其原因，说到底还是Java值传递、引用传递的问题：</p><h2 id="方法传参"><a href="#方法传参" class="headerlink" title="方法传参"></a>方法传参</h2><p>Java的方法传值，有基本数据类型以及引用类型两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;   <span class="comment">//基本类型</span></span><br><span class="line">String str = <span class="string">"hello"</span>;  <span class="comment">//引用类型</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/24ed132a8be844cfa527b15150f670fe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里num是基本类型，str是引用类型，str是引用类型，对于引用类型来说，它本质上保存的是一个地址，指向了 “hello”这个字符串。</p><p>再还要来理解一下赋值操作(=)的具体含义：</p><p>基本类型的赋值，是直接对其保存的值进行修改的，而引用类型的赋值，本质上是改变了它指向的对象而已，原来指向的对象并没有改变：</p><p><img src="https://img-blog.csdnimg.cn/21d8d07cb8e14ffaa2280222193241bb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>继续看方法的调用：</p><p>在方法中传参数时，实际上是进行了赋值操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">作者：Intopass</span><br><span class="line">链接：https:<span class="comment">//www.zhihu.com/question/31203609/answer/50992895</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">第一个例子：基本类型</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    value = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(num); <span class="comment">// num 没有被改变</span></span><br><span class="line"></span><br><span class="line">第二个例子：没有提供改变自身方法的引用类型</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    text = <span class="string">"windows"</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(str); <span class="comment">// str 也没有被改变</span></span><br><span class="line"></span><br><span class="line">第三个例子：提供了改变自身方法的引用类型</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"iphone"</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    builder.append(<span class="string">"4"</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(sb); <span class="comment">// sb 被改变了，变成了"iphone4"。</span></span><br><span class="line"></span><br><span class="line">第四个例子：提供了改变自身方法的引用类型，但是不使用，而是使用赋值运算符。</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"iphone"</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(StringBuilder builder)</span> </span>&#123;</span><br><span class="line">    builder = <span class="keyword">new</span> StringBuilder(<span class="string">"ipad"</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(sb); <span class="comment">// sb 没有被改变，还是 "iphone"。</span></span><br></pre></td></tr></table></figure><p>从JVM视角来看，所有的线程共享的区域是堆、元空间；每一个线程有独占的虚拟机栈、本地方法栈、程序计数器。那么对于传进参数的的这个方法，自然会加载到当前线程的虚拟机栈中，所以呢，对于每个方法的局部变量来说，是绝对无法被其他方法，甚至其他线程的同一方法所访问到的，更不用谈修改了。</p><p>当我们在方法内部去声明变量时(int i =0, Object obj = null)，仅仅是在栈(Stack)中加入了局部变量，并没有影响到堆(共享区域)。当我们外部new Object() 对象时，会在堆中开辟一段内存空间并初始化该对象实例，如果给这个对象赋值给方法内的obj局部变量时，仅仅只是把栈中的这个obj局部变量的地址指向改变了到了新new的Object而已。</p><p>总结：</p><ol><li>如果参数是<strong>基本类型</strong>，Java方法参数传递的是<strong>基本类型值的拷贝</strong>。</li><li>如果参数是<strong>引用类型</strong>，Java传递的是所引用的对象在堆中<strong>地址值的拷贝</strong></li></ol><p>所以如果想把某个对象传进方法，并且还想在方法内部修改它，则必须得调用这个对象自己的成员方法去修改，才能对堆上这个对象做实际的修改，如果只是赋值操作(=)，那么仅仅改变的是方法内局部变量的指向而已，并没有真正改变原来的对象值。</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
            <tag> 值传递 </tag>
            
            <tag> 引用传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM【垃圾回收机制】</title>
      <link href="2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="三、JVM垃圾回收机制"><a href="#三、JVM垃圾回收机制" class="headerlink" title="三、JVM垃圾回收机制"></a>三、JVM垃圾回收机制</h1><h2 id="3-1-堆为什么要分成年轻代和老年代？"><a href="#3-1-堆为什么要分成年轻代和老年代？" class="headerlink" title="3.1 堆为什么要分成年轻代和老年代？"></a>3.1 堆为什么要分成年轻代和老年代？</h2><p><img src="https://img-blog.csdnimg.cn/90318ff2219b4046a6872637405b5965.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>因为年轻代和老年代不同的特点，需要采用不同的垃圾回收算法；</p><p>年轻代的对象，它的特点是创建之后很快就会被回收，所以需要用一种垃圾回收算法；</p><p>老年代的对象，它的特点是需要长期存活，所以需要另外一种垃圾回收算法 ；</p><p>所以需要分成两个区域来放不同的对象；</p><p><strong>1、绝大多数对象都是朝生夕灭的；</strong></p><p>如果一个区域中大多数对象都是朝生夕灭，那么把它们集中放在一起，每次回收时只关注如何保留少量存活对象，而不是去标记那些大量将要被回收的对象，就能以较低的代价回收到大量的空间；</p><p><strong>2、熬过越多次垃圾收集的对象就越难以回收；</strong></p><p>如果是需要长期存活的对象，那把它们集中放在一块，虚拟机便可以使用较低的频率来回收这个区域，这就同时兼顾了垃圾收集的时间开销和内存的空间有效利用；</p><p><strong>3、JVM划分出新生代、老年代之后，垃圾收集器可以每次只回收其中某一个或者某些部分的区域 ，同时也有了“Minor GC”“Major GC”“Full GC”这样的回收类型的划分；</strong></p><p>Minor GC/Young GC ：新生代收集 </p><p>Major GC/Old GC：老年代收集</p><p>Full GC：整堆收集，收集整个Java堆和元空间/方法区的垃圾收集；</p><p>Mixed GC：混合收集，收集整个新生代以及部分老年代的垃圾收集，目前只有G1收集器会有这种行为； </p><p>4、针对不同的区域对象存亡特征采用不同的垃圾收集算法：</p><p>（1）复制算法</p><p>（2）标记-清除算法</p><p>（3）标记-整理算法</p><h2 id="3-2-JVM堆的年轻代为什么要有两个Survivor区？"><a href="#3-2-JVM堆的年轻代为什么要有两个Survivor区？" class="headerlink" title="3.2 JVM堆的年轻代为什么要有两个Survivor区？"></a>3.2 JVM堆的年轻代为什么要有两个Survivor区？</h2><p><strong>1、如果没有Survivor区会怎么样？</strong></p><p>此时每触发一次Minor GC，就会把Eden区的对象复制到老年代，这样当老年代满了之后会触发Major Gc/Full GC(通常伴随着MinorGC)，比较耗时，所以必须有Survivor区；</p><blockquote><p>解释：</p><p>会比较频繁的出发Full GC，开销太大</p></blockquote><p><strong>2、如果只有1个Survivor区会怎么样？</strong>【导致内存碎片】</p><p>刚刚创建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中存活的对象就会被移动到Survivor区，下一次Eden满了的时候，此时进行Minor GC，Eden和Survivor各有一些存活对象，因为只有一个Survivor，所以Eden区第二次GC发现的存活对象也是放入唯一的一个Survivor区域中，但此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对象所占有的内存是不连续的，也就导致了内存碎片化问题，并且由于不连续的空间会导致再分配大对象的时候，由于没有连续的空间来分配，会导致提前垃圾回收；</p><p>如果将Survivor中的所有存活对象进行整理消除碎片，然后将所有的存活对象放入其中，这样做会降低效率；</p><p>如果把两个区域中的所有存活对象都复制转移到一个完全独立的空间中，也就是第二块Survivor中，这样就可以留出一块完全空着的Eden和Survivor了，下次GC的时候再重复这个流程，所以我们便要有两个Survivor区；</p><p><img src="https://img-blog.csdnimg.cn/8e18f9530d264d51868277c612a3c25f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：</p><p>如果只有一个Survivor区域，触发Minor GC后会有内存碎片问题的产生(内存不连续)，大大降低了效率</p><p>所以得有第二个Survivor区域来装要存活的对象，从而使得第一个Survivor空闲、Eden也空闲，保证了内存空间的连续性——需要2个Survivor区域的原因解析</p></blockquote><h2 id="3-3-Eden区与Survivor区的空间大小比值为什么默认是8-1-1？"><a href="#3-3-Eden区与Survivor区的空间大小比值为什么默认是8-1-1？" class="headerlink" title="3.3 Eden区与Survivor区的空间大小比值为什么默认是8:1:1？"></a>3.3 Eden区与Survivor区的空间大小比值为什么默认是8:1:1？</h2><p>一个eden区 ，新生代对象出生的地方；</p><p>两个survivor区，一个用来保存上次新生代GC存活下来的对象，还有一个空着，在新生代GC时把eden+survivor中存活对象复制到这个空的survivor中；</p><p>统计和经验表明，<strong>90%的对象朝生夕死存活时间极短</strong> ，每次gc会有90%对象被回收，剩下的10%要预留一个survivor空间去保存； </p><blockquote><p>解释</p><p>8：1：1原因在于每次gc会有90%的对象被回收 ，这是个统计的结果</p></blockquote><h2 id="3-4-请介绍下JVM中的垃圾回收算法？"><a href="#3-4-请介绍下JVM中的垃圾回收算法？" class="headerlink" title="3.4 请介绍下JVM中的垃圾回收算法？"></a>3.4 请介绍下JVM中的垃圾回收算法？</h2><p><img src="https://img-blog.csdnimg.cn/457179f481b940119c2e236eaed29b5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-4-1-标记-清除算法"><a href="#3-4-1-标记-清除算法" class="headerlink" title="3.4.1 标记-清除算法"></a>3.4.1 标记-清除算法</h3><p>标记-清除算法是最基础的收集算法，后续的很多垃圾回收算法是基于该算法而发展出来的，它分为‘ 标记 ’和‘ 清除 ’两个阶段；</p><p><strong>1、标记</strong></p><p>标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记出所有存活的对象，在标记完成后，统一回收所有未被标记的对象，标记过程就是对象是否属于垃圾的判定过程，基于可达性分析算法判断对象是否可以回收；</p><p><strong>2、清除</strong></p><p>标记后，对所有被标记的对象进行回收；</p><p>该算法如下图所示：</p><p>会发现回收后，内存空间就不连续了，有内存碎片<br><img src="https://img-blog.csdnimg.cn/28fa94791cfc4ff18e7a928008ef8243.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>优点：</strong></p><p>基于最基础的可达性分析算法，实现简单，后续的收集算法都是基于这种思想实现的；</p><p><strong>缺点：</strong></p><p>1、执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低；</p><p>2、内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集；</p><h3 id="3-4-2-复制算法"><a href="#3-4-2-复制算法" class="headerlink" title="3.4.2 复制算法"></a>3.4.2 复制算法</h3><p>复制算法是标记-复制算法的简称，将可用内存按容量分为大小相等的两块，每次只使用其中一块，当这一块的内存用完了，就将还存活的对象复制到另外一块内存上，然后再把已使用过的内存空间一次清理掉；</p><p><img src="https://img-blog.csdnimg.cn/4cc321ebb7484b3d8d35e09eba1e4b7c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>优点：</strong></p><p>实现简单，效率高，解决了标记-清除算法<strong>导致的内存碎片问题</strong>；</p><p><strong>缺点：</strong></p><p>1、代价太大，将可分配内存缩小了一半，<strong>空间浪费太多</strong>了；</p><p>2、对象存活率较高时就要进行较多的复制操作，效率将会降低；</p><h3 id="3-4-3-标记-整理算法"><a href="#3-4-3-标记-整理算法" class="headerlink" title="3.4.3 标记-整理算法"></a>3.4.3 标记-整理算法</h3><p>标记-整理算法是根据<strong>老年代</strong>的特点而产生的； </p><p><strong>1、标记</strong></p><p>标记过程与上面的标记-清理算法一致，也是基于可达性分析算法进行标记；</p><p><strong>2、整理</strong></p><p>和标记-清理不同的是，该算法不是针对可回收对象进行清理，而是根据存活对象进行整理，让存活对象都向一端移动，然后直接清理掉边界以外的内存；</p><p>而<strong>标记-清除算法</strong>不移动存活对象，导致有大量不连续空间，即内存碎片，而老年代这种每次回收都有大量存活对象的区域，移动存活对象并更新所有引用这些对象的引用，这是一种比较耗时的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行，像这样的停顿我们也称为“Stop The World”即STW；</p><p>但是即便是移动存活对象是耗时的操作，但是如果不这么做，那么在充满内存碎片的空间中分配对象，又影响了对象的分配和访问的效率，所以JVM权衡两者之后，还是采用了<strong>移动存活对象的方式，也就是对内存进行了整理</strong>；</p><p>另外像cms垃圾收集器，平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间，所以像基于标记-清除算法的CMS收集器面临空间碎片过多时就会进行一次整理； </p><p><strong>优点：</strong></p><p>1、不会像复制算法那样划分两个区域，提高了空间利用率；</p><p>2、不会产生不连续的内存碎片；</p><p><strong>缺点：</strong></p><p>效率问题，除了像标记-清除算法的标记过程外，还多了一步整理过程，效率变低；</p><p>如下图所示：<br><img src="https://img-blog.csdnimg.cn/a551f71a551a48a9acd916a83ce47c39.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-4-4-分代收集算法"><a href="#3-4-4-分代收集算法" class="headerlink" title="3.4.4 分代收集算法"></a>3.4.4 分代收集算法</h3><p>现在一般虚拟机的垃圾收集都是采用“ <strong>分代收集</strong> ”算法；</p><p>根据对象存活周期的不同将内存划分为几块，一般把java堆分为<strong>新生代和老年代</strong>，JVM根据各个年代的特点采用不同的收集算法；</p><p>新生代中，每次进行垃圾回收都会发现大量对象死去，只有少量存活，因此采用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集；——只需要复制少于10%的对象，效率很高！</p><p>老年代中，因为对象存活率较高，采用<strong>标记-清理、标记-整理</strong>算法来进行回收；</p><h2 id="3-5-请介绍一下JVM垃圾收集器？"><a href="#3-5-请介绍一下JVM垃圾收集器？" class="headerlink" title="3.5 请介绍一下JVM垃圾收集器？"></a>3.5 请介绍一下JVM垃圾收集器？</h2><p><img src="https://img-blog.csdnimg.cn/083fe79ca2af48a9a0ff6d3df1576daf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如上图，一共有7种作用于不同分代的垃圾收集器，如果两个收集器之间存在连线，则说明它们可以搭配使用，垃圾收集器所处区域表示它是属于新生代收集器还是老年代收集器；</p><p>新生代收集器：Serial、ParNew、Parallel Scavenge [ˈpærəlel] [ˈskævɪndʒ] </p><p>老年代收集器：CMS、Serial Old、Parallel Old</p><p>整堆收集器： G1</p><p>垃圾收集器的最前沿成果：ZGC（Jdk11中引入了） 和 Shenandoah（Open JDK12，Oracle没引入，很前沿 ）</p><blockquote><p>解释：</p><p>目前在生产环境中，G1是比较先进的垃圾收集器了</p></blockquote><h3 id="3-5-1-Serial收集器-新生代、单线程"><a href="#3-5-1-Serial收集器-新生代、单线程" class="headerlink" title="3.5.1 Serial收集器[新生代、单线程]"></a>3.5.1 Serial收集器[新生代、单线程]</h3><p>新生代收集器，最早的收集器，单线程的，收集时需暂停用户线程的工作，所以有卡顿现象，效率不高，致使java语言的开发团队一直在改进垃圾收集器的算法和实现，但Serial收集器<strong>简单</strong>，不会有线程切换的开销，是Client模式下默认的垃圾收集器，-client， -server；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数： -XX:+UseSerialGC</span><br><span class="line"></span><br><span class="line">java -XX:+PrintFlagsFinal -version 打印jvm默认的参数值；</span><br></pre></td></tr></table></figure><p>垃圾收集时间线如下：</p><p>所有线程卡住（停下来），进行垃圾收集，收集完毕，然后再继续…<br><img src="https://img-blog.csdnimg.cn/e5e1db8a41cd4a6798c87112495fb211.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-5-2-ParNew收集器-新生代、多线程"><a href="#3-5-2-ParNew收集器-新生代、多线程" class="headerlink" title="3.5.2 ParNew收集器[新生代、多线程]"></a>3.5.2 ParNew收集器[新生代、多线程]</h3><p>它是新生代收集器，就是<strong>Serial收集器的多线程版本</strong>，大部分基本一样，单CPU下，ParNew还需要切换线程，可能还不如Serial；</p><p>Serial和ParNew收集器可以配合CMS收集器，前者收集新生代，后者CMS收集老年代，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;-XX:+UseConcMarkSweepGC&quot;：指定使用CMS后，会默认使用ParNew作为新生代垃圾收集器；</span><br><span class="line">&quot;-XX:+UseParNewGC&quot;：强制指定使用ParNew；</span><br><span class="line">&quot;-XX:ParallelGCThreads&#x3D;2&quot;：指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相同；</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b9fab178b75e4d64ae51fdf65ee5874b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-5-3-Parallel-Scavenge收集器【新生代、多线程】"><a href="#3-5-3-Parallel-Scavenge收集器【新生代、多线程】" class="headerlink" title="3.5.3 Parallel Scavenge收集器【新生代、多线程】"></a>3.5.3 Parallel Scavenge收集器【新生代、多线程】</h3><p> <img src="https://img-blog.csdnimg.cn/628f0c5d16144edb9bdffc4296e5da31.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>简称Parallel，它是新生代收集器，基于<strong>复制算法</strong>，并行的多线程收集器（与ParNew收集器类似），侧重于达到一个可控的吞吐量，虚拟机运行100分钟，垃圾收集花1分钟，则吞吐量为99%，有时候我们也把该垃圾收集器叫吞吐量垃圾收集器或者是吞吐量优先的垃圾收集器；而且这个垃圾收集器是jvm默认的新生代的垃圾收集器；</p><p>它提供一个<strong>参数设置吞吐量：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxGCPauseMillis 该参数设置大于0的毫秒数，每次GC的时间将尽量保持不超过设置的值，但是这个值也不是设置得越小就越好，GC暂停时间越短，那么GC的次数会变得更频繁；</span><br><span class="line"></span><br><span class="line">-XX:+UseAdaptiveSizePolicy 自适应新生代大小策略，默认这个参数是开启的，当这个参数被开启之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX：SurvivorRatio）、晋升老年代对象大小（-XX：PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间获得最大的吞吐量，这种调节方式称为垃圾收集的自适应的调节策略（GC Ergonomics）；</span><br></pre></td></tr></table></figure><p>如果我们不知道怎么对jvm调优，我们可以使用Parallel Scavenge收集器配合自适应调节策略，把内存管理的调优任务交给虚拟机去完成也许是一个很不错的选择，只需要把基本的内存数据设置好（如-Xmx设置最大堆），然后使用-XX:MaxGCPauseMillis参数（最大停顿时间）给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成，自适应调节策略也是Parallel Scavenge收集器区别于ParNew收集器的一个重要特性；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">参数：-XX:+UseParallelGC 指定使用Parallel Scavenge垃圾收集器</span><br><span class="line"></span><br><span class="line">java -XX:+PrintCommandLineFlags -version 打印jvm默认初始堆和最大堆大小以及垃圾收集器</span><br><span class="line"></span><br><span class="line">java -XX:+PrintFlagsFinal -version 打印jvm所有的默认的参数值；</span><br><span class="line"></span><br><span class="line">-XX:+ </span><br><span class="line"></span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line"></span><br><span class="line">-Xloggc:d:&#x2F;dev&#x2F;gc.log</span><br><span class="line"></span><br><span class="line">Parallel Scavenge垃圾收集器中的Ergonomics负责自动的调节gc暂停时间和吞吐量之间的平衡，自动优化虚拟机的性能；</span><br></pre></td></tr></table></figure><h3 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h3><p>这里常用一下JVM参数打印JVM的log:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:d:&#x2F;dev&#x2F;gc.log</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/470dfa56725548239ab8499dea1414f9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> JAVA虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM【内存管理】</title>
      <link href="2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="二、深入剖析JVM内存管理"><a href="#二、深入剖析JVM内存管理" class="headerlink" title="二、深入剖析JVM内存管理"></a>二、深入剖析JVM内存管理</h1><h2 id="2-1-Java代码到底是如何运行起来的？"><a href="#2-1-Java代码到底是如何运行起来的？" class="headerlink" title="2.1 Java代码到底是如何运行起来的？"></a>2.1 Java代码到底是如何运行起来的？</h2><p>1、Mall.java –&gt;javac –&gt; Mall.class –&gt; java Mall (jvm进程，也就是一个jvm虚拟机)</p><p>2、Mall.java –&gt;javac–&gt;Mall.class –&gt;Mall.jar –&gt; java -jar Mall.jar</p><p>3、Mall.java –&gt; javac –&gt; Mall.class –&gt;Mall.war –&gt; Tomcat –&gt; startup.sh –&gt; org.apache.catalina.startup.Bootstrap (jvm进程，也就是一个jvm虚拟机)</p><p>其实运行起来一个Java程序，都是通过D:\dev\Java\jdk1.8.0_251\bin\java 启动一个JVM虚拟机，在虚拟机里面运行Mall.class字节码文件；</p><p><img src="https://img-blog.csdnimg.cn/ea7c556c03de419baba584e11e510a2c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>总结：</p><p>java源文件通过javac命令转成java字节码文件，再通过java命令运行起来，JVM是用于屏蔽掉底层操作系统之间的差异，这里不同操作系统所装载的jdk是不同的，jdk中包含jvm</p></blockquote><blockquote><p>这里面的其他语言，如Groovy、Scala、Kotlin也是编译后为字节码，再通过JVM虚拟机处理。</p></blockquote><h2 id="2-2画一下JVM整个运行原理图？☆"><a href="#2-2画一下JVM整个运行原理图？☆" class="headerlink" title="2.2画一下JVM整个运行原理图？☆"></a>2.2画一下JVM整个运行原理图？☆</h2><p><img src="https://img-blog.csdnimg.cn/10d2679aef014bd0a5e2b8b5f1feacf7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="2-3-请介绍一下JVM的内存结构划分？"><a href="#2-3-请介绍一下JVM的内存结构划分？" class="headerlink" title="2.3 请介绍一下JVM的内存结构划分？"></a>2.3 请介绍一下JVM的内存结构划分？</h2><p>加载进来的.class字节码文件、代码执行创建的对象、代码执行调用方法，方法中有变量等数据需要一个地方存放，所以JVM划分出了几个区域，用于存放这些信息；<strong>hotspot</strong></p><p><img src="https://img-blog.csdnimg.cn/466092a41d3c4dd2999cc6cb69532305.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在JDK1.8之前，元空间就是原来的方法区（永久代）；</p><p>比如new User(),那么User这个变量在虚拟机栈中存储为局部变量，但是其值是在堆中存储的</p><p>程序计数器：表明代码执行到哪一行</p><p>当类加载后，Class文件首先会存储在元空间中，然后运行时才会涉及其他几个空间部分</p><h2 id="2-4-JVM哪些区域是线程私有的，哪些区域是线程共享的？☆"><a href="#2-4-JVM哪些区域是线程私有的，哪些区域是线程共享的？☆" class="headerlink" title="2.4 JVM哪些区域是线程私有的，哪些区域是线程共享的？☆"></a>2.4 JVM哪些区域是线程私有的，哪些区域是线程共享的？☆</h2><p>1、堆、元空间（方法区）是线程共享的；</p><p>2、其他区域是线程私有的；</p><p><img src="https://img-blog.csdnimg.cn/228fe4ea721744d88c221a55e4e2abaf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>线程私有的区域如虚拟机栈、本地方法栈、程序计数器，这些就不存在线程安全的问题，每个线程之间这些区域是隔离的，不共享变量，就不会导致冲突，没有安全问题</p><p>举例：两个线程对应就有两个虚拟机栈，一一对应。无论有几个线程，堆和元空间都是公用的一个</p><h2 id="2-5-从JVM角度剖析如下程序代码如何执行？"><a href="#2-5-从JVM角度剖析如下程序代码如何执行？" class="headerlink" title="2.5 从JVM角度剖析如下程序代码如何执行？"></a>2.5 从JVM角度剖析如下程序代码如何执行？</h2><p><img src="https://img-blog.csdnimg.cn/1172c5acc584401a90768850e3949891.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bf9aba7b51174d7db44c430b12949155.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>Config类在new的时候，对象存在堆中，该类的信息是在元空间里的</p><h2 id="2-6-JVM运行时数据区-程序计数器-的特点及作用？"><a href="#2-6-JVM运行时数据区-程序计数器-的特点及作用？" class="headerlink" title="2.6 JVM运行时数据区 程序计数器 的特点及作用？"></a>2.6 JVM运行时数据区 程序计数器 的特点及作用？</h2><p>1、程序计数器是一块较小的内存空间，几乎可以忽略；</p><p>2、是当前线程所执行的字节码的行号指示器；</p><p>3、Java多线程执行时，每条线程都有一个独立的程序计数器，各条线程之间计数器互不影响；</p><p>4、该区域是“线程私有”的内存，每个线程独立存储； </p><p>5、该区域不存在OutOfMemoryError；</p><p>6、无GC回收；</p><blockquote><p>总结：程序计数器是在线程产生的时候存在，在线程结束（销毁时候）消失，不需要垃圾回收（GC）</p></blockquote><h2 id="2-7-JVM运行时数据区-虚拟机栈的特点及作用？"><a href="#2-7-JVM运行时数据区-虚拟机栈的特点及作用？" class="headerlink" title="2.7 JVM运行时数据区 虚拟机栈的特点及作用？"></a>2.7 JVM运行时数据区 虚拟机栈的特点及作用？</h2><p>1、线程私有；</p><p>2、方法执行会创建栈帧，存储局部变量表等信息；</p><p>3、方法执行入虚拟机栈，方法执行完出虚拟机栈；（先进后出）</p><p>4、<strong>【深度过长】</strong> 栈深度大于虚拟机所允许StackOverflowError；</p><p>5、栈需扩展而无法申请空间OutOfMemoryError（比较少见）；hotspot虚拟机没有；</p><p>6、栈里面运行方法，存放方法的局部变量名，变量名所指向的值（常量值、对象值等）都存放到堆上的；</p><p>7、栈一般都不设置大小，栈所占的空间其实很小，可以通过-Xss1M进行设置，如果不设置默认为1M；</p><p>8、随线程而生，随线程而灭；</p><p>9、该区域不会有GC回收；</p><blockquote><p>解释：OutOfMemoryError一般少见，比如写个死循环不断的创建线程，当创建到一定程度，无法再继续给空间到新线程时，每个线程都会生成一个线程栈，每个线程栈会占用一定的内存区域，从而导致超出，会把会报此错误。</p></blockquote><p>如下，死循环中不断创建新的线程，而每个线程又不会结束，即不会销毁，从而导致大量内存占用。</p><p><img src="https://img-blog.csdnimg.cn/a8ca94b2a86543fb8012424b55060d55.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：递归调用时，有时会出现StackOverflowError，如下案例：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/174e439c54294adea990c98bfbde932a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>输出结果：</p><p>解释栈大小设置：</p><p>一般1M足够大了，往往会将其设置小一点，在idea中添加JVM配置，默认是1M，也可以改为128k：</p><p><img src="https://img-blog.csdnimg.cn/14673c4fc962481b9436f76ea64bf89c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>改了栈大小之后，原来的栈深度35710就会减小，再报Stack Overflow：</p><p>相当于把栈变小了，压的栈就会相应变少。</p><p><img src="https://img-blog.csdnimg.cn/e43dc936d5ea4f598def559d401bf24f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>总结：实际项目中，一般也不会递归调用太多次，1M的话，调用个3w多次肯定是够用的！所以改小一点是有好处的，改小一点反而可以启动更多线程，比如原本10M的内存空间可以创建10个1M的线程，那么把栈大小改小后，线程所占用的内存空间就变小了，从而使得线程数量变多</p></blockquote><h2 id="2-8-JVM运行时数据区-本地方法栈的特点及作用？"><a href="#2-8-JVM运行时数据区-本地方法栈的特点及作用？" class="headerlink" title="2.8 JVM运行时数据区 本地方法栈的特点及作用？"></a>2.8 JVM运行时数据区 本地方法栈的特点及作用？</h2><p>1、与虚拟机栈基本类似；</p><p>2、区别在于本地方法栈为Native方法服务；</p><p>3、HotSpot虚拟机将虚拟机栈和本地方法栈合并；</p><p>4、有StackOverflowError和OutOfMemoryError（比较少见）；</p><p>5、随线程而生，随线程而灭；</p><p>6、GC不会回收该区域；</p><p><strong>程序计数器、虚拟机栈、本地方法栈3个区域随线程而生，随线程而灭；</strong></p><p>解释：本地方法栈和虚拟机栈类似，只不过存储的是Native方法，也就是底层由C++写的方法；而HotSpot是把虚拟机栈和本地方法栈合并到一起了！</p><p><img src="https://img-blog.csdnimg.cn/0ec3e41627be41b5ab41cc45f81115da.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="2-9-JVM运行时数据区-Java堆的特点及作用？☆"><a href="#2-9-JVM运行时数据区-Java堆的特点及作用？☆" class="headerlink" title="2.9 JVM运行时数据区 Java堆的特点及作用？☆"></a>2.9 JVM运行时数据区 Java堆的特点及作用？☆</h2><p>1、线程共享的一块区域；</p><p>2、虚拟机启动时创建；</p><p>3、虚拟机所管理的内存中<strong>最大的一块区域</strong>；</p><p>4、存放所有实例<strong>对象或数组</strong>；</p><p>5、GC垃圾收集器的主要管理区域；</p><p>6、可分为新生代、老年代；</p><p>7、新生代更细化可分为Eden、From Survivor、To Survivor，Eden:Survivor = 8:1:1</p><p>8、可通过<strong>-Xmx、-Xms</strong>调节堆大小；</p><p>9、无法再扩展<strong>java.lang.OutOfMemoryError: Java heap space</strong></p><p>10、<strong>【TLAB】</strong> 如果从分配内存的角度看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB），以提升对象分配时的效率；</p><blockquote><p>解释：堆的年代划分</p></blockquote><p><img src="https://img-blog.csdnimg.cn/99db4806553041eeadea59a7c1e0f024.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：堆内存不足了，就会OOM，java.lang.OutOfMemoryError: Java heap space 堆溢出</p></blockquote><p><img src="https://img-blog.csdnimg.cn/11b3fa8d4f544029b771362463d76e2d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/62e1f4b03635406f8e4f1ab69e81b7dd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>如果改一下堆大小：<br><img src="https://img-blog.csdnimg.cn/55c7019bb71d4f6fb6d34e3e6da04ba7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/56c5710d4e924a89be55af07bc438056.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：TLAB：</p><p>因为堆是共享区域，所以当多个线程往堆里面放内容时，会产生一个竞争关系、冲突问题，那么最朴素的想法就是用锁去解决这个线程安全问题，但是用锁呢，又会导致效率比较低，所以干脆给每个线程一个默认区域，区域不大，但是供每个线程各自去放内容，也就是给每个线程分配了一个较小的缓冲区，当把缓冲区放满后，再去公共区放数据！</p></blockquote><h2 id="2-10-JVM中对象如何在堆内存分配？"><a href="#2-10-JVM中对象如何在堆内存分配？" class="headerlink" title="2.10 JVM中对象如何在堆内存分配？"></a>2.10 JVM中对象如何在堆内存分配？</h2><p>1、<strong>指针碰撞（Bump The Pointer）</strong>：内存规整的情况下；</p><p>2、<strong>空闲列表（Free List）</strong>：内存不规整的情况下；</p><p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定；</p><p>因此，当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；</p><p>而当使用CMS这种基于清除（Sweep）算法的收集器时，理论上就只能采用较为复杂的空闲列表来分配内存；</p><p>3、<strong>本地线程分配缓冲</strong>（Thread Local Allocation Buffer，TLAB）：对象创建在虚拟机中频繁发生，即使仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况；</p><p>那么解决方案有两种：</p><p>（1）同步锁定，JVM是采用CAS配上失败重试的方式保证更新操作的原子性； </p><p>（2）线程隔离，把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定，虚拟机是否使用TLAB，可以通过-XX：+/-UseTLAB参数来设定； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:TLABSize&#x3D;512k 设置大小；</span><br></pre></td></tr></table></figure><blockquote><p>解释：指针碰撞：</p><p>当内存排列规整的时候，指针不断向右遍历，依次排列对象</p></blockquote><p><img src="https://img-blog.csdnimg.cn/d7dbb10ca5f1438d9ae5fcf9b7f9ae56.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>空闲列表:<br>和指针碰撞不同，该方式的内存排列不规整，有一个空闲列表去记录哪些区域是空闲的，那么当存储时去找对应的空闲内存进行存储</p></blockquote><p><img src="https://img-blog.csdnimg.cn/c4819cc4f5e644a1a47bf5b28f035f7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：具体用哪种方式，这个是根据垃圾回收器的空，间压缩整理能力来决定的，如果GC每次回收完后，将空内存排列的规整，那么就用指针碰撞</p></blockquote><p>一些JVM可以配置的参数：<br><img src="https://img-blog.csdnimg.cn/c1323e7f99184687868394628184dd0b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="2-11-JVM堆内存中的对象布局？"><a href="#2-11-JVM堆内存中的对象布局？" class="headerlink" title="2.11 JVM堆内存中的对象布局？"></a>2.11 JVM堆内存中的对象布局？</h2><p>在 HotSpot 虚拟机中，一个对象的存储结构分为3块区域：</p><p>对象头(Header)、实例数据(Instance Data) 和 对齐填充(Padding)；</p><ul><li>对象头(Header)：包含两部分，第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，32 位虚拟机占 32 bit，64 位虚拟机占 64 bit，官方称为 ‘Mark Word’；<br><img src="https://img-blog.csdnimg.cn/0d8739fc506f4542ad2ce640f76bdfc8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>第二部分是类型指针，即对象指向它的类的元数据指针，虚拟机通过这个指针确定这个对象是哪个类的实例，另外，如果是Java数组，对象头中还必须有一块用于记录数组长度的数据，因为普通对象可以通过 Java 对象元数据确定大小，而数组对象不可以；</li></ul><ul><li>实例数据(Instance Data)：程序代码中所定义的各种成员变量类型的字段内容(包含父类继承下来的和子类中定义的)；</li></ul><ul><li>对齐填充(Padding)：不是必然需要，主要是占位，保证对象大小是某个字节的整数倍，HotSpot虚拟机，任何对象的大小都是8字节的整数倍；</li></ul><h2 id="2-12-JVM什么情况下会发生堆内存溢出？☆"><a href="#2-12-JVM什么情况下会发生堆内存溢出？☆" class="headerlink" title="2.12 JVM什么情况下会发生堆内存溢出？☆"></a>2.12 JVM什么情况下会发生堆内存溢出？☆</h2><p>Java堆中用于储存对象，只要不断地创建对象，并且保持<strong>GC Roots</strong>到对象之间有可达路径 </p><p>来避免垃圾回收机制清理这些对象，那么随着对象数量的增加，总容量达到最大堆的容量限制后就会产生内存溢出；</p><p>MAT工具分析xxx.hprof文件(相当于一个内存log)，排查溢出的原因；   </p><p>添加JVM参数 输出hprof文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"></span><br><span class="line">-XX:HeapDumpPath&#x3D;d:&#x2F;dev&#x2F;heapdump.hprof</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c59c2b4e6da54e2aac354e8fb56fab74.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b607a62acc6548faa40bcfa3a789a594.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>利用Eclipse的MAT工具来分析文件：</p><p>官网即可下载，open file，生成怀疑报告Leak suspects</p><p><img src="https://img-blog.csdnimg.cn/9560b3184aa747ae8e5a09b7e5e7e603.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-Xms3072M</span><br><span class="line"></span><br><span class="line">-Xmx3072M</span><br><span class="line"></span><br><span class="line">-Xmn1536M</span><br><span class="line"></span><br><span class="line">-Xss1M</span><br><span class="line"></span><br><span class="line">-XX:-UseCompressedClassPointers</span><br><span class="line"></span><br><span class="line">-XX:MetaspaceSize&#x3D;256M</span><br><span class="line"></span><br><span class="line">-XX:MaxMetaspaceSize&#x3D;256M</span><br><span class="line"></span><br><span class="line">-XX:SurvivorRatio&#x3D;8</span><br><span class="line"></span><br><span class="line">-XX:MaxTenuringThreshold&#x3D;5</span><br><span class="line"></span><br><span class="line">-XX:PretenureSizeThreshold&#x3D;1M</span><br><span class="line"></span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line"></span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line"></span><br><span class="line">-Xloggc:d:&#x2F;dev&#x2F;gc.log</span><br><span class="line"></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line"></span><br><span class="line">-XX:HeapDumpPath&#x3D;d:&#x2F;dev&#x2F;heapdump.hprof</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/69ca5ae04bbb48f08da1850d89ffe88b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>解释：Java堆中用于储存对象，只要不断地创建对象，并且保持<strong>GC Roots</strong>到对象之间有可达路径 </p><p>比如这里的orderList是一个GC root根，然后引用了new ArrayList<Order>()这个List对象地址，然后这个List对象又在循环中，不断的去引用到了order对象，由于对象一直在创建，所以就能保持GC Roots到对象之间有可达路径!</p><p>如果这个List对象引用断了，那么就会将剩余的进行垃圾回收，从而不会导致堆内存溢出，也就是说，该List对象不再被引用了，就可以销毁了(被GC回收)，从而就不会占用堆内存了</p></blockquote><p><img src="https://img-blog.csdnimg.cn/92b64722c1e3442d9ac310556327beed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>验证猜想：</p></blockquote><p>如果将order的引用注释掉：</p><p>这样一来，虽然orderList还是指向了堆内存中的List对象，但是List对象没有去引用新生成的order对象，导致order对象由于没有被引用，就会被GC回收，这样就不会导致堆内存溢出了.<br><img src="https://img-blog.csdnimg.cn/dcc1a44ff47a4892b9faf570372e05e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以通过visualVM软件来可视化堆内存中对象的变化过程：</p><p>可以看出黄色的是每一个对象新生和销毁的过程，顶峰代表出生，下降到0代表销毁，所以就可以一直跑，不会堆溢出.<br><img src="https://img-blog.csdnimg.cn/248986e276794e50b98d0df6717a118c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对比溢出的情况：<br><img src="https://img-blog.csdnimg.cn/fdb13d45941348649229f5280c364b09.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>New区域不断的增加，到顶后，Old再累积</p><h2 id="2-13-JVM如何判断对象可以被回收？"><a href="#2-13-JVM如何判断对象可以被回收？" class="headerlink" title="2.13 JVM如何判断对象可以被回收？"></a>2.13 JVM如何判断对象可以被回收？</h2><p>在JVM堆里面存放着所有的Java对象，垃圾收集器在对堆进行回收前，首先要确定这些对象之中哪些还“存活”着，哪些已经“死去”；</p><p>Java通过 <strong>可达性分析（Reachability Analysis）</strong> 算法 来判定对象是否存活的；</p><p>该算法的基本思路：通过一系列称为“GC Roots”的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连（也称为不可达），则证明此对象是不可能再被使用的对象，就可以被垃圾回收器回收；<br><img src="https://img-blog.csdnimg.cn/e230558cf0b642d3a458ae89b8b7a670.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对象object 5、object 6、object 7虽然有关联，但它们到GC Roots是不可达的，所以它们将会被判定为可回收的对象；</p><p><strong>哪些对象可以作为GC Roots呢？</strong> </p><p>1、在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等所引用的对象；</p><p>2、方法区/元空间中的类静态属性引用的对象；</p><p>3、方法区/元空间中的常量引用的对象；</p><p>4、在本地方法栈中JNI（即通常所说的Native方法）引用的对象； </p><p>5、Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如 </p><p>NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器；</p><p>6、所有被同步锁（synchronized关键字）持有的对象；</p><p>7、反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等； </p><p>8、其他可能临时性加入的对象；</p><blockquote><p>总结：一般我们最常见的就是虚拟机栈中的局部变量引用的对象、临时变量，作为GC Root。</p></blockquote><h2 id="2-14-谈谈Java中不同的引用类型？"><a href="#2-14-谈谈Java中不同的引用类型？" class="headerlink" title="2.14 谈谈Java中不同的引用类型？"></a>2.14 谈谈Java中不同的引用类型？</h2><p>Java里有不同的引用类型，分别是强引用、软引用、弱引用 和 虚引用；</p><p>强引用：Object object = new Object(）;</p><p>软引用：SoftReference 内存充足时不回收，内存不足时则回收；</p><p>弱引用：WeakReference 不管内存是否充足，只要GC一运行就会回收该引用对象；</p><p>虚引用：PhantomReference这个其实暂时忽略也行，因为很少用，它形同虚设，就像没有引用一样，其作用就是该引用对象被GC回收时候触发一个系统通知，或者触发进一步的处理；</p><blockquote><p>解释：</p><p>强引用【大多用】，因为有变量指向对象，只要引用没有释放，即便是内存不足、溢出了，也不能回收这个引用</p><p>软引用【缓存用】，要看内存足不足，弱引用，一般用于缓存领域(内存充足就缓存起来，内存不足就清空缓存，比如mybatis中就用到过)</p><p>弱引用【很少用】：比如类库ThreadLocal用到过</p><p>虚引用【很少用】</p></blockquote><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">References</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//强引用</span></span><br><span class="line">        Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//软引用</span></span><br><span class="line">        SoftReference softReference = <span class="keyword">new</span> SoftReference(object);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//弱引用</span></span><br><span class="line">        WeakReference weakReference = <span class="keyword">new</span> WeakReference(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-15-JVM堆内存分代模型？"><a href="#2-15-JVM堆内存分代模型？" class="headerlink" title="2.15 JVM堆内存分代模型？"></a>2.15 JVM堆内存分代模型？</h2><p>JVM堆内存的分代模型：年轻代、老年代；</p><p>大部分对象朝生夕死，少数对象长期存活；</p><p><img src="https://img-blog.csdnimg.cn/6814a9e209ec4beebc5c7b4f595071d2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>From Survivor区也叫S0区，To Survivor 也叫S1区</p><p>大小也可以通过参数去调整</p><h2 id="2-16-JVM堆中新生代的垃圾回收过程？☆☆☆☆"><a href="#2-16-JVM堆中新生代的垃圾回收过程？☆☆☆☆" class="headerlink" title="2.16 JVM堆中新生代的垃圾回收过程？☆☆☆☆"></a>2.16 JVM堆中新生代的垃圾回收过程？☆☆☆☆</h2><p><img src="https://img-blog.csdnimg.cn/bc2645bcf46742fe81a85eb407c70c24.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>JVM里垃圾回收针对的是 <strong>新生代，老年代，还有元空间/方法区（永久代）</strong>，</p><p>不会针对方法的栈帧进行回收，方法一旦执行完毕，栈帧出栈，里面的局部变量直接就从内存里清理掉，也就是<strong>虚拟机栈不存在垃圾回收</strong>；</p><p>代码里创建出来的对象，一般就是两种：</p><p>1、一种是短期存活的，分配在Java堆内存之后，迅速使用完就会被垃圾回收；</p><p>2、一种是长期存活的，需要一直生存在Java堆内存里，让程序后续不停的去使用；</p><p>第一种短期存活的对象，是在Java堆内存的新生代里分配；</p><p>第二种长期存活的对象，通过在新生代S0区和S1区来回被垃圾回收15次后，进入Java堆内存的老年代中，这里的15次，我们也称为对象的年龄，即对象的年龄为15岁；</p><p>java -XX:+PrintFlagsFinal 打印jvm默认参数值；</p><blockquote><p>总结：<strong>垃圾回收针对的是堆和元空间</strong></p></blockquote><p><strong>过程详解：</strong></p><p>新创建的对象先进Eden空间，满了后，再就触发Minor GC就会去回收Eden区域里面的对象，这里面有些需要存活、有些需要回收，先把要存活的移到From Survivor区域，把要回收的对象清除掉。<br><img src="https://img-blog.csdnimg.cn/870f4346c35c43068d98a8f2ab22194b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>第二轮：当Eden区域第二次再满的时候，这时又要出发Minor GC，这时候处理回收的就是Eden和S0两个区域的对象了</p><p>先将不能回收的对象移到S1区域，把要回收的对象清空掉，此时Eden区域空闲了。<br><img src="https://img-blog.csdnimg.cn/18ee3ee769424e268e2d65fa5ad9163a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后再处理S0区域中的对象，把要回收的清除，要存活的移到S1区域。<br><img src="https://img-blog.csdnimg.cn/1094d8f91e724c72b2bab0d1659a4d2b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3f6349966c7b44a6a71263e21297d05f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>第三轮：当Eden区域再次满载状态时，再次触发Minor GC，这时处理的就是已满的Eden以及S1区域，先处理Eden：将回收的清除，需要存活的移至S0，针对S1区域做同理操作。<br><img src="https://img-blog.csdnimg.cn/7baf9572459f44568b4f5e697b067125.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4d5adeb8062b4b7eb384c5c2e5f883a2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>然后再回收S1区域的对象，其中不能回收的移到S0区域，要回收的清除掉。<br><img src="https://img-blog.csdnimg.cn/5cf03084c84740008af73897fa365c3f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">如此，循环往复，已存在于S0、S1的对象经过Minor GC后，要继续存活的就移到另一个区域(S0 or S1)，要回收的清除即可，要回收的对象就会在S0、S1两个区域中间来回移动，当移动的次数大于15次后，那之后就放进老年代，表示这个对象是需要长期存活的对象。</p><p>在中间每次清理S0、S1后，每次处理后都会有一个是空闲状态的，下一次把需要存活的移到空闲的区域</p><p><strong>年龄阈值</strong></p><p>关于年龄阈值，如果是并行GC，默认值是15，如果是CMS垃圾处理器的，就是6，详细可以看官方文档：</p><p>一般不指定垃圾处理器，那就是并行的，所以默认15次</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC</a></p><p><img src="https://img-blog.csdnimg.cn/656d20e0fc544965af0f785bf29deca9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以执行命令来看JVM的默认参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal 打印jvm默认参数值；</span><br></pre></td></tr></table></figure><h2 id="2-17-JVM对象动态年龄判断是怎么回事？☆☆☆"><a href="#2-17-JVM对象动态年龄判断是怎么回事？☆☆☆" class="headerlink" title="2.17 JVM对象动态年龄判断是怎么回事？☆☆☆"></a>2.17 JVM对象动态年龄判断是怎么回事？☆☆☆</h2><p>虚拟机<strong>并不是永远</strong>地要求对象的年龄必须达到了MaxTenuringThreshold=15才能晋升老年代；</p><p><strong>结论</strong><br>动态年龄判断：Survivor区的对象年龄从小到大进行累加，当累加到X年龄（某个年龄）时占用空间的总和大于50%（可以使用-XX:TargetSurvivorRatio=? 来设置保留多少空闲空间，默认值是50），那么比X年龄大的对象都会晋升到老年代；</p><p>1、Survivor区分布如下图：</p><p>这里是三轮后的的一个分布结果<br><img src="https://img-blog.csdnimg.cn/642f3d684c4f40f9b82a341303c2d2f1.png" alt="在这里插入图片描述"></p><blockquote><p>解释：也就是还有45%的对象还在存活，只要大于50%，才会触发动态年龄判断</p></blockquote><p>2、此时新生代GC后，有6%的对象进入Survivor区，Survivor区分布如下图：<br><img src="https://img-blog.csdnimg.cn/292de29e8215408a814dbad57aae85c0.png" alt="在这里插入图片描述"><br>这时从1岁加到4岁时,总和51% 大于50%，但此时没有大于四岁的对象，即没有对象晋升</p><blockquote><p>解释：动态年龄判断是在大于50%后触发，然后针对的是50%以后的大年龄对象，也就是4岁以后的，5岁 6岁…此处没有</p></blockquote><p>3、又经过一次新生代GC后，有40%的对象进入Survivor区，Survivor区分布如下图：<br><img src="https://img-blog.csdnimg.cn/05aab638f83447baa0ceaf497fa4b74c.png" alt="在这里插入图片描述"><br>Survivor区的对象年龄从小到大进行累加，当累加到 3 年龄时的总和大于50%，那么比3大的都会晋升到老年代，即<strong>4岁的20%、5岁的20%晋升到老年代</strong>；</p><blockquote><p>总结：并不是严格的到了15岁，就会到达老年代，也有动态年龄判断机制！</p></blockquote><h2 id="2-18-什么是老年代空间分配担保机制"><a href="#2-18-什么是老年代空间分配担保机制" class="headerlink" title="2.18 什么是老年代空间分配担保机制"></a>2.18 什么是老年代空间分配担保机制</h2><p><img src="https://img-blog.csdnimg.cn/016cc3b2804c45188544b456bfdb6ae7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>Eden：800m –&gt;300m</p><p>S0：100m</p><p>S1：100m</p><p>老年代：1000m，剩350m、200m</p><p>新生代Minor GC后剩余存活对象太多，无法放入Survivor区中，此时就必须将这些存活对象直接转移到老年代去，如果此时老年代空间也不够怎么办？</p><p>1、执行任何一次Minor GC之前，JVM会先检查一下老年代可用内存空间，是否大于新生代所有对象的总大小，因为在极端情况下，可能新生代Minor GC之后，新生代所有对象都需要存活，那就会造成新生代所有对象全部要进入老年代；</p><p>2、如果老年代的可用内存大于新生代所有对象总大小，此时就可以放心大胆的对新生代发起一次Minor GC，因为Minor GC之后即使所有对象都存活，Survivor区放不下了，也可以转移到老年代去； </p><p>3、如果执行Minor GC之前，检测发现老年代的可用空间已经小于新生代的全部对象总大小，那么就会进行下一个判断，判断老年代的可用空间大小，是否大于之前每一次Minor GC后进入<strong>老年代的对象的平均大小</strong>，如果判断发现老年代的内存大小，大于之前每一次Minor GC后进入老年代的对象的平均大小，那么就是说可以冒险<strong>尝试一下Minor GC</strong>，但是此时真的可能有风险，那就是Minor GC过后，剩余的存活对象的大小，大于Survivor空间的大小，也大于老年代可用空间的大小，老年代都放不下这些存活对象了，此时就会触发一次“Full GC”； </p><p>所以老年代空间分配担保机制的目的？也是为了<strong>避免频繁进行Full GC</strong>；</p><p>4、如果Full GC之后，老年代还是没有足够的空间存放Minor GC过后的剩余存活对象，那么此时就会导致“OOM”内存溢出 ；</p><p>在JDK6的时候有一个参数-XX:+HandlePromotionFailure用于开启是否要进行空间担保;</p><blockquote><p>解释：</p><p>简单来说，就是往老年代放对象的时候，这个空间够不够，有一个担保机制。</p><p>当Eden新生代区域装满对象后，触发Minor GC，这里的核心在于做一个判断：</p><p>判断老年代的可用空间能不能大于新生代的对象大小总和，（这里相当于假设新生代对象全部都不可回收 并且S0 S1也不够，那么就得往老年代里面放，如果老年代可以全覆盖了，说明可以直接Minor GC，是没有OOM风险的）；如果老年代空间不足以覆盖全部新生代对象，那么就再作第二个判断：看历史往老年代放对象的平均大小和老年代的可用空间做比较(这里相当于是个评估，用历史平均去预算一下，但是也可能这一次比历史平均的都大，那么最终还得Full GC，Full GC指的是对老年代做回收，如果仍然不够则OOM)，这样的目的还是为了避免Full GC</p></blockquote><p><img src="https://img-blog.csdnimg.cn/034ec2ed49e84d10a32b1037e7e6172b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>核心关键：</strong><br>避免频繁的Full GC，所以每次判断都是先尽量走Minor GC，实在不行再Full GC。</p><h2 id="2-19-什么情况下对象会进入老年代？"><a href="#2-19-什么情况下对象会进入老年代？" class="headerlink" title="2.19 什么情况下对象会进入老年代？"></a>2.19 什么情况下对象会进入老年代？</h2><p>1、躲过15次GC之后进入老年代，可通过JVM参数“-XX:MaxTenuringThreshold”来设置年龄，默认为15岁；</p><p>2、动态对象年龄判断；</p><p>3、老年代空间担保机制；</p><p>4、<strong>大对象直接进入老年代</strong>；</p><p>大对象是指需要大量连续内存空间的Java对象，比如很长的字符串或者是<strong>很大的数组或者List集合</strong>，大对象在分配空间时，容易导致内存明明还有不少空间时就提前触发垃圾回收以获得足够的连续空间来存放它们，而当复制对象时，大对象又会引起<strong>高额的内存复制开销，</strong>为了避免新生代里出现那些大对象，然后屡次躲过GC而进行来回复制，此时JVM就直接把该大对象放入老年代，而不会经过新生代；</p><p>我们可以通过JVM参数“-XX:PretenureSizeThreshold”设置多大的对象直接进入老年代，该值为字节数，比如“1048576”字节就是1MB，该参数表示如果创建一个大于这个大小的对象，比如一个超大的数组或者List集合，此时就直接把该大对象放入老年代，而不会经过新生代； </p><p>-XX:PretenureSizeThreshold参数只对Serial和ParNew两款新生代收集器有效，其他新生代垃圾收集器不支持该参数，如果必须使用此参数进行调优，可考虑 ParNew+CMS的收集器组合；</p><blockquote><p>解释：对于大对象来说，一般大概率是不会被回收的，那么如果在S0和S1区域来回的移动，这样的内存开销是很大的，为了避免这一个巨大开销，就直接将过大的对象直接放入到老年代中存储</p></blockquote><h2 id="2-20-JVM运行时数据区-元空间的特点及作用？"><a href="#2-20-JVM运行时数据区-元空间的特点及作用？" class="headerlink" title="2.20 JVM运行时数据区 元空间的特点及作用？"></a>2.20 JVM运行时数据区 元空间的特点及作用？</h2><p>1、在JDK1.8开始才出现元空间的概念，之前叫方法区/永久代；</p><p>2、元空间与Java堆类似，是线程共享的内存区域；</p><p>3、<strong>存储被加载的类信息、常量、静态变量、常量池、即时编译后的代码等数据</strong>；</p><p>4、元空间采用的是本地内存，本地内存有多少剩余空间，它就能扩展到多大空间，也可以设置元空间大小；</p><p>-XX:MetaspaceSize=20M -XX:MaxMetaspaceSize=20m</p><p>5、元空间很少有GC垃圾收集，一般该区域回收条件苛刻，能回收的信息比较少，所以GC很少来回收；</p><p>6、元空间内存不足时，将抛出OutOfMemoryError；</p><blockquote><p>解释：</p><p>jdk1.8前都叫方法区，目前都叫元空间，这个区域和堆是并列的，也属于线程共享的内存区域，其存储的主要是类的信息，静态变量、常量等等一系列静态的量，比如下图，类加载后，类的信息就会存储在元空间中；</p><p>元空间的内存是不需要垃圾回收的，能回收的信息比较少</p><p>当元空间内存不足时候也会报OOM</p><p>元空间的大小占用的是本地内存，所以本地内存还剩多少，就可以给它扩展到多少，一般来说都是绝对足够的</p></blockquote><p> <img src="https://img-blog.csdnimg.cn/53665f46da0e434687e874ea7e83afe3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>测试元空间溢出</strong></p><p>这里采用了动态代理方式，来不断的创建类到元空间中</p><p>死循环，这里当超出了内存大小后就会溢出，如果不设置参数的话，就是根据机器剩余的内存来扩展，这时候需要等待很久才会溢出，如下图修改元空间大小参数，大小设置为20m，会马上内存溢出：</p><p><img src="https://img-blog.csdnimg.cn/e79ae98560b44d228a49e2e0a243f23a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/19ac30138e4d497089b0c551074be655.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元空间溢出测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetaSpace</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">            enhancer.setSuperclass(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            enhancer.setUseCache(<span class="keyword">false</span>);<span class="comment">//缓存</span></span><br><span class="line">            enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建动态代理类class</span></span><br><span class="line">            UserService userService = (UserService)enhancer.create();</span><br><span class="line">            userService.find();</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"创建了"</span> + (++counter) + <span class="string">"个动态代理对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"UserService类加载......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"find......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-21-JVM本机直接内存的特点及作用？"><a href="#2-21-JVM本机直接内存的特点及作用？" class="headerlink" title="2.21 JVM本机直接内存的特点及作用？"></a>2.21 JVM本机直接内存的特点及作用？</h2><p>1、直接内存（Direct Memory）不属于JVM运行时数据区，是本机直接物理内存；</p><p>2、像在JDK 1.4中新加入了NIO（New Input/Output）类，一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的 DirectByteBuffer对象作为这块内存的引用进行操作，这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据；</p><p>3、可能导致OutOfMemoryError异常出现； netty</p><h2 id="2-22-JVM本机直接内存溢出问题？"><a href="#2-22-JVM本机直接内存溢出问题？" class="headerlink" title="2.22 JVM本机直接内存溢出问题？"></a>2.22 JVM本机直接内存溢出问题？</h2><p><strong>直接内存（Direct Memory）</strong> 的容量大小可通过-XX:MaxDirectMemorySize参数来指定，该参数表示设置新I / O（java.nio程序包）直接缓冲区分配的最大总大小（以字节为单位）;默认情况下，大小设置为0，这意味着JVM自动为NIO直接缓冲区分配选择大小；</p><p>由直接内存导致的内存溢出，<strong>无法生成Heap Dump文件</strong>，如果程序中直接或间接使用了NIO技术，那就可以重点考虑检查一下直接内存方面的原因；</p><p>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/dev/heapdump.hprof</p><blockquote><p>解释</p><ol><li><p>如果想输出原因文件，则要输入JVM参数XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/dev/heapdump.hprof</p></li><li><p>测试NIO的直接内存溢出：</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectBufferOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> _1M = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">        List&lt;ByteBuffer&gt; buffers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);</span><br><span class="line">            buffers.add(byteBuffer);</span><br><span class="line">            System.out.println(count++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报直接内存溢出(物理内存)</p><p> <img src="https://img-blog.csdnimg.cn/38e79a5bd5ca40aeba133f00e707e012.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>修改直接内存参数<br><img src="https://img-blog.csdnimg.cn/1eadedc438334164bf0b84758a0fd24e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4728feee8d2f4b81acd1bd3d3918cc0d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>如果想输出原因文件，则要输入JVM参数XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/dev/heapdump.hprof</p><ol><li>先配置</li><li>运行程序，报Direct buffer memory错误</li><li>发现在D:/dev/下没有生成heapdump.hprof文件</li></ol><p>这个步骤可以用来<strong>排查出是直接内存</strong>溢出，再进一步考虑是否直接或者间接的使用到了NIO技术</p><h2 id="2-23-几个与JVM内存相关的核心参数？"><a href="#2-23-几个与JVM内存相关的核心参数？" class="headerlink" title="2.23 几个与JVM内存相关的核心参数？"></a>2.23 几个与JVM内存相关的核心参数？</h2><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BGBCIEFC</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-Xms Java堆内存的大小；</span><br><span class="line">-Xmx Java堆内存的最大大小；</span><br><span class="line"></span><br><span class="line">-Xmn Java堆内存中的新生代大小，扣除新生代剩下的就是老年代的内存大小；</span><br><span class="line"></span><br><span class="line">-XX:MetaspaceSize 元空间大小；</span><br><span class="line"></span><br><span class="line">-XX:MaxMetaspaceSize 元空间最大大小；</span><br><span class="line"></span><br><span class="line">-Xss 每个线程的栈内存大小；</span><br><span class="line"></span><br><span class="line">-XX:SurvivorRatio&#x3D;8 设置eden区 和survivor 区大小的比例，默认是8:1:1；</span><br><span class="line"></span><br><span class="line">-XX:MaxTenuringThreshold&#x3D;5 年龄阈值；</span><br><span class="line"></span><br><span class="line">-XX:+UseConcMarkSweepGC 指定CMS垃圾收集器；</span><br><span class="line"></span><br><span class="line">-XX:+UseG1GC 指定使用G1垃圾回收器</span><br></pre></td></tr></table></figure><p>–查看默认的堆大小及默认的垃圾收集器</p><p>java -XX:+PrintCommandLineFlags -version</p><h2 id="2-24-查看一个对象的大小"><a href="#2-24-查看一个对象的大小" class="headerlink" title="2.24 查看一个对象的大小"></a>2.24 查看一个对象的大小</h2><p>导入Lucene库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">//1024kb = 1m</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      Order order = <span class="keyword">new</span> Order();</span><br><span class="line">      <span class="comment">//计算指定对象及其引用树上所有对象的综合大小，单位字节</span></span><br><span class="line">      <span class="keyword">long</span> size = RamUsageEstimator.sizeOf(order);</span><br><span class="line">      <span class="comment">//计算指定对象及其引用树上所有对象的综合大小，返回可读的结果，如：2KB</span></span><br><span class="line">      String humanSize = RamUsageEstimator.humanSizeOf(order);</span><br><span class="line">      </span><br><span class="line">      System.out.println(size);</span><br><span class="line">      System.out.println(humansize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e5b64d5d802d489ca62aeb2e03760e28.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> JAVA虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM【JVM类加载机制】</title>
      <link href="2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM/"/>
      <url>2021/11/06/deep11-%E5%B8%A6%E7%9D%80%E9%97%AE%E9%A2%98%E9%80%90%E6%AD%A5%E7%90%86%E8%A7%A3JVM/</url>
      
        <content type="html"><![CDATA[<p>概述：</p><ul><li>JVM类加载机制</li><li>深入剖析JVM内存管理</li><li>JVM垃圾回收机制</li><li>JVM故障诊断性能调优</li></ul><h1 id="一、JVM类加载机制"><a href="#一、JVM类加载机制" class="headerlink" title="一、JVM类加载机制"></a>一、JVM类加载机制</h1><h2 id="1-1-Java运行时一个类是什么时候被加载的？"><a href="#1-1-Java运行时一个类是什么时候被加载的？" class="headerlink" title="1.1 Java运行时一个类是什么时候被加载的？"></a>1.1 Java运行时一个类是什么时候被加载的？</h2><p>一个类在什么时候开始被加载，《Java虚拟机规范》中并没有进行强制约束，交给了虚拟机自己去自由实现，HotSpot虚拟机是按需加载，在需要用到该类的时候加载这个类；</p><p>1、Sun公司最早的 Classic虚拟机；</p><p>2、Sun/Oracle公司的HotSpot虚拟机；</p><p>3、BEA公司的JRockit虚拟机；</p><p>4、IBM公司的IBM J9虚拟机；</p><p>官方：<a href="https://docs.oracle.com/javase/8/" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/</a> </p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><p>-XX:+TraceClassLoading</p><p>测试类的详细载入：</p><p> <img src="https://img-blog.csdnimg.cn/5bd24ce438114ca6931b59bb58529a42.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/2e6b46a24d774bd1bdc32c2d084e0dd3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d43ad7b91ce94a3ebfb0e9137c23ee83.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="1-2-JVM一个类的加载过程？"><a href="#1-2-JVM一个类的加载过程？" class="headerlink" title="1.2 JVM一个类的加载过程？"></a>1.2 JVM一个类的加载过程？</h2><p>一个类从加载到jvm内存，到从jvm内存卸载，它的整个生命周期会经历7个阶段：</p><p>1、加载（Loading）</p><p>2、验证（Verification）</p><p>3、准备（Preparation）</p><p>4、解析（Resolution）</p><p>5、初始化（Initialization）</p><p>6、使用（Using）</p><p>7、卸载（Unloading）</p><p>其中验证、准备、解析三个阶段统称为连接（Linking）；<br><img src="https://img-blog.csdnimg.cn/13fa5bffb22047db8449f3846761b42e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>加载：</strong> classpath、jar包、网络、某个磁盘位置下的类的class二进制字节流读进来，在内存中生成一个代表这个类的java.lang.Class对象放入元空间，此阶段我们程序员可以干预，我们可以自定义类加载器来实现类的加载；</p><p><strong>验证：</strong> 验证Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证虚拟机的安全；</p><p><strong>准备：</strong> 类变量赋默认初始值，int为0，long为0L，boolean为false，引用类型为null；常量赋正式值；</p><p><strong>解析：</strong> 把符号引用翻译为直接引用；</p><p><strong>初始化：</strong> 当我们new一个类的对象，访问一个类的静态属性，修改一个类的静态属性，调用一个类的静态方法，用反射API对一个类进行调用，<strong>初始化当前类，其父类也会被初始化</strong>…… 那么这些都会触发类的初始化；</p><p><strong>使用：</strong> 使用这个类；</p><p><strong>卸载：</strong></p><p>1.该类所有的实例都已经被GC，也就是JVM中不存在该Class的任何实例；</p><p>2.加载该类的ClassLoader已经被GC； （ClassLoader：类加载器，用于加载class）</p><p>3.该类的java.lang.Class 对象没有在任何地方被引用，如不能在任何地方通过反射访问该类的方法；</p><p><strong>准备阶段：</strong></p><p>​    对于final常量来说，准备阶段直接赋值a为123，对于类变量，是在类初始化（new）的时候才会进行赋值，所以先赋0，而对于实例变量abc来说，也是先赋0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123; <span class="comment">// java.lang.Class</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">222</span>;<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"sdfsdf"</span>; <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> abc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -XX:+TraceClassLoading 监控类的加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.working();</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解析阶段：</p><p>把一个类的class文件读进来之后，变成java.lang.class对象，在元空间里面</p></blockquote><h2 id="1-3一个类被初始化的过程？☆☆☆"><a href="#1-3一个类被初始化的过程？☆☆☆" class="headerlink" title="1.3一个类被初始化的过程？☆☆☆"></a>1.3一个类被初始化的过程？☆☆☆</h2><p><img src="https://img-blog.csdnimg.cn/b81a91c6b2e745eba65d3991c8d1eef5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>类的初始化阶段，Java虚拟机才真正开始执行类中编写<strong>Java程序代码</strong>；</p><p>进行准备阶段时，变量已经赋过一次系统要求的初始零值，</p><p>而在初始化阶段，才真正初始化类变量和其他资源；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态常量  ==准备</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String staticConstantField = <span class="string">"静态常量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量 ==准备阶段赋值为 null，初始化阶段赋值为 静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String staticField = <span class="string">"静态变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量 == 创建对象的时候赋值</span></span><br><span class="line">    <span class="keyword">public</span> String field = <span class="string">"变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块 ==初始化阶段执行</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(staticConstantField);</span><br><span class="line">        System.out.println(staticField);</span><br><span class="line">        System.out.println(<span class="string">"静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化块 == 创建对象的时候执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">        System.out.println(<span class="string">"初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器 == 创建对象的时候执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java Test02</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test02();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、rt.jar charset.jar</span></span><br><span class="line">        <span class="comment">// 2、InitialOrderTest</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证初始化：</p><ol><li>当main方法中new对象时，执行空：<br><img src="https://img-blog.csdnimg.cn/b904b3f0c0ac458da6908208327572f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>此时会执行静态代码块中的语句，同时静态常量、静态变量都得到了初始化，所以main方法执行后，会初始化Test02类中的静态常量、静态变量、静态代码块</li></ol><ol start="2"><li>main中new Test02对象时：<br><img src="https://img-blog.csdnimg.cn/cf00cf501e374fa9bf1a8c9af9501425.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>同样也会先初始化Test02中的静态常量、静态变量、静态代码块，和第一个验证一致，其次再去初始化类的成员变量、代码块、构造方法</li></ol><h2 id="1-4-继承时父子类的初始化顺序是怎样的？"><a href="#1-4-继承时父子类的初始化顺序是怎样的？" class="headerlink" title="1.4 继承时父子类的初始化顺序是怎样的？"></a>1.4 继承时父子类的初始化顺序是怎样的？</h2><p>父类–静态变量</p><p>父类–静态初始化块</p><p>子类–静态变量</p><p>子类–静态初始化块</p><p>父类–变量</p><p>父类–初始化块</p><p>父类–构造器</p><p>子类–变量</p><p>子类–初始化块</p><p>子类–构造器</p><p>父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String p_StaticField = <span class="string">"父类--静态变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    <span class="keyword">public</span> String p_Field = <span class="string">"父类--变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(p_StaticField);</span><br><span class="line">        System.out.println(<span class="string">"父类--静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(p_Field);</span><br><span class="line">        System.out.println(<span class="string">"父类--初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParentClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"父类--构造器"</span>);</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + i + <span class="string">", j="</span> + j);</span><br><span class="line">        i = <span class="number">1</span>; j = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s_StaticField = <span class="string">"子类--静态变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量</span></span><br><span class="line">    <span class="keyword">public</span> String s_Field = <span class="string">"子类--变量"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(s_StaticField);</span><br><span class="line">        System.out.println(<span class="string">"子类--静态初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s_Field);</span><br><span class="line">        System.out.println(<span class="string">"子类--初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"子类--构造器"</span>);</span><br><span class="line">        System.out.println(<span class="string">"i="</span> + i + <span class="string">",j="</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序入口 java ChildClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChildClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试验证：</p><ol><li><p>main方法中不执行任何语句：<br><img src="https://img-blog.csdnimg.cn/85865c3977de490c9c7d1144bb0fcc10.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>当在子类的main中执行时，会先初始化父类的静态变量+静态代码块，然后再初始化子类的静态变量+静态代码块</p></li><li><p>main方法中new子类对象时：<br><img src="https://img-blog.csdnimg.cn/da506d9c8bd349e9bcc61a301ffde44d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>前面的依旧，先初始化父类子类的静态变量、静态代码块，然后由于new了子类，所以还会先执行父类的成员变量、代码块、构造器，再执行子类的成员变量、代码块、构造器。</p></li><li><p>如果在子类main中new父类对象<br><img src="https://img-blog.csdnimg.cn/003ee5bee17c42ca9300c6b2addc1d85.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>结果可想而知，由于是子类的main，会先初始化父类子类静态变量、静态代码块，然后由于new了父类，所以还会初始化父类的成员变量、代码块、构造器</p></li></ol><h2 id="1-5-究竟什么是类加载器？"><a href="#1-5-究竟什么是类加载器？" class="headerlink" title="1.5 究竟什么是类加载器？"></a>1.5 究竟什么是类加载器？</h2><p><img src="https://img-blog.csdnimg.cn/ebe3963d9cb549828b27307c07336cdf.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在类“加载”阶段，通过一个类的全限定名来获取描述该类的二进制字节流的这个动作的“代码”被称为“类加载器”（Class Loader），这个 <strong>动作是可以自定义实现</strong> 的；</p><p>类加载器可以由C++、Java语言实现</p><p><strong>简单来说，就是把.class文件以二进制形式读进来</strong></p><h2 id="1-6-JVM有哪些类加载器？"><a href="#1-6-JVM有哪些类加载器？" class="headerlink" title="1.6 JVM有哪些类加载器？"></a>1.6 JVM有哪些类加载器？</h2><p>站在Java虚拟机的角度来看，只存在两种不同的类加载器：</p><p>1、启动类加载器（Bootstrap ClassLoader），使用C++语言实现，是虚拟机自身的一部分；</p><p>2、其他所有的类加载器，由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader；</p><p>站在Java开发者的角度来看，自JDK 1.2开始，Java一直保持着三层类加载器架构；<br><img src="https://img-blog.csdnimg.cn/30454650ccfb4aeb9bad631755a2d745.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="1-7-JVM中不同的类加载器加载哪些文件？"><a href="#1-7-JVM中不同的类加载器加载哪些文件？" class="headerlink" title="1.7 JVM中不同的类加载器加载哪些文件？"></a>1.7 JVM中不同的类加载器加载哪些文件？</h2><p>1、启动类加载器（Bootstrap ClassLoader）：（根的类加载器）C++语言实现的，在java中通过getClassLoader方法是获取不到的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;JAVA_HOME&gt;\jre\lib\rt.jar，resources.jar、charsets.jar</span><br><span class="line"></span><br><span class="line">被-Xbootclasspath参数所指定的路径中存放的类库；</span><br></pre></td></tr></table></figure><p>2、扩展类加载器（Extension ClassLoader）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sun.misc.Launcher$ExtClassLoader，</span><br><span class="line"></span><br><span class="line">&lt;JAVA_HOME&gt;\jre\lib\ext，</span><br><span class="line"></span><br><span class="line">被java.ext.dirs系统变量所指定的路径中所有的类库；</span><br></pre></td></tr></table></figure><p>3、应用程序类加载器（Application ClassLoader）：系统的类加载器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader</span><br><span class="line"></span><br><span class="line">加载用户类路径（ClassPath）上所有的类库；</span><br></pre></td></tr></table></figure><blockquote><p>测试验证：</p></blockquote><p>比如在</p><ul><li><p><JAVA_HOME>\jre\lib\rt.jar下找到一个类BufferReader类，查看其classLoader，为空，由于是c++语言编写的，所以Java中获取不到，是正常的；</p><p>输出为null则表明<strong>根的类加载器</strong></p></li></ul><p><img src="https://img-blog.csdnimg.cn/38a1011b414d4e08a616e481e7cb6f79.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>AppClassLoader，包括自己写的代码以及项目中涉及到的第三方jar包（如Springboot）<br><img src="https://img-blog.csdnimg.cn/84656823250941ce9128e7b206304cbc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>继承结构：<br><img src="https://img-blog.csdnimg.cn/b935dacc92ad46c49fc9a53da03119b6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h2 id="1-8-JVM三层类加载器之间的关系是继承吗？"><a href="#1-8-JVM三层类加载器之间的关系是继承吗？" class="headerlink" title="1.8 JVM三层类加载器之间的关系是继承吗？"></a>1.8 JVM三层类加载器之间的关系是继承吗？</h2><img src="https://img-blog.csdnimg.cn/89bda791bb7e4bd08962b8042fc80e3b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>不是继承关系。</li></ul><p>解释：<br><img src="https://img-blog.csdnimg.cn/2bccbcf820094c25a44338b7f9da2292.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b1c78fa1a84f44038119bdb37527e16b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f9a344f09134651b3e479ca0b70a9ec.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2f33361c23e04775b0519a8fb63d9156.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>换个角度思考这个问题，前面提到过BootstrapClassLoader是C++语言实现的，ExtClassLoader是Java实现的，怎么可能继承呢？</p><p>如果我们自定义一个类加载器，那么则是继承共同的父类ClassLoader(抽象类)</p><h2 id="1-9-JVM类加载的双亲委派模型-☆☆☆"><a href="#1-9-JVM类加载的双亲委派模型-☆☆☆" class="headerlink" title="1.9 JVM类加载的双亲委派模型 ☆☆☆"></a>1.9 JVM类加载的双亲委派模型 ☆☆☆</h2><p><img src="https://img-blog.csdnimg.cn/9ff291a01cf941ef812669baa1d7a41f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>官方描述：</strong></p><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当上一层类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到这个类）时，下一层类加载器才会尝试自己去加载；</p><blockquote><p><strong>过程分析：</strong></p><p>如：我要加载String这个类，来自rt.jar,首先让App ClassLoader去加载，但它自己不加载，委派给上一层加载，ExtClassLoader也不去加载，再继续委派给Bootstrap ClassLoader，再往上就没有了，那么此时BootstrapClassLoader就要去尝试加载，它主要是加载jre下内部库的jar包，而String这个类正好在rt.jar中，所以就return了，从而把String这个类加载到JVM内存中了。</p></blockquote><blockquote><p>当BootstrapClassLoader加载内库后，找不到所要加载的类，那么就让第二层ExtClassLoader去尝试加载，找得到就return，找不到就继续让AppClassLoader去加载后找。</p><p>当这个类几个类加载器都找不到时，报ClassNotFoundException</p><p>解释一下为啥叫双亲：因为AppClassLoader上面有两层，所以叫双亲</p><p>总结：先自底向上委派，再自顶向下去尝试加载</p></blockquote><h2 id="1-10-JDK为什么要设计双亲委派模型，有什么好处？"><a href="#1-10-JDK为什么要设计双亲委派模型，有什么好处？" class="headerlink" title="1.10 JDK为什么要设计双亲委派模型，有什么好处？"></a>1.10 JDK为什么要设计双亲委派模型，有什么好处？</h2><p>1、确保安全，避免Java核心类库被修改；</p><p>2、避免重复加载；</p><p>3、保证类的唯一性；</p><p>如果你写一个jaa.lang.String的类去运行，发现会抛出如下异常；</p><p>解释：</p><p> 比如即使自己写了个String类，也不会被加载，因为最先会加载rt.jar下的String，能够避免核心内库被修改，要保证安全。<br> <img src="https://img-blog.csdnimg.cn/fb14a61393854f4fa0828b5f99db626f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/01b32ddb909044a88ca3e70d7ad9999a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>自定义的包理论上是最终被APPClassLoader去加载的，但是这里为啥会报错，是因为包和核心内库重名了，所以报安全异常</p><h2 id="1-11-可以打破JVM双亲委派模型吗？如何打破JVM双亲委派模型？"><a href="#1-11-可以打破JVM双亲委派模型吗？如何打破JVM双亲委派模型？" class="headerlink" title="1.11 可以打破JVM双亲委派模型吗？如何打破JVM双亲委派模型？"></a>1.11 可以打破JVM双亲委派模型吗？如何打破JVM双亲委派模型？</h2><p>可以；</p><p>想要打破这种模型，那么就自定义一个类加载器，重写其中的loadClass方法，使其不进行双亲委派即可；</p><h2 id="1-12-如何自定义自己的类加载器？"><a href="#1-12-如何自定义自己的类加载器？" class="headerlink" title="1.12 如何自定义自己的类加载器？"></a>1.12 如何自定义自己的类加载器？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、继承ClassLoader</span><br><span class="line">2、覆盖findClass(String name)方法 或者 loadClass() 方法；</span><br></pre></td></tr></table></figure><p>findClass(String name)方法 不会打破双亲委派；</p><p>loadClass() 方法 可以打破双亲委派（如何去加载可以自己去实现）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义ClassLoader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span></span><br><span class="line">        <span class="comment">//name = 包名 + 类名</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// User.class</span></span><br><span class="line">            String fileName = name.substring(name.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>) + <span class="string">".class"</span>;</span><br><span class="line">            InputStream is = getClass().getResourceAsStream(fileName);</span><br><span class="line">            <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">            is.read(b);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line"></span><br><span class="line">        Class clazz = myClassLoader.findClass(<span class="string">"com.bjpowernode.loader.User"</span>);</span><br><span class="line">        System.out.println(clazz.getClassLoader());</span><br><span class="line">        Object instance = clazz.newInstance();</span><br><span class="line">        System.out.println(instance);</span><br><span class="line"></span><br><span class="line">        System.out.println(User<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">        Class claz2 = User<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Object o2 = claz2.newInstance();</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来com.bjpowernode.loader.User应该去AppClassLoader中加载的，但由于自定义了myClassLoader，并调用了findClass方法，所以会使用自定义的方法去加载。</p><p><img src="https://img-blog.csdnimg.cn/0b3754f67b0c4c15a6f33ed513605403.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="1-13-ClassLoader中的loadClass-、findClass-、defineClass-区别？"><a href="#1-13-ClassLoader中的loadClass-、findClass-、defineClass-区别？" class="headerlink" title="1.13 ClassLoader中的loadClass()、findClass()、defineClass()区别？"></a>1.13 ClassLoader中的loadClass()、findClass()、defineClass()区别？</h2><p>loadClass() 就是主要进行类加载的方法，默认的双亲委派机制就实现在这个方法中；</p><p>findClass() 根据名称或位置加载.class字节码；</p><p>definclass() 把字节码转化为java.lang.Class；</p><p>1、当我们想要自定义一个类加载器的时候，并且想破坏双亲委派模型时，我们会重写loadClass()方法；</p><p>2、如果我们想定义一个类加载器，但是不想破坏双亲委派模型的时候呢？可以可以重写findClass方法()，findClass()方法是JDK1.2之后的ClassLoader新添加的一个方法，这个方法只抛出了一个异常，没有默认实现；</p><p>JDK1.2之后已不再提倡用户直接覆盖loadClass()方法，而是建议把自己的类加载逻辑实现到findClass()方法中；</p><p>因为覆盖即打破双亲委派，所以建议改findClass</p><p>所以，如果你想定义一个自己的类加载器，并且要遵守双亲委派模型，那么可以继承ClassLoader，并且在findClass()中实现你自己的加载逻辑即可；</p><blockquote><p>经典案例：Tomcat就打破了双亲委派机制</p></blockquote><h2 id="1-14-加载一个类采用Class-forName-和ClassLoader有什么区别"><a href="#1-14-加载一个类采用Class-forName-和ClassLoader有什么区别" class="headerlink" title="1.14 加载一个类采用Class.forName()和ClassLoader有什么区别"></a>1.14 加载一个类采用Class.forName()和ClassLoader有什么区别</h2><p><img src="https://img-blog.csdnimg.cn/f13857d9007a481b8a80a13c63409d6a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> Class.forName(<span class="string">"com.jvm.demo.loader.ChildClass"</span>)</span><br><span class="line">       </span><br><span class="line">     Class clazz = Test05.class.getClassLoader().loadClass("com.jvm.demo.loader.ChildClass")</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7f6d9e55388c40669dbb6cae7585ee94.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/91d105129ccf47e893c53bfe3220b152.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>分析区别：<br>由此可见，ClassLoader这种方式，只经过了加载-&gt;链接，但是没有初始化，但是forName方式会初始化<br>如果继续对类实例化，则会初始化，并会创建对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  </span><br><span class="line">     Class clazz = Test05.class.getClassLoader().loadClass("com.jvm.demo.loader.ChildClass");</span><br><span class="line">    clazz.newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bcca71557c23441dbf196a7344a96128.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看看两个方法底层实现：</p><p>forName底层会初始化类：</p><p>调用了一个本地C++方法<br><img src="https://img-blog.csdnimg.cn/21090b3adde84d84ab47d39e7ceffafb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>ClassLoader底层：</p><p>双亲委派类加载，没有对类进行初始化<br><img src="https://img-blog.csdnimg.cn/6446910b0afa4f88b61c9ee328a53227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="1-15-了解Tomcat-的类加载机制"><a href="#1-15-了解Tomcat-的类加载机制" class="headerlink" title="1.15 了解Tomcat 的类加载机制"></a>1.15 了解Tomcat 的类加载机制</h2><p><img src="https://img-blog.csdnimg.cn/ec833dac95374d2bacc77b42dec35f0e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到，在原来的Java的类加载机制基础上，Tomcat新增了3个基础类加载器和每个Web应用的类加载器+JSP类加载器；</p><p>3个基础类加载器在 conf/catalina.properties 中进行配置：</p><p>common.loader=”${catalina.base}/lib”,”${catalina.base}/lib/<em>.jar”,”${catalina.home}/lib”,”${catalina.home}/lib/</em>.jar”<br> server.loader=<br> shared.loader=</p><p>Tomcat自定义了WebAppClassLoader类加载器，打破了双亲委派的机制，即如果收到类加载的请求，首先会尝试自己去加载，如果找不到再交给父加载器去加载，目的就是为了优先加载Web应用自己定义的类，我们知道ClassLoader默认的loadClass方法是以双亲委派的模型进行加载类的，那么Tomcat打破了这个规则，重写了loadClass方法，我们可以看到WebAppClassLoader类中重写了loadClass方法；</p><h2 id="1-16-有没有听说过热加载和热部署，如何自己实现一个热加载？"><a href="#1-16-有没有听说过热加载和热部署，如何自己实现一个热加载？" class="headerlink" title="1.16 有没有听说过热加载和热部署，如何自己实现一个热加载？"></a>1.16 有没有听说过热加载和热部署，如何自己实现一个热加载？</h2><p><strong>热加载</strong> 是指可以在不重启服务的情况下让更改的代码生效，热加载可以显著的提升开发以及调试的效率，它是基于Java的类加载器实现的，但是由于热加载的不安全性，一般不会用于正式的生产环境；</p><p><strong>热部署</strong> 是指可以在不重启服务的情况下重新部署整个项目，比如Tomcat热部署就是在程序运行时，如果我们修改了War包中的内容，那么Tomcat就会删除之前的War包解压的文件夹，重新解压新的War包生成新的文件夹；</p><p>1、热加载是在运行时重新加载class，后台会启动一个线程不断检测你的class是否发生改变；</p><p>2、热部署是在运行时重新部署整个项目，耗时相对较高；</p><p>如何实现热加载呢？</p><p>在程序代码更改且重新编译后，让运行的进程可以实时获取到新编译后的class文件，然后重新进行加载；</p><p><strong>重点步骤</strong></p><p>1、实现自己的类加载器；</p><p>2、从自己的类加载器中加载要热加载的类；</p><p>3、不断轮训要热加载的类class文件是否有更新，如果有更新，重新加载；</p><p>类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个类加载器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * bootstrap ClassLoader jdk/jre/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ext ClassLoader  jdk/ext/目录下的jar包加载</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * App ClassLoader --我们应用的ClassLoader</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File classPathFile;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Class&gt; clazzCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();<span class="comment">//缓存 保存加载的类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String classPath = MyClassLoader.class.getResource("").getPath();</span><br><span class="line">        <span class="keyword">this</span>.classPathFile = <span class="keyword">new</span> File(classPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.findClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name, <span class="keyword">boolean</span> force) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//force是否强制加载</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//之前有没有加载过这个class</span></span><br><span class="line">        Class cls = clazzCache.get(name);</span><br><span class="line">        <span class="keyword">if</span> (force) &#123;</span><br><span class="line">            <span class="comment">//如果强制加载 则缓存值值为空，后面重新加载一遍</span></span><br><span class="line">            cls = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String className = MyClassLoader.class.getPackage().getName() + "." + name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果这个cls不为空则直接return了</span></span><br><span class="line">        <span class="keyword">if</span> (cls == <span class="keyword">null</span> &amp;&amp; classPathFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            File classFile = <span class="keyword">new</span> File(classPathFile + <span class="string">"\\"</span> + name.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>) + <span class="string">".class"</span>);</span><br><span class="line">            <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">                FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">                ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">                    bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    cls = defineClass(className, bos.toByteArray(), <span class="number">0</span>, bos.size());</span><br><span class="line">                    clazzCache.put(name, cls);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            fis.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(bos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            bos.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazzCache.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个定时任务去轮询：</p><p>观察狗 线程：</p><blockquote><p>思路：遍历文件，去拿到每个文件的时间，判断是否被修改，如果修改则重新触发加载类(自定义类加载器)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察狗</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatchDog</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, FileDefine&gt; fileDefineMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WatchDog</span><span class="params">(Map&lt;String, FileDefine&gt; fileDefineMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileDefineMap = fileDefineMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">this</span>.getClass().getResource(<span class="string">""</span>).getPath());</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File watchFile : files) &#123;</span><br><span class="line">            <span class="keyword">long</span> newTime = watchFile.lastModified();</span><br><span class="line">            FileDefine fileDefine = fileDefineMap.get(watchFile.getPath());</span><br><span class="line">            <span class="keyword">long</span> oldTime = fileDefine.getLastDefine();</span><br><span class="line">            <span class="comment">//如果文件被修改了,那么重新生成累加载器加载新文件</span></span><br><span class="line">            <span class="keyword">if</span> (newTime != oldTime) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件被修改......"</span>);</span><br><span class="line">                fileDefine.setLastDefine(newTime);</span><br><span class="line">                <span class="comment">//重新触发类加载</span></span><br><span class="line">                loadMyClass(watchFile.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMyClass</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">            myClassLoader.findClass(className.replace(<span class="string">".class"</span>, <span class="string">""</span>), <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, FileDefine&gt; fileDefineMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        File file = new File(Test.class.getResource("").getPath());</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File watchFile : files) &#123;</span><br><span class="line">            FileDefine fileDefine = <span class="keyword">new</span> FileDefine();</span><br><span class="line">            fileDefine.setLastDefine(watchFile.lastModified());</span><br><span class="line">            fileDefineMap.put(watchFile.getPath(), fileDefine);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定时任务</span></span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> WatchDog(fileDefineMap), <span class="number">3</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        MyClassLoader w = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Class clazz = w.findClass(<span class="string">"MyLog"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ILog myLog = (ILog) clazz.newInstance();</span><br><span class="line">                myLog.log();</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试其中一个修改类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLog</span> <span class="keyword">implements</span> <span class="title">ILog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"log, version 1.0"</span>); 、</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处修改 System.out.println(“log, version 1.0”);为 System.out.println(“log, version 2.0”); 文件发生修改，但是要编译一下，点击build-&gt;Recompile ‘’MyLog.java’，那么轮询时就会发现文件的修改</p><p><img src="https://img-blog.csdnimg.cn/9fb916ae1aff4c37b5dba37591bd7dea.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAcG9wb2Z6aw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> JAVA虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂云计算精髓MapReduce</title>
      <link href="2021/08/05/deep10-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E4%BA%91%E8%AE%A1%E7%AE%97%E7%B2%BE%E9%AB%93MapReduce/"/>
      <url>2021/08/05/deep10-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E4%BA%91%E8%AE%A1%E7%AE%97%E7%B2%BE%E9%AB%93MapReduce/</url>
      
        <content type="html"><![CDATA[<h1 id="MapReduce-简介"><a href="#MapReduce-简介" class="headerlink" title="MapReduce 简介"></a>MapReduce 简介</h1><p>核心思想：“分而治之”<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MapReduce思想在生活中处处可见。或多或少都曾接触过这种思想。MapReduce的思想核心 是“分而治之”，适用于大量复杂的任务处理场景(大规模数据处理场景)。</p><ul><li>Map负责——<strong>分</strong>，把复杂的任务分解为若干个“简单的任务”来并行处理。可以进行拆分的 前提是这些小任务可以并行计算，彼此间几乎没有<strong>依赖关系。</strong></li><li>Reduce负责——<strong>合</strong>，对map阶段的结果进行全局汇总。 MapReduce运行在yarn集群</li></ul><p>有两个阶段：</p><ol><li>ResourceManager</li><li>NodeManager</li></ol><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这两个阶段合起来正是MapReduce思想的体现。后面再细说这两个阶段。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MapReduce的执行流程用下面这张图一目了然：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 简而言之：首先将一个文件分成n片小文件，对每个小部分做map处理，最后再reduce汇总计算结果到一起<br><img src="https://img-blog.csdnimg.cn/5e3af54cd8bd441b83d6973bada83f0f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中的Reduce操作这里画了两个，可能是在汇总计算操作时对不同类型的数据做汇总处理。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 还有一个比较形象的语言解释MapReduce: 我们要数图书馆中的所有书。你数1号书架，我数2号书架。这就是“Map”。我们人越多，数书<br>就更快。 现在我们到一起，把所有人的统计数加在一起。这就是“Reduce”。</p><h1 id="MapReduce-设计构思"><a href="#MapReduce-设计构思" class="headerlink" title="MapReduce 设计构思"></a>MapReduce 设计构思</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MapReduce是一个分布式运算程序的编程框架，核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在Hadoop集群上。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MapReduce设计并提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节。 为程序员提供一个抽象和高层的编程接口和框架。程序员<strong>仅需要关心其应用层的具体计算问题</strong>，仅需编写少量的处理应用本身计算问题的程序代码。如何具体完成这个并行计算任务所相关的诸多系统层细节被隐藏起来,交给计算框架去处理:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map和Reduce为程序员提供了一个清晰的操作接口抽象描述。MapReduce中定义了如下的Map 和Reduce两个抽象的编程接口，由用户去编程实现.Map和Reduce,MapReduce处理的数据类型是&lt;key,value&gt;键值对。</p><p>Map: (k1; v1) → [(k2; v2)]<br>Reduce: (k2; [v2]) → [(k3; v3)]</p><p>这里以wordcount来举例：</p><img src="https://img-blog.csdnimg.cn/e869575151bc4750a0b9c66664dd4158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>一个完整的mapreduce程序在分布式运行时有三类实例进程:</p><ol><li>MRAppMaster 负责整个程序的过程调度及状态协调 </li><li>MapTask 负责map阶段的整个数据处理流程</li><li>ReduceTask 负责reduce阶段的整个数据处理流程</li></ol><img src="https://img-blog.csdnimg.cn/b44ab181fd084ebe9fe72ebb01f75140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>总结：记住两点：必须由ResourceManager来接受计算任务并资源分配，由App Master来执行具体任务</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
            <tag> MapReduce </tag>
            
            <tag> hadoop </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弄懂服务端、客户端【手写一个socket聊天室】</title>
      <link href="2021/08/02/deep9-%E5%BC%84%E6%87%82%E6%9C%8D%E5%8A%A1%E7%AB%AF%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%90%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAsocket%E8%81%8A%E5%A4%A9%E5%AE%A4%E3%80%91/"/>
      <url>2021/08/02/deep9-%E5%BC%84%E6%87%82%E6%9C%8D%E5%8A%A1%E7%AB%AF%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E3%80%90%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAsocket%E8%81%8A%E5%A4%A9%E5%AE%A4%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="常见架构："><a href="#常见架构：" class="headerlink" title="常见架构："></a>常见架构：</h2><p>C/S架构：Client/Server(客户端/服务器)结构<img src="https://img-blog.csdnimg.cn/4eb987112f954ccfacc5390c87394ea3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>B/S架构：Browser/Server(浏览器/服务器)结构<br><img src="https://img-blog.csdnimg.cn/3ddc8a3513924c2dbca0b5c8f740f1a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="服务端和客户端"><a href="#服务端和客户端" class="headerlink" title="服务端和客户端"></a>服务端和客户端</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 简单地说：一般客户端负责和用户的交互，也就是屏幕显示(UI/UE)，服务端负责数据存储，也就是你的用户数据，而计算能力，客户端和服务端一般各负责一部分。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 微信、qq这种聊天功能一般在用户之间通信时，用户的数据先是发送到服务器上的，然后通过服务器进行转发给指定用户，从而完成一次用户间的通信，那么如何证明这一点呢？比如一下几种场景：</p><ol><li>当A用户不在线时，B用户给A发送，A是接收不到的，当A一上线，信息会立马发送给他，可推理出B用户发送的数据会保存在服务器中。</li><li>当A用户给B传输文件时，上传完后，B需要下载才可传输到本地，说明下载之前已经上传到服务器了，如果清空本地的该文件，在一定时间范围内仍然可以重新下载回来，说明服务器上文件还在。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于一个简单的群聊功能，实现的基本原理就是，客户端给服务器发送数据，服务器再将请求发送给其他客户端，从而完成转发，单聊那就是在客户端传服务器的过程中加入了目标用户识别码。</li></ol><h2 id="TCP-IP、UDP？"><a href="#TCP-IP、UDP？" class="headerlink" title="TCP/IP、UDP？"></a>TCP/IP、UDP？</h2><p>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里有一张图，表明了这些协议的关系。   <strong>TCP/IP协议族包括运输层、网络层、链路层。</strong><br><img src="https://img-blog.csdnimg.cn/3f62427555804da288d52f933babf2f1.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="Socket技术"><a href="#Socket技术" class="headerlink" title="Socket技术"></a>Socket技术</h2><img src="https://img-blog.csdnimg.cn/e43ecb011edf4531883da487a41db724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 简单来说，socket就是对tcp/ip协议的封装，在java中是一个类，方便用户去完成通信。</p><img src="https://img-blog.csdnimg.cn/6541003ddc4843e7a5ed40cac608c162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h3 id="Socket建立通信的流程："><a href="#Socket建立通信的流程：" class="headerlink" title="Socket建立通信的流程："></a>Socket建立通信的流程：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 服务端的ServerSocket通过绑定ip和port，从而完成初始化，以保证在port下监听待接入的客户端,accept()函数使得监听到接入的客户端，这里可以采用死循环【建立新的线程】保持服务端一直在监听并接受新的客户端的连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket ss = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">Socket socket = ss.accept();</span><br></pre></td></tr></table></figure><p>客户端：<br>同样通过绑定ip port建立Socket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket = <span class="keyword">new</span> Socket(host, port);</span><br></pre></td></tr></table></figure><p>服务端accept得到的Socket相当于是在客户端自建的Socket基础之上构建的新的Socket</p><p>服务端得到了与客户端连接的Socket之后便可以拿到该Socket的输入、输出流；<br>对于客户端也是一样，需要通过Socket拿到输入输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStream is= socket.getInputStream();</span><br><span class="line">OutputStream os = socket.getOutputStream();</span><br></pre></td></tr></table></figure><h2 id="群聊代码："><a href="#群聊代码：" class="headerlink" title="群聊代码："></a>群聊代码：</h2><p>思路：<br><img src="https://img-blog.csdnimg.cn/83a0c801c17448c3a6acc2351603f43f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 服务端和客户端通信必须构建一个管道，管道的两端分别是InputStream、OutputStream，当服务端输出时用OutputStream，某一个客户端对应的就是InputStream来接受服务端的输出，即每个管道的输入输出一一对应。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么对于服务端来说，他的输入流，应该是客户端的输出流，有多少个客户端，就应该有多少个线程来维护这个管道，所以每连接一个客户端，就应该启动一个输入流给服务端。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么，服务端的输出流（输出的线程）应该有多少个呢，如果要实现转发 群发功能，那么服务端的输出流线程只能是一个 里面有多个输出流，因为它要给每一个客户端去发消息，消息可以存在消息列表里面，每次从msgQueue里面拿出第一个消息，然后发送给每一个客户端，所以对于服务端的输出线程，它理应包含一个list去装载每一个客户端的socket，这样才能在群发时 遍历每一个客户端的socket 并且拿到socket对应的输出流，将消息群发出去。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于1个客户端来说，比服务端简单很多，输入流（输入线程）就只用构建一个，用于接受客户端输出的数据，输出流（输出线程）也是构建一个，用于发送给服务端。具体的代码架构如下图所示，将客户端和服务端代码分离，便于维护和后期拓展功能</p><img src="https://img-blog.csdnimg.cn/28bbdcce6692413599f38399e62be2bf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chatroom.client.InputThread;</span><br><span class="line"><span class="keyword">import</span> chatroom.client.OutputThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 10:42 上午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Socket对象</span></span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//服务器的Ip地址和服务器所使用的端口号</span></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">8082</span>;</span><br><span class="line">    <span class="keyword">private</span> String label = <span class="string">"客户端"</span>;</span><br><span class="line">    <span class="keyword">private</span> String clientName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientName = clientName;</span><br><span class="line">        createCient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createCient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">            createInput(socket,label);</span><br><span class="line">            createOutput(socket,label);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createOutput</span><span class="params">(Socket socket, String label)</span> </span>&#123;</span><br><span class="line">        OutputThread outputThread = <span class="keyword">new</span> OutputThread(socket,label);</span><br><span class="line">        outputThread.setClientName(clientName);</span><br><span class="line">        <span class="keyword">new</span> Thread(outputThread).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createInput</span><span class="params">(Socket socket, String label)</span> </span>&#123;</span><br><span class="line">        InputThread inputThread = <span class="keyword">new</span> InputThread(socket,label);</span><br><span class="line">        <span class="keyword">new</span> Thread(inputThread).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client(<span class="string">"客户端1"</span>);</span><br><span class="line">        Client client2 = <span class="keyword">new</span> Client(<span class="string">"客户端2"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 1:24 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputThread</span><span class="params">(Socket socket, String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = is.read(b);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//客户端输入：接受服务端的输出</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 1:26 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String label; <span class="comment">// 记录是客户端 or 服务端</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clientName; <span class="comment">//记录客户端的名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutputThread</span><span class="params">(Socket socket, String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClientName</span><span class="params">(String clientName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientName = clientName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//客户端 接受用户的输入 发送到服务端</span></span><br><span class="line">            System.out.println(<span class="string">"请输入要发送的内容"</span>);</span><br><span class="line">            Scanner ss = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String ans = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> curTime = System.currentTimeMillis();</span><br><span class="line">                curTime = curTime;</span><br><span class="line">                ans = clientName + <span class="string">"："</span> + ss.nextLine();</span><br><span class="line"></span><br><span class="line">                os.write(ans.getBytes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (</span><br><span class="line">                IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chatroom.client.Client;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 3:42 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：客户端1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client(<span class="string">"客户端1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chatroom.client.Client;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 3:42 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Client client = <span class="keyword">new</span> Client(<span class="string">"客户端2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chatroom.server.InputThread;</span><br><span class="line"><span class="keyword">import</span> chatroom.server.OutputThread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 10:43 上午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">8082</span>;</span><br><span class="line">    <span class="keyword">private</span> String label = <span class="string">"服务端"</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> LinkedBlockingDeque&lt;String&gt; msgQueue;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Socket&gt; sockets;<span class="comment">//维护每一个与客户端连接的socket</span></span><br><span class="line">    <span class="keyword">public</span> Integer clientNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        createServer();</span><br><span class="line">        <span class="keyword">this</span>.clientNum = sockets.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务器套接字</span></span><br><span class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println((<span class="string">"服务器已经启动,监听端口为"</span> + port));</span><br><span class="line">            <span class="comment">//初始化一个msgQueue用于存放客户端传来的数据</span></span><br><span class="line">            <span class="keyword">this</span>.msgQueue = <span class="keyword">new</span> LinkedBlockingDeque&lt;String&gt;();</span><br><span class="line">            <span class="keyword">this</span>.sockets = <span class="keyword">new</span> ArrayList&lt;Socket&gt;();</span><br><span class="line"></span><br><span class="line">            createOutput(sockets, msgQueue);</span><br><span class="line">            <span class="comment">// 给客户端发送信息 只需要维护一个OutputThread即可 以保证每次从msgQueue里取一次msg</span></span><br><span class="line">            <span class="comment">// 都能将该msg群发个多个客户端</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Socket socket = ss.accept();</span><br><span class="line">                sockets.add(socket);</span><br><span class="line">                createInput(socket, msgQueue);<span class="comment">//每一个与客户端之间的socket都需要建立一个inputThread去接收</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//服务器套接字等待一个客服端socket连入，如果连接成功的话，就会创建一个套接字，不然在这里一直等待</span></span><br><span class="line">                System.out.println(<span class="string">"已经接受连接"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程 OutputThread：服务端输出到客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOutput</span><span class="params">(ArrayList&lt;Socket&gt; sockets, LinkedBlockingDeque&lt;String&gt; msgQueue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OutputThread outputThread = <span class="keyword">new</span> OutputThread(msgQueue, sockets);</span><br><span class="line">        <span class="keyword">new</span> Thread(outputThread).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程 InputThread：服务端接受客户端的输入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createInput</span><span class="params">(Socket socket, LinkedBlockingDeque&lt;String&gt; msgQueue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputThread inputThread = <span class="keyword">new</span> InputThread(socket, msgQueue);</span><br><span class="line">        <span class="keyword">new</span> Thread(inputThread).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Server server = <span class="keyword">new</span> Server();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 1:24 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">public</span>   LinkedBlockingDeque&lt;String&gt; msgQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputThread</span><span class="params">(Socket socket,LinkedBlockingDeque&lt;String&gt; msgQueue)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="keyword">this</span>.msgQueue = msgQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsgQueue</span><span class="params">(LinkedBlockingDeque&lt;String&gt; msgQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msgQueue = msgQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is= socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = is.read(b);</span><br><span class="line">                <span class="comment">//接受客户端传来的信息</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(b , <span class="number">0</span>, len));</span><br><span class="line">                <span class="comment">//再把信息传到集合中去，再在outputThread中输出给其他客户端</span></span><br><span class="line">                msgQueue.add(<span class="keyword">new</span> String(b , <span class="number">0</span>, len));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> chatroom.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：erickun</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> ：Created in 2021/8/1 1:26 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@modified</span> By：</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: $</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Socket&gt; sockets;</span><br><span class="line">    <span class="keyword">public</span> LinkedBlockingDeque&lt;String&gt; msgQueue;</span><br><span class="line">    <span class="keyword">private</span> String label; <span class="comment">// 记录是客户端 or 服务端</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutputThread</span><span class="params">(LinkedBlockingDeque&lt;String&gt; msgQueue, ArrayList&lt;Socket&gt; sockets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sockets = sockets;</span><br><span class="line">        <span class="keyword">this</span>.msgQueue = msgQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (msgQueue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    String poll = msgQueue.poll();</span><br><span class="line">                    <span class="comment">//群发给所有客户端</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sockets.size(); i++) &#123;</span><br><span class="line">                        Socket curSocket = sockets.get(i);</span><br><span class="line">                        os = curSocket.getOutputStream();</span><br><span class="line">                        os.write(poll.getBytes());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> socket </tag>
            
            <tag> 服务端 </tag>
            
            <tag> 客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入线程池【手写线程池！阿里弃用之辨析】</title>
      <link href="2021/07/01/deep8-%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2021/07/01/deep8-%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 线程池和<strong>数据库连接池</strong>非常类似，可以统一管理和维护线程，减少没有必要的开销。 </p><h1 id="为什么要使用线程池"><a href="#为什么要使用线程池" class="headerlink" title="为什么要使用线程池"></a>为什么要使用线程池</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因为频繁的开启线程或者停止线程，线程需要从新被 cpu 从就绪到运行状态调度，需要发生<br>cpu 的上下文切换，效率非常低。<br><img src="https://img-blog.csdnimg.cn/20210630105323135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><blockquote><p>当线程从run中sleep后，会到达阻塞状态，这时候要想再回到run状态，得先就绪再到run状态，成本极高；</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 分析：如果这里有100个线程，则会新建100个newThread，100次start，100次的就绪，100次的CPU调度，才能被运行，必然也有100次的销毁，整个的成本非常高！<br>所以我们提前创建好100个线程，都在<strong>运行状态</strong>，只要有请求过来了，直接再run方法中进行执行就行了！而不是又经过创建-&gt;就绪-&gt;运行 这个耗时的过程！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p><h1 id="哪里使用到线程池"><a href="#哪里使用到线程池" class="headerlink" title="哪里使用到线程池"></a>哪里使用到线程池</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 实际开发项目中 禁止自己 new 线程。必须使用线程池来维护和创建线程。<br><img src="https://img-blog.csdnimg.cn/20210630111710128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际企业开发中，如果像这样去new线程，那一定会被开除！！</p><blockquote><p>如果别人找到了这个bug，比如你这个接口有每次创建线程的bug，那么别人可以通过这个bug给你服务器攻击！造成CPU飙高，线程池就可以很好的管理，管理线程创建的数量，而不是无限制的创建！</p></blockquote><h1 id="线程池有哪些作用"><a href="#线程池有哪些作用" class="headerlink" title="线程池有哪些作用"></a>线程池有哪些作用</h1><p>核心点：复用机制 提前创建好固定的线程一直在运行状态 实现复用 限制线程创建数量。<br>1.<strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。<br>2.<strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。<br>3.<strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。<br>4.<strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池 ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</p><p>总结：<strong>统一维护管理</strong></p><h1 id="线程池的创建方式"><a href="#线程池的创建方式" class="headerlink" title="线程池的创建方式"></a>线程池的创建方式</h1><p>Executors.newCachedThreadPool(); 可缓存线程池<br>Executors.newFixedThreadPool()；可定长度 限制最大线程数<br>Executors.newScheduledThreadPool() ； 可定时<br>Executors.newSingleThreadExecutor(); 单例<br>底层都是基于 ThreadPoolExecutor 构造函数封装</p><blockquote><p>前面四个基本上实际生产不会去用，阿里巴巴不推荐，因为底层都是由ThreadPoolExecutor 构造封装的，而构造函数中是一个无界的队列（后面解释）</p></blockquote><h3 id="Executors-newCachedThreadPool-："><a href="#Executors-newCachedThreadPool-：" class="headerlink" title="Executors.newCachedThreadPool()："></a>Executors.newCachedThreadPool()：</h3> <img src="https://img-blog.csdnimg.cn/2021063011395861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />下面是它的源码部分<img src="https://img-blog.csdnimg.cn/20210630114057781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />核心线程数传的0，最大是无限，没有界限，如果用这个无限的去创建，而不是复用机制，故不去用！这个api实际开发不用！ 可以改成可定长度线程池，这样即使for循环有10个线程创建，但是会被传入的nThread所限制。<img src="https://img-blog.csdnimg.cn/20210630114422898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /># 线程池底层是如何实现复用的本质思想：创建一个线程，不会立马停止或者销毁而是一直实现复用。1. 提前创建固定大小的线程一直保持在正在运行状态；（可能会非常消耗 cpu 的资源）2. 当需要线程执行任务，将该任务提交缓存在并发队列中；如果缓存队列满了，则会执行拒绝策略；3. 正在运行的线程从并发队列中获取任务执行从而实现多线程复用问题；<p><img src="https://img-blog.csdnimg.cn/2021063011505721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>线程的核心点：复用机制——</p><ol><li>提前创建好固定的线程一直在运行状态—-死循环实现</li><li>提交的线程任务缓存到一个并发队列集合中，交给我们正在运行的线程执行</li><li>正在运行的线程就从队列中获取该任务执行</li></ol><p>如何保证线程一直在运行，而不会停掉被销毁呢？———加一个<strong>while死循环</strong>即可</p><img src="https://img-blog.csdnimg.cn/2021063011531157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h1 id="手写线程池"><a href="#手写线程池" class="headerlink" title="手写线程池"></a>手写线程池</h1><p>思路：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先线程池得定义一系列线程，并且构造的时候让这些线程都处于一个运行状态，用workThreads代替，构造的时候可以给定限制的工作线程数量以及任务集合中的size上限，运行状态通过改写每一个工作线程的run方法即可，利用死循环让其处于一直运行的状态！具体每一个工作线程要做的任务是什么，就通过拿取runnableDeque这个队列中的每一个任务即可，poll方法拿取后便删除该任务。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果想控制线程池使得结束，可以通过控制工作线程中while循环的条件，设置一个isRun的Boolean变量，并且当任务队列中没有任务了之后线程池才停止工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExecutors</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;WorkThread&gt; workThreads;</span><br><span class="line">    <span class="comment">// 缓存我们线程任务</span></span><br><span class="line">    <span class="keyword">private</span> BlockingDeque&lt;Runnable&gt; runnableDeque;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRun = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxThreadCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExecutors</span><span class="params">(<span class="keyword">int</span> maxThreadCount, <span class="keyword">int</span> dequeSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.限制队列容量缓存</span></span><br><span class="line">        runnableDeque = <span class="keyword">new</span> LinkedBlockingDeque&lt;Runnable&gt;(dequeSize);</span><br><span class="line">        <span class="comment">//2.提前创建好固定的线程一直在运行状态----死循环实现</span></span><br><span class="line">        workThreads = <span class="keyword">new</span> ArrayList&lt;WorkThread&gt;(maxThreadCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxThreadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> WorkThread().start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WorkThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (isRun||runnableDeque.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                Runnable runnable = runnableDeque.poll();</span><br><span class="line">                <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    runnable.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> runnableDeque.offer(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyExecutors myExecutors = <span class="keyword">new</span> MyExecutors(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            myExecutors.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">","</span> + finalI);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        myExecutors.isRun = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ThreadPoolExecutor核心参数"><a href="#ThreadPoolExecutor核心参数" class="headerlink" title="ThreadPoolExecutor核心参数"></a>ThreadPoolExecutor核心参数</h1><p>corePoolSize：核心线程数量 一直正在保持运行的线程<br>maximumPoolSize：最大线程数，线程池允许创建的最大线程数。<br>keepAliveTime：超出 corePoolSize 后创建的线程的存活时间。<br>unit：keepAliveTime 的时间单位。<br>workQueue：任务队列，用于保存待执行的任务。<br>threadFactory：线程池内部创建线程所用的工厂。<br>handler：任务无法执行时的处理器。</p><h2 id="线程池创建的线程会一直在运行状态吗？"><a href="#线程池创建的线程会一直在运行状态吗？" class="headerlink" title="线程池创建的线程会一直在运行状态吗？"></a>线程池创建的线程会一直在运行状态吗？</h2><p>不会<br>例如：配置核心线程数 corePoolSize 为 2 、最大线程数 maximumPoolSize 为 5<br>我们可以通过配置超出 corePoolSize 核心线程数后创建的线程的存活时间例如为 60s，在 60s 内非核心线程一直没有任务执行，则会停止该线程。<br>总结：核心线程数是一直在运行的，但最大线程数是不一定的，看具体任务，如果任务的情况下补给到最大线程范围内更多的线程进来工作，最大线程减去核心线程的这部分线程在工作完后再销毁。<br>目的：为了节约服务器资源</p><h2 id="为什么阿里巴巴不建议使用-Executors"><a href="#为什么阿里巴巴不建议使用-Executors" class="headerlink" title="为什么阿里巴巴不建议使用 Executors"></a>为什么阿里巴巴不建议使用 Executors</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因为默认的 Executors 线程池底层是基于 ThreadPoolExecutor构造函数封装的，采用<strong>无界队列存放缓存任务</strong>，会无限缓存任务容易发生内存溢出，会导致我们最大线程数会失效。<br><img src="https://img-blog.csdnimg.cn/20210630151105463.png"  style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【强制】线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，</span><br><span class="line">这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 </span><br><span class="line">说明：Executors各个方法的弊端：</span><br><span class="line"><span class="number">1</span>）newFixedThreadPool和newSingleThreadExecutor:</span><br><span class="line">  主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至<span class="number">1</span>OOM。</span><br><span class="line"><span class="number">2</span>）newCachedThreadPool和newScheduledThreadPool:</span><br><span class="line">  主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至<span class="number">1</span>OOM。</span><br></pre></td></tr></table></figure><h2 id="线程池底层-ThreadPoolExecutor-底层实现原理"><a href="#线程池底层-ThreadPoolExecutor-底层实现原理" class="headerlink" title="线程池底层 ThreadPoolExecutor 底层实现原理"></a>线程池底层 ThreadPoolExecutor 底层实现原理</h2><p>1.当线程数小于核心线程数时，创建线程。<br>2.当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。<br>3.当线程数大于等于核心线程数，且任务队列已满<br>3.1 若线程数小于最大线程数，创建线程<br>3.2 若线程数等于最大线程数，抛出异常，拒绝任务<br>看例子：<br>分析：首先创建了一个线程池，有2个核心线程，4个最大线程，并且blockingQueue的容量为5（用于缓存任务队列），然后我们再for中提交了10个任务进行执行，第一个和第二个任务直接被2个核心线程来执行，3、4、5、6、7就被缓存到容量为5的blockingQueue队列中了，然后遍历到第八个新任务的时候，当前的线程数已经大于了核心线程数，并且任务队列已经装满了，那就再创建（最大线程数-核心线程数）个线程，这里也就是2个新的工作线程被创建去执行第8、第9个任务，当遍历到第10个任务的时候，就已经没有工作线程来执行了，并且任务队列之前也装满了，从而拒绝任务！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.提交的线程任务数&lt;核心线程数  （核心线程数任务复用）</span></span><br><span class="line">        <span class="comment">//2.提交的线程任务数&gt;核心线程数 且我们队列容量没有满 将该任务缓存到我们队列中</span></span><br><span class="line">        <span class="comment">// 循环3 4 5 6 7 缓存到我们队列中</span></span><br><span class="line">        <span class="comment">//3.提交的线程任务数&gt;核心线程数 且我们队列容量满了</span></span><br><span class="line">        <span class="comment">//8,9，10</span></span><br><span class="line">        <span class="comment">// 最多在额外创建两个线程 4-2 2个线程</span></span><br><span class="line">        <span class="comment">// 2个线程 8 ,9</span></span><br><span class="line">        <span class="comment">// 10个任务----拒绝</span></span><br><span class="line">        ExecutorService executorService = MyThreadPoolExecutor.newFixedThreadPool(<span class="number">2</span>, <span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">","</span> + finalI);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 实际上最多执行多少个任务 核心线程数+缓存队列的容量+最大线程数-核心线程数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己重写的一个ExecutorService，限制了传入的核心线程数、最大线程数、以及任务队列的容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPoolExecutor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">int</span> blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize,</span><br><span class="line">                <span class="number">60L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(blockingQueue), (RejectedExecutionHandler) <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池队列满了，任务会丢失吗"><a href="#线程池队列满了，任务会丢失吗" class="headerlink" title="线程池队列满了，任务会丢失吗"></a>线程池队列满了，任务会丢失吗</h2><p>如果队列满了，且任务总数&gt;最大线程数则当前线程走拒绝策略。<br>可以自定义异拒绝异常，将该任务缓存到 redis、本地文件、mysql 中后期项目启动实现补偿。<br>1.AbortPolicy 丢弃任务，抛运行时异常<br>2.CallerRunsPolicy 执行任务<br>3.DiscardPolicy 忽视，什么都不会发生<br>4.DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务</p><h2 id="线程池拒绝策略类型有哪些呢"><a href="#线程池拒绝策略类型有哪些呢" class="headerlink" title="线程池拒绝策略类型有哪些呢"></a>线程池拒绝策略类型有哪些呢</h2><p>1.AbortPolicy 丢弃任务，抛运行时异常<br>2.CallerRunsPolicy 执行任务<br>3.DiscardPolicy 忽视，什么都不会发生<br>4.DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务<br>5.实现 RejectedExecutionHandler 接口，可自定义处理器</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别再问我字符串了！彻底理解Java中的字符串（==、equals、堆内存、常量池）</title>
      <link href="2021/06/29/deep7-%E6%B7%B1%E5%85%A5Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2021/06/29/deep7-%E6%B7%B1%E5%85%A5Java%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="equals、"><a href="#equals、" class="headerlink" title="equals、=="></a>equals、==</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先明确一点，==比较的是引用，equals比较的是内容，在类库没有定义equals方法重写的情况下，自然继承的是Object类的equals方法，上源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么对于String类来说，官方已封装了复写之后的equals方法，比较的是具体内容，判断：如果是引用相同，也就是堆内的地址相同，那么就是同一个对象，直接返回true，否则就遍历字符串中的每一个字符进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其次，字符串还有个常量池，也就是说如果先定义了一个”ABC”字符串，再定义一个相同字符串的时候，会首先去常量池里面找之前有没有定义，如果有，则直接指向常量池的同一地址。</p><h2 id="常量池介绍"><a href="#常量池介绍" class="headerlink" title="常量池介绍"></a>常量池介绍</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JVM为了提高性能和减少内存开销，在实例化字符串常量的时候进行了一些优化</p><ul><li><p>为字符串开辟一个字符串常量池，类似于缓存区</p></li><li><p>创建字符串常量时，首先坚持字符串常量池是否存在该字符串</p></li><li><p>存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有了以上的铺垫，后面几个问题就好解释了：</p><h1 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTests</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str2 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">"ABC"</span>);</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str2 == str3);<span class="comment">// flase</span></span><br><span class="line">        System.out.println(str1.equals(str2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(str2.equals(str3)); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str1与str2都指向的是常量池中同一个字符串的地址，所以==为true，而str3是new了一个新的对象，会在堆中新建一个内存地址，所以比较str3和str3的地址时则为flase，equals就简单了，比较的均为字符串内容，故均为true。<br><img src="https://img-blog.csdnimg.cn/20210629134246186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h1 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTests</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str2 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str3 = <span class="keyword">new</span> String(<span class="string">"ABC"</span>);</span><br><span class="line">        String str3_1=str3.intern();</span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str2 == str3);<span class="comment">// flase</span></span><br><span class="line">        System.out.println(str3_1 == str1);<span class="comment">// true</span></span><br><span class="line">        System.out.println(str3_1 == str3);<span class="comment">// flase</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果我们新定义一个str3_1变量，让他取str3的intern()方法，此方法是这样定义的：</p><blockquote><p>这是一个native的方法，书上是这样描述它的作用的：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回常量池池中这个字符串的String对象；否则，将此String对象包含的字符添加到常量池中，并返回此String对象的引用。</p></blockquote><p>所以str3_1拿到的是常量池中的”ABC“地址，和str1、str2的地址肯定是相同的，</p><h1 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTests</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str2 = <span class="string">"ABC"</span>;</span><br><span class="line">        str1 +=<span class="string">"D"</span>;</span><br><span class="line">        String str5 = <span class="string">"ABCD"</span>;<span class="comment">// 肯定在常量池中生成一个</span></span><br><span class="line">        System.out.println(str5 == str1);<span class="comment">//flase</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里如果给str1拼接了一个D字符串，这里通过javap命令查看字节码文件，会发现+=操作在String源码中调用的其实是apped方法，生成的是一个新的对象堆地址，str5指向的常量池的地址与str1指向的堆对象地址不一，如果我在str1拼接之后加上str1 = str1.intern(); 这时候由于str1指向的是常量池中的ABCD，==就为true了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTests</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str1 = <span class="string">"ABC"</span>;</span><br><span class="line">        String str2 = <span class="string">"ABC"</span>;</span><br><span class="line">        str1 +=<span class="string">"D"</span>;</span><br><span class="line">        str1 = str1.intern();</span><br><span class="line">        String str5 = <span class="string">"ABCD"</span>;<span class="comment">// 肯定在常量池中生成一个</span></span><br><span class="line">        System.out.println(str5 == str1);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里intern调用之后，如果常量池中没有”ABCD“，则会在常量池生成，如果有则直接指向它。所以此处的str1指向的是常量池中的”ABCD“，后面定义的str5在构造时则会直接指向常量池中的”ABCD“</p><p>如果这里把str1 += ”D“修改一下成常量与常量的拼接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTests</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        str1 =<span class="string">"ABC"</span> +<span class="string">"D"</span>;</span><br><span class="line">        String str5 = <span class="string">"ABCD"</span>;<span class="comment">// 肯定在常量池中生成一个</span></span><br><span class="line">        System.out.println(str5 == str1);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果两个常量进行拼接，编译器会自动优化成”ABCD”，也就是存到了常量池中去了，str5指向的也是常量池中的值。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原则：</p><p>（1）常量+常量：结果是常量池</p><p>（2）常量与变量 或 变量与变量：结果是堆</p><p>（3）拼接后调用intern方法：结果在常量池</p><p>new 出来的是在堆空间</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 堆内存 </tag>
            
            <tag> 常量池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Alfred 工作流 Python开发，可自定义任何接口，全自动化办公</title>
      <link href="2021/06/29/Mac-Alfred-%E5%B7%A5%E4%BD%9C%E6%B5%81-Python%E5%BC%80%E5%8F%91%EF%BC%8C%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BB%E4%BD%95%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/"/>
      <url>2021/06/29/Mac-Alfred-%E5%B7%A5%E4%BD%9C%E6%B5%81-Python%E5%BC%80%E5%8F%91%EF%BC%8C%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BB%E4%BD%95%E6%8E%A5%E5%8F%A3%EF%BC%8C%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用Mac的人应该大多都知道这个，但是workflow工作流，应该是很多人没自己写过，得知支持Python脚本后，自己花了几个小时研究了一下如何把接口融合到Alfred快捷方式中，这里给大家提供一个模板，以这样的形式，无论是免费api还是自己封装的工具接口，均可集成到Alfred中！</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://img-blog.csdnimg.cn/20210629100429404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210629100454129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="申请接口"><a href="#申请接口" class="headerlink" title="申请接口"></a>申请接口</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 市面上有很多免费接口，这里以聚合数据的头条新闻api为例，链接：<a href="https://www.juhe.cn/docs/api/id/235，在官网注册申请api即可，得到一个key，发送请求参数时带上key和其他参数即可。" target="_blank" rel="noopener">https://www.juhe.cn/docs/api/id/235，在官网注册申请api即可，得到一个key，发送请求参数时带上key和其他参数即可。</a></p><h1 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h1><h2 id="建立空白workflow"><a href="#建立空白workflow" class="headerlink" title="建立空白workflow"></a>建立空白workflow</h2><p><img src="https://img-blog.csdnimg.cn/20210629092138388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210629092200330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>填上基本信息即可，也可以设置一个图标<br>再在里面空白处右键选择script filter<br><img src="https://img-blog.csdnimg.cn/20210629092344177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210629100110687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在script filter里面，我们去运行Python脚本，接受的参数就是”{query}”可以进行传参，这里采用了一个免费的头条新闻api，只要接口能测成功即可，不赘述:<br><img src="https://img-blog.csdnimg.cn/20210629095727194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Python代码，整体思路就是，定义好获取接口数据的方法，并将结果返回给workflow的具体字段即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">Project Name: alfredProjects</span></span><br><span class="line"><span class="string">File Name: alfredTest.py</span></span><br><span class="line"><span class="string">Author: apple</span></span><br><span class="line"><span class="string">Create Date: 2021/6/28</span></span><br><span class="line"><span class="string">-------------------------------------------------</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> workflow <span class="keyword">import</span> Workflow, web, ICON_WEB</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line"></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">query_map = dict(</span><br><span class="line">    inner=<span class="string">u"输入in搜索头条国内新闻"</span>,</span><br><span class="line">    outter=<span class="string">'输入out搜索头条国际新闻'</span>,</span><br><span class="line">    top=<span class="string">u'输入top搜索热点新闻'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_recent_news</span><span class="params">(query)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> query == <span class="string">"in"</span>:</span><br><span class="line">        url = <span class="string">"http://v.juhe.cn/toutiao/index?"</span></span><br><span class="line">        params = &#123;<span class="string">"key"</span>: <span class="string">"dd0fb509ac5407213bc6a0fddd48f234"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"guonei"</span>&#125;</span><br><span class="line">    <span class="keyword">elif</span> query == <span class="string">"out"</span>:</span><br><span class="line">        url = <span class="string">"http://v.juhe.cn/toutiao/index?"</span></span><br><span class="line">        params = &#123;<span class="string">"key"</span>: <span class="string">"dd0fb509ac5407213bc6a0fddd48f234"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"guoji"</span>&#125;</span><br><span class="line">    <span class="keyword">elif</span> query == <span class="string">"top"</span>:</span><br><span class="line">        url = <span class="string">"http://v.juhe.cn/toutiao/index?"</span></span><br><span class="line">        params = &#123;<span class="string">"key"</span>: <span class="string">"dd0fb509ac5407213bc6a0fddd48f234"</span>,</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"top"</span>&#125;</span><br><span class="line"></span><br><span class="line">    r = web.post(url, data=params)</span><br><span class="line">    print(r)</span><br><span class="line">    <span class="comment"># throw an error if request failed, Workflow will catch this and show</span></span><br><span class="line">    <span class="comment"># it to the user</span></span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    <span class="comment"># result = r.json()</span></span><br><span class="line">    <span class="keyword">return</span> r.json()[<span class="string">"result"</span>][<span class="string">'data'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(wf)</span>:</span></span><br><span class="line">    query = wf.args[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> query:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">"inner"</span>, <span class="string">"outter"</span>, <span class="string">"top"</span>]:</span><br><span class="line">            wf.add_item(</span><br><span class="line">                title=query_map[key],</span><br><span class="line">                valid=<span class="literal">True</span>,</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> get_recent_news(query)</span><br><span class="line"></span><br><span class="line">        news = wf.cached_data(query, wrapper, max_age=<span class="number">300</span>)</span><br><span class="line">        <span class="comment"># news = get_recent_news(query)</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> news:</span><br><span class="line">            wf.add_item(title=<span class="string">u"【&#123;&#125;】&#123;&#125;"</span>.format(r[<span class="string">"author_name"</span>], r[<span class="string">'title'</span>]),</span><br><span class="line">                        arg=r[<span class="string">'url'</span>],</span><br><span class="line">                        valid=<span class="literal">True</span>,</span><br><span class="line">                        icon=ICON_WEB)</span><br><span class="line">    <span class="comment"># Send output to Alfred. You can only call this once.</span></span><br><span class="line">    <span class="comment"># Well, you *can* call it multiple times, but Alfred won't be listening</span></span><br><span class="line">    <span class="comment"># any more...</span></span><br><span class="line">    wf.send_feedback()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    wf = Workflow()</span><br><span class="line">    sys.exit(wf.run(main))</span><br></pre></td></tr></table></figure><p>最后说一下脚本和相关库放在哪里：<br> <img src="https://img-blog.csdnimg.cn/20210629100050804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>点击后，会在finder显示该工作流的文件夹，将workflow库以及Python脚本放在此下即可：<br><img src="https://img-blog.csdnimg.cn/20210629100136563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于返回的json数据里面，每个新闻有个url，我们将url设为workflow的item args即可，代码片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wf.add_item(title=<span class="string">u"【&#123;&#125;】&#123;&#125;"</span>.format(r[<span class="string">"author_name"</span>], r[<span class="string">'title'</span>]),</span><br><span class="line">                       arg=r[<span class="string">'url'</span>],</span><br><span class="line">                       valid=<span class="literal">True</span>,</span><br><span class="line">                       icon=ICON_WEB)</span><br></pre></td></tr></table></figure><p>再在script filter之后接一个url即可：<br><img src="https://img-blog.csdnimg.cn/20210629100833240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 提升效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 学术 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程中的wait与sleep ,synchronize与lock有啥子区别?死锁辨析</title>
      <link href="2021/06/26/deep6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84wait%E4%B8%8Esleep-synchronize%E4%B8%8Elock%E6%9C%89%E5%95%A5%E5%AD%90%E5%8C%BA%E5%88%AB-%E6%AD%BB%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81-%E6%82%B2%E8%A7%82%E9%94%81%E8%BE%A8%E6%9E%90/"/>
      <url>2021/06/26/deep6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84wait%E4%B8%8Esleep-synchronize%E4%B8%8Elock%E6%9C%89%E5%95%A5%E5%AD%90%E5%8C%BA%E5%88%AB-%E6%AD%BB%E9%94%81-%E4%B9%90%E8%A7%82%E9%94%81-%E6%82%B2%E8%A7%82%E9%94%81%E8%BE%A8%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="wait与sleep"><a href="#wait与sleep" class="headerlink" title="wait与sleep"></a>wait与sleep</h1><ol><li>来自不同的类<br>首先，wait和sleep都不是一个类下的方法：<br>wait来自：Object<br>sleep来自：Thread<img src="https://img-blog.csdnimg.cn/20210626221030902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20210626221053496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ol><p>因为java中所有的类都是继承自object的，所以所有类都可以调用wait方法，这是一个final的方法，同时不是一个静态方法，所以调用该方法需要先实例化一个Object对象才可以</p><ol start="2"><li>释放锁的不同<br>wait 会释放锁，sleep 睡觉了，抱着锁睡觉，不会释放!  也就是说，如果有两个线程，其中一个锁住了某个对象时，中间sleep了，这时候另一个线程时拿不到该对象的锁的，得等第一个线程sleep完并释放锁才可。<br>wait会释放这个锁，并把这个wait的线程加入到这个锁的等待队列中去</li><li>使用的范围不同<br>wait必须在同步代码块中使用</li><li>使用sleep不需要被唤醒，但是wait是需要notify()或者notifyAll()去唤醒的，除了wait(1000)这种形式.</li></ol><p>举例说明问题：</p><h1 id="synchronized与lock"><a href="#synchronized与lock" class="headerlink" title="synchronized与lock"></a>synchronized与lock</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synchronized如果加在了非静态方法上，表示的是synchronized(调用方法的类的对象) {}，如果加在了静态方法上，表示的是synchronized(类.class) {}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DifferSynchronizedAndLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123; ticket.sale();</span><br><span class="line">            &#125; &#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123;</span><br><span class="line">                ticket.sale(); &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123;</span><br><span class="line">                ticket.sale(); &#125;</span><br><span class="line">        &#125;,<span class="string">"C"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 属性、方法</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line">        <span class="comment">// 卖票的方式</span></span><br><span class="line">        <span class="comment">// synchronized 本质: 队列，锁</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (number&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"卖出了"</span>+(number--)+<span class="string">"票,剩余:"</span>+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210627101008598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>此处如果不对方法加synchronized修饰（不加锁）：<br><img src="https://img-blog.csdnimg.cn/20210627101419402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p>Lock是一个接口，实现类有一下几个：<br><img src="https://img-blog.csdnimg.cn/20210627102346313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>先看可重入锁（ReentrantLock）：<br><img src="https://img-blog.csdnimg.cn/20210627102525603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>这里的可重入锁构造时候除非传入fair公平，否则默认为不公平锁。<br>公平锁：十分公平:可以先来后到<br>非公平锁：十分不公平:可以插队 (默认)<a href="https://blog.csdn.net/lsgqjh/article/details/63685058" target="_blank" rel="noopener">深入剖析ReentrantLock公平锁与非公平锁源码实现</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DifferSynchronizedAndLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//synchronized</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123; ticket.sale();</span><br><span class="line">            &#125; &#125;,<span class="string">"A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123;</span><br><span class="line">                ticket.sale(); &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">40</span> ; i++) &#123;</span><br><span class="line">                ticket.sale(); &#125;</span><br><span class="line">        &#125;,<span class="string">"C"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 属性、方法</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="comment">// 卖票的方式</span></span><br><span class="line">        <span class="comment">// synchronized 本质: 队列，锁</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (number&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"卖出了"</span>+(number--)+<span class="string">"票,剩余:"</span>+number);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized-与-lock区别"><a href="#synchronized-与-lock区别" class="headerlink" title="synchronized 与 lock区别"></a>synchronized 与 lock区别</h2><ol><li>synchronized 内置的Java关键字， Lock 是一个Java类</li><li>synchronized无法判断获取锁的状态，Lock 可以判断是否获取到了锁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread提供了holdLock()方法检测当前线程是否持有锁，注意，是当前线程</span><br></pre></td></tr></table></figure></li><li>synchronized 会自动释放锁，lock 必须要手动释放锁!如果不释放锁，死锁</li><li>synchronized 线程 1(获得锁，阻塞)、线程2(只能等待);Lock锁就不一定会等待下去了，这里有个<strong>lock.tryLock()方法，尝试获取锁，可以做个判断让其尝试不到锁时不等待！！</strong></li><li>synchronized 可重入锁，不可以中断的，非公平;Lock ，可重入锁，可以 判断锁，非公平(可以在构造ReentrantLock()中自行设置boolean fair，true为公平，默认flase非公平</li><li>synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码!<h1 id="生产消费模型"><a href="#生产消费模型" class="headerlink" title="生产消费模型"></a>生产消费模型</h1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 说白了就是多线程之间的通信，场景如下：有两个线程分别负责同一个资源类里变量的增加和减少，即生产与消费，对于增加和减少的逻辑：当资源中为0的时候，减少的方法就应该等待，不能再减少了；那么当资源不等于0 或者大于某个值时，增加方法就应该不再继续增加了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 具体方法总结：判断等待–&gt;业务–&gt;通知<h2 id="synchronized实现"><a href="#synchronized实现" class="headerlink" title="synchronized实现"></a>synchronized实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题：生产者和消费者问题！  等待唤醒，通知唤醒</span></span><br><span class="line"><span class="comment"> * 线程交替执行  A   B 操作同一个变量   num = 0</span></span><br><span class="line"><span class="comment"> * A num+1</span></span><br><span class="line"><span class="comment"> * B num-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断等待，业务，通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123; <span class="comment">// 数字 资源类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number!=<span class="number">0</span>)&#123;  <span class="comment">//0</span></span><br><span class="line">            <span class="comment">// 等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;"</span>+number);</span><br><span class="line">        <span class="comment">// 通知其他线程，我+1完毕了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number==<span class="number">0</span>)&#123; <span class="comment">// 1</span></span><br><span class="line">            <span class="comment">// 等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;"</span>+number);</span><br><span class="line">        <span class="comment">// 通知其他线程，我-1完毕了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210627120837300.png"  style="zoom:50%;" /></li></ol><h3 id="此处存在的问题"><a href="#此处存在的问题" class="headerlink" title="此处存在的问题"></a>此处存在的问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 案例这样，如果只是两个线程通信，一个增加一个减少，必然不会出错，如果再增加几个呢？那notify之后，哪个线程来抢占呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data data = <span class="keyword">new</span> Data();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"C"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"D"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2021062714180563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 通过结果可以看出，有个值变成了2，也就是两个加法被唤醒了，且使得值均加了1。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于这里的资源类中增加和减少的方法使用的是if判断，所以也就只有一次判断，而wait之后，重新被唤醒要执行的是wait之后的语句，所以必须让他反复的判断一下值，这样才能保证线程安全！！将if改成while即可！！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if在官方文档中存在一个<strong>虚假唤醒的问题</strong><br><img src="https://img-blog.csdnimg.cn/20210627142330902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="lock锁实现"><a href="#lock锁实现" class="headerlink" title="lock锁实现"></a>lock锁实现</h2><p>Lock提供了condition.await(); 来替换等待，condition.signalAll(); 来替换唤醒全部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断等待，业务，通知</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data2</span></span>&#123; <span class="comment">// 数字 资源类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//condition.await(); // 等待</span></span><br><span class="line">    <span class="comment">//condition.signalAll(); // 唤醒全部</span></span><br><span class="line">    <span class="comment">//+1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务代码</span></span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">0</span>)&#123;  <span class="comment">//0</span></span><br><span class="line">                <span class="comment">// 等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;"</span>+number);</span><br><span class="line">            <span class="comment">// 通知其他线程，我+1完毕了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">0</span>)&#123; <span class="comment">// 1</span></span><br><span class="line">                <span class="comment">// 等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;"</span>+number);</span><br><span class="line">            <span class="comment">// 通知其他线程，我-1完毕了</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 前面实现的都是随机的状态，也就是没有人为的去控制线程执行顺序，<strong>Condition可以精准的通知和唤醒！！</strong><br>这里提供一个场景：<strong>A 执行完调用B，B执行完调用C，C执行完调用A</strong>！！<br>这里如果num为1时，让A执行，num=2–&gt;B, num=3–&gt;C</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Data3 data = <span class="keyword">new</span> Data3();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"A"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"B"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">                data.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"C"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data3</span></span>&#123; <span class="comment">// 资源类 Lock</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>; <span class="comment">// 1A  2B  3C</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务，判断-&gt; 执行-&gt; 通知</span></span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 等待</span></span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;AAAAAAA"</span>);</span><br><span class="line">            <span class="comment">// 唤醒，唤醒指定的人，B</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务，判断-&gt; 执行-&gt; 通知</span></span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">2</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;BBBBBBBBB"</span>);</span><br><span class="line">            <span class="comment">// 唤醒，唤醒指定的人，c</span></span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 业务，判断-&gt; 执行-&gt; 通知</span></span><br><span class="line">            <span class="comment">// 业务，判断-&gt; 执行-&gt; 通知</span></span><br><span class="line">            <span class="keyword">while</span> (number!=<span class="number">3</span>)&#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"=&gt;BBBBBBBBB"</span>);</span><br><span class="line">            <span class="comment">// 唤醒，唤醒指定的人，c</span></span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210627144412929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x400"  style="zoom:50%;" /><p>输出结果即：A执行完通知B执行，B执行完通知C……..</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><h2 id="为什么需要锁？"><a href="#为什么需要锁？" class="headerlink" title="为什么需要锁？"></a>为什么需要锁？</h2><p>多线程操作共享资源，存在同时对资源的读写 ，会导致资源的原子性遭到不一致处理 </p><p>需要锁操作来控制多个线程对象资源操作的原子性（安全性）</p><h2 id="锁的工作模式："><a href="#锁的工作模式：" class="headerlink" title="锁的工作模式："></a>锁的工作模式：</h2><p> 对于一个共享资源，我们有 lock 与 unlock 两个原子操作 </p><p>在一个线程对于一个资源进行操作的时候，实行lock 操作 ，这个时候其他线程就不能再操作这个资源对象了进入阻塞状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">有两个资源对象</span></span><br><span class="line"><span class="comment">一个是碗  一个是米饭</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有两个线程  T1  T2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">T1 拿了一个碗 想去盛饭 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">T2 拿了一份米饭  想拿这个碗来装</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">T1 可以拿到饭吗？ 不能 </span></span><br><span class="line"><span class="comment">T2 可以拿到碗吗？ 不能</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">package</span> com.thread0622;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String str1 = <span class="string">"米饭"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String str2 = <span class="string">"碗"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程1 持有米饭的监视器锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">synchronized</span> (str1) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 持有 "</span> + str1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (str2) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 想持有 "</span> + str2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"T1 End...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 线程2 持有碗 的监视器锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (str2) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 持有 "</span> + str2);</span><br><span class="line"><span class="comment">// 线程2 持有碗 的监视器锁 的情况下想获取 米饭的锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (str1) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 想持有 "</span> + str1);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"T2 End...."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解决死锁的办法"><a href="#解决死锁的办法" class="headerlink" title="解决死锁的办法"></a>解决死锁的办法</h1><p>1、在申请一个对象资源锁的时候  加入一个时间判断，释放手头所有的资源锁 </p><p>2、写代码时候，尽量避免这种情况的写法 ，嵌套资源锁 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thread0622;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String str1 = <span class="string">"米饭"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String str2 = <span class="string">"碗"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程1 持有米饭的监视器锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">synchronized</span> (str1) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 持有 "</span> + str1);</span><br><span class="line">&#125;<span class="comment">// 使用完一个资源之后就立即释放锁 </span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (str2) &#123;</span><br><span class="line">System.out.println(<span class="string">"T1 想持有 "</span> + str2);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"T1 End...."</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 线程2 持有碗 的监视器锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (str2) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 持有 "</span> + str2);</span><br><span class="line"><span class="comment">// 线程2 持有碗 的监视器锁 的情况下想获取 米饭的锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (str1) &#123;</span><br><span class="line">System.out.println(<span class="string">"T2 想持有 "</span> + str1);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"T2 End...."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、finally 关键字  能够保证 finally 块中的代码   执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  lock.lock();</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot项目docker部署配置文件外挂载</title>
      <link href="2021/06/26/Springboot%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%96%E6%8C%82%E8%BD%BD/"/>
      <url>2021/06/26/Springboot%E9%A1%B9%E7%9B%AEdocker%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%96%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 利用docker对一个Springboot打包时会遇到要及时更改相关数据库或者外部接口的ip及port，如果每次都进到容器内部修改，那一定非常麻烦，这里我想到了两种解决方案，并最终使用了后者。两种方法类似，无论哪种，都必须经过外挂载的步骤，也就是要把配置文件放到一个和宿主机映射的目录下：如图，这里采用的是docker-compose.yaml容器编排方式，不赘述：<br><img src="https://img-blog.csdnimg.cn/20210626214430420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将配置文件放在宿主机目录的config下，代码中写到“/usr/app_file/config/config/json”即可被容器访问到!</p><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>容器内运行jar包的CMD采用指定外部application.yml的命令：<br>类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup jdk1<span class="number">.8</span><span class="number">.0_131</span>/bin/java -jar -Dspring.config.location=tmp/springboottmp/xxx.yaml tmp/service.jar --spring.profiles.active=test &gt; logs/xxxlog.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>不使用application.yml，用最原始的方式读取一个json文件的键值对，并替换代码变量即可,在Springboot config下定义一个JsonConfig类即可，代码简单，关键是要把地址写到容器内的与宿主机映射的<strong>外挂载目录下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String json_file = <span class="string">"/usr/app_file/config/es.json"</span>;</span><br><span class="line">        JSONObject configJ = <span class="keyword">this</span>.readJsonFile(json_file);</span><br><span class="line">        <span class="keyword">if</span>(configJ.containsKey(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> configJ.getString(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">readJsonFile</span><span class="params">(String filePath)</span></span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">        String readJson = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">            InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(fileInputStream, <span class="string">"UTF-8"</span>);</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">            String tempString = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((tempString = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                readJson += tempString;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="comment">// 获取json</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jsonObject = JSONObject.parseObject(readJson);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JSONException e)&#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Docker </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websocket通信实战</title>
      <link href="2021/06/26/Websocket%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98/"/>
      <url>2021/06/26/Websocket%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 最近给实验室做的个系统需要用docker打包到对方服务器上，并提供多个URL页面以及接口，需求是要将提供的URL页面通过Iframe方式集成到他们的系统去，他们向我们的后端接口发送数据请求，渲染结果到我们的URL页面上，不了解WebSocket前把我难住了，我想到了设置时间间隔 不断向后端请求 也可以解决问题，但是并不优雅，请求数据过大时，时间间隔也不好设定。直到实验室李师兄通过WebSocket技术给我做了示范，原来前后端Http通信除了Ajax之外 还有WebSocket这种客户端和服务端的双向长连接通信。</p><h1 id="WebSocket与Ajax轮询"><a href="#WebSocket与Ajax轮询" class="headerlink" title="WebSocket与Ajax轮询"></a>WebSocket与Ajax轮询</h1><p><img src="https://img-blog.csdnimg.cn/20210626152619628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebSocket  允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器<strong>只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的<strong>带宽等资源。</strong></p><p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p><h1 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> websocket = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    <span class="comment">// websocket = new WebSocket("ws://localhost:8081/acl/websocket");</span></span><br><span class="line">    websocket = <span class="keyword">new</span> WebSocket(finalurlip);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">"浏览器不支持websocket，请更换浏览器！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接发生错误的回调方法</span></span><br><span class="line">websocket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setMessageInnerHTML(<span class="string">"建立websocket连接出错！"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接成功建立的回调方法</span></span><br><span class="line">websocket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//setMessageInnerHTML("open");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收到消息的回调方法</span></span><br><span class="line"><span class="comment">//消息內包含桑基图数据</span></span><br><span class="line">websocket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(msg.data);</span><br><span class="line">    <span class="keyword">var</span> nodes = <span class="built_in">JSON</span>.parse(data.nodes);</span><br><span class="line">    <span class="keyword">var</span> links = <span class="built_in">JSON</span>.parse(data.links);</span><br><span class="line">    <span class="built_in">console</span>.log(nodes);</span><br><span class="line">    <span class="built_in">console</span>.log(links);</span><br><span class="line">    <span class="keyword">var</span> sankeyData = &#123;&#125;;</span><br><span class="line">    sankeyData[<span class="string">"nodes"</span>] = nodes;</span><br><span class="line">    sankeyData[<span class="string">"links"</span>] = links;</span><br><span class="line">    vm2.sankeyData = sankeyData;</span><br><span class="line">    <span class="built_in">console</span>.log(vm2.sankeyData);</span><br><span class="line">    vm2.setTopicSankey_2(<span class="number">1</span>,<span class="string">"acl"</span>,<span class="string">"数据演化图"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接关闭的回调方法</span></span><br><span class="line">websocket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setMessageInnerHTML(<span class="string">"websocket连接关闭！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    websocket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将消息显示在网页上</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span>(<span class="params">innerHTML</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert(innerHTML);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    websocket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span><br><span class="line">    websocket.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后端Java代码"><a href="#后端Java代码" class="headerlink" title="后端Java代码"></a>后端Java代码</h1><h2 id="WebSocketConfig"><a href="#WebSocketConfig" class="headerlink" title="WebSocketConfig"></a>WebSocketConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.irlab.agriculture.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入WebSocket Bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebSocketServer"><a href="#WebSocketServer" class="headerlink" title="WebSocketServer"></a>WebSocketServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.irlab.agriculture.service.acl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.irlab.agriculture.controller.ACLController;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/acl/websocket"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前在线链接数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger onlineCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存放每个客户端对应的mywebsocket对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketServers = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与某个客户端的链接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sid = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接建立成功的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        onlineCount.incrementAndGet();</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        sid = session.getId();</span><br><span class="line">        webSocketServers.add(<span class="keyword">this</span>);</span><br><span class="line">        logger.info(<span class="string">"有新窗口开始监听:&#123;&#125;,当前在线人数为&#123;&#125;"</span>,session.getId(),webSocketServers.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接关闭的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onlineCount.decrementAndGet();</span><br><span class="line">        webSocketServers.remove(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        logger.info(<span class="string">"有窗口关闭,当前在线人数为&#123;&#125;"</span>,webSocketServers.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message,Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        logger.info(<span class="string">"收到来自窗口：&#123;&#125;的信息：&#123;&#125;"</span>,sid,message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session,Throwable error)</span></span>&#123;</span><br><span class="line">        logger.error(<span class="string">"websocket发生错误："</span>,error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器主动推送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器群发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfoToMany</span><span class="params">(String info)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">            logger.info(<span class="string">"推送消息到多个窗口"</span>);</span><br><span class="line">            <span class="keyword">if</span>(webSocketServers.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                logger.error(<span class="string">"没有注册的窗口！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(WebSocketServer item:webSocketServers)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    item.sendMessage(info);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; <span class="title">getWebSocketServers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> webSocketServers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室学姐问到可见性细节，被批浮于表面【可见性的原理初探】</title>
      <link href="2021/06/13/Deep4-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
      <url>2021/06/13/Deep4-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 之前也只是知道有可见性这么回事，但是原理不算很明白！今天把多线程的可见性原理梳理一下，原理弄懂，而非死记硬背！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 先看多线程例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210613191915845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里启动了一个MyThread线程，并在主线程里面不断的去判断该成员变量a的值是否进行了修改，而实际情况是MyThread线程对值修改之后，主线程中并没有拿到这个最新的值而跳出while循环，那么这又是为啥呢？<br><img src="https://img-blog.csdnimg.cn/20210613192254802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当一个线程启动后，会单独建立一个栈供使用，那么这里就有主线程和新线程两个栈，启动线程后，栈内调用的成员变量、成员方法这些都是从同一个方法区中获取的，比如这里的MyThread.class静态区，拿到的都是方法区中的副本存到自己线程的栈内存当中，所以这个值就应该是线程启动当时的副本状态！只要不修改这个副本文件，就会一直使用这个副本，也不会重新去方法区拿。<br>当修改了副本后，他会立刻同步到方法区中，比如这里的新线程修改使得a=1，那么就会立刻去改方法区中MyThread.class静态区a的值为1，那么这个新线程今后用的值都是这个修改后的副本了，但是对于主线程，它拿到的一直是a修改之前的最开始的那个副本文件，所以对于主线程来说a=0。</p><blockquote><p><strong>总结1：</strong> 每个线程去使用共享内容时候，是把共享的内容复制一份副本到自己的栈内存<br><strong>总结2：</strong> 副本中的值发生改变时，立刻同步到方法区中<br><strong>总结3：</strong> 如果当前线程没有重新从方法区中拷贝副本，那么使用的资源还是上一次拿到的副本文件</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么，如何让主线程也拿到最新修改的方法区呢？也就是说如何再次获取一个最新的副本呢？有以下几个方法：</p><ol><li>让主线程<strong>sleep</strong>一下，那么线程休眠后再启动则会重新复制资源副本到主线程栈内存中。</li><li>给成员变量a设置<strong>volatile</strong>修饰符，保证其可见性！</li><li>使用<strong>同步代码块synchronized</strong>：只要遇到<strong>同步</strong>，那么线程也会重新去方法区拿最新的资源副本</li></ol><p>方法一：让主线程sleep而重新获取资源副本到栈内存当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210613201001340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法二：使用volatile，直接给a变量加即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>方法三：使用同步代码块 synchronized，这里随便对什么加锁都行，都会重新向方法区请求最新资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 启动线程</span></span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.主线程继续</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">//            Thread.sleep(1);</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Demo<span class="class">.<span class="keyword">class</span>) </span>&#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> (MyThread.a ==<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程读到了a=1"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程启动，休息2s..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"将a的值改为1"</span>);</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"线程结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 提升 </tag>
            
            <tag> 可见性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对多线程稍作整理【多线程】</title>
      <link href="2021/06/11/Deep3-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2021/06/11/Deep3-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><ul><li><p>并发:指两个或多个事件在同一个时间段内发生。</p></li><li><p>并行:指两个或多个事件在同一时刻发生(同时发生)。</p></li></ul><p>注意辨析宏观与微观的理解</p><p><img src="https://img-blog.csdnimg.cn/20210611124507184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="&lt;img src=&quot;多线程笔记.assets/image-20210605152309555.png&quot; alt=&quot;image-20210605152309555&quot; style=&quot;zoom:50%;&quot; /&gt;"></p><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有<strong>多个程序</strong>同时运行，这在单 CPU 系统中，每 一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分 时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上(CPU)，实现多任务并行执行， 即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意:单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个 线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><ul><li><p>进程:是指一个内存中运行的应用程序（比如打开一个软件 至少占用1个进程），每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程;进程也是程序的一次执行过程，是系统运行程序的基本单位;系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p>线程:线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。</p></li></ul><p><strong>简而言之:一个程序运行后至少有一个进程，一个进程中可以包含多个线程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">线程：CPU 可执行的最小任务单元 </span><br><span class="line"></span><br><span class="line">八核CPU -八核16线程  </span><br><span class="line">单核 单线程 CPU </span><br><span class="line"></span><br><span class="line">线程 让程序节省时间，提高效率</span><br><span class="line">多线程的CPU 可以看作可以并行运算的机器 </span><br><span class="line"></span><br><span class="line">单线程 - - 交替运行  不能节省时间提高效率</span><br><span class="line"> --同时运行的效果 </span><br><span class="line">CPU 运算速度特别快 </span><br><span class="line">在两个线程之间实现快速切换执行 </span><br><span class="line"></span><br><span class="line">进程：线程的老大 -- 程序运行</span><br></pre></td></tr></table></figure><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度:"></a>线程调度:</h1><h2 id="分时调度"><a href="#分时调度" class="headerlink" title="分时调度"></a>分时调度</h2><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p><h2 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h2><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为 <strong>抢占式调度</strong>。</p><ul><li><p>设置线程的优先级</p></li><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如:现在我们一边使用编辑器，一边使用腾讯会议软件，同时还开着qq、微信、IDEA等软件。此时，这些程序是 在同时运行，”<strong>感觉这些软件好像在同一时刻运行着“</strong>。</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着<strong>高速的切换</strong>。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，<strong>让CPU的使用率更高</strong>。</p></li></ul><h1 id="Java实现线程的三个方法："><a href="#Java实现线程的三个方法：" class="headerlink" title="Java实现线程的三个方法："></a>Java实现线程的三个方法：</h1><h2 id="Thread-类"><a href="#Thread-类" class="headerlink" title="Thread 类"></a>Thread 类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个类 继承 Thread </span><br><span class="line">2、重写run方法</span><br><span class="line">3、此类创建对象调用 start()方法</span><br><span class="line">每个线程对象都只能启动一次</span><br></pre></td></tr></table></figure><h2 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h2><pre><code>1、创建一个类  implements Runnable接口 2、重写run方法3、此类创建对象 交给Thread类对象调用 start()方法4、此类创建对象 交给线程池 调用 start()方法    每个线程对象都可以被Thread类对象重复启动         更轻量 方便 </code></pre><h2 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个类  implements Callable接口 </span><br><span class="line">2、重写call方法</span><br><span class="line">3、此类创建对象 交给线程池 调用 start()方法</span><br><span class="line">可以带有返回值</span><br></pre></td></tr></table></figure><p>三个方法之间的区别，优缺点：</p><table><thead><tr><th>&lt;!– 特点</th><th>Thread</th><th>Runnable</th><th>Callable</th></tr></thead><tbody><tr><td>优点</td><td>方便实现，代码简单</td><td>每个线程对象都可以被Thread类对象重复启动。<br/>实现接口，线程类就还能继承其它类，线程之间资源共享方便，不用加static进行修饰</td><td>实现接口，线程类就还能继承其它类,线程之间资源共享方便，不用加static进行修饰,线程可以有返回值,线程可以抛出异常</td></tr><tr><td>缺点</td><td>每个线程对象都只能启动一次 <br/>必须重写run方法run，方法不能有返回值，run方法不能抛出异常</td><td>必须重写run方法,run方法不能有返回值,run方法不能抛出异常</td><td>线程创建比较麻烦，代码比较复杂 –&gt;</td></tr></tbody></table><!-- ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210611150520309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70) --><h1 id="线程状态："><a href="#线程状态：" class="headerlink" title="线程状态："></a>线程状态：</h1><p>一共有T1、T2、T3三个时间段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动 T1</span><br><span class="line"></span><br><span class="line">运行 </span><br><span class="line">等待消耗小T2</span><br><span class="line">计时等待</span><br><span class="line"></span><br><span class="line">终止 T3</span><br></pre></td></tr></table></figure><p>线程池：–  减少 T1 T3 所占的时间和资源<br><img src="https://img-blog.csdnimg.cn/2021061113283062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和<strong>预期</strong>的是一样的，就是<strong>线程安全的</strong>。<br>这里以小球绘制为例：<br>背景：给画板添加点击事件，点击一次画板屏幕则创建一个小球线程<br>不加锁的情况下：<br>面板绘制主函数：<br>给画板添加点击事件ballLiten</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallUI</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line"></span><br><span class="line">BallUI()&#123;</span><br><span class="line">setTitle(<span class="string">"运动小球"</span>);</span><br><span class="line">setSize(<span class="number">600</span>,<span class="number">600</span>);</span><br><span class="line">setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">Graphics g = getGraphics();<span class="comment">// 获取画笔对象</span></span><br><span class="line">BallListener ballLiten =<span class="keyword">new</span> BallListener(g);</span><br><span class="line">addMouseListener(ballLiten);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> BallUI();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写点击方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallListener</span> <span class="keyword">implements</span> <span class="title">MouseListener</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击一次 创建一个球 运动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graphics g;</span><br><span class="line"></span><br><span class="line">BallListener(Graphics g)&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line">&#125;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">Color color = <span class="keyword">new</span> Color(random.nextInt(Integer.MAX_VALUE/<span class="number">200</span>));</span><br><span class="line">DrawBallThread dbt = <span class="keyword">new</span> DrawBallThread(g, e.getX(), e.getY(), <span class="number">30</span>,color);</span><br><span class="line">dbt.num=<span class="number">0</span>;</span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(dbt);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制运动的小球线程类(不加锁)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * implements Runnable每个线程 实际运行的内容是独立的</span></span><br><span class="line"><span class="comment"> * 成员属性是共享的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawBallThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Graphics g;<span class="comment">// 保证可见</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">50</span>;</span><br><span class="line">Color color = Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DrawBallThread</span><span class="params">(Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, Color color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line"><span class="keyword">this</span>.size = size;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> speedX=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> copynum = num;</span><br><span class="line"><span class="comment">//Random ran = new Random();</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//-------------------------不加锁的情况下--------------------</span></span><br><span class="line"><span class="comment">//g.setColor(new Color(238,238,238)); //灰色 先画背景 相当于清屏</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="keyword">if</span> (copynum ** <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line">x += speedX;</span><br><span class="line">y += speedX;</span><br><span class="line">&#125;</span><br><span class="line">g.setColor(color);</span><br><span class="line">g.fillOval(x, y, size, size);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">30</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210611135324644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p><strong>分析</strong>：<br>由图可见，在线程执行的方法中由于每个点击事件触发的线程拿到的都是同一个Graphics g对象，在一个线程启动后不久，另外点击而新开的线程拿到的仍然是同一个Graphics g对象，这里的Graphics g对象属于共享变量，它的color属性也是在不断变化的！从而导致各个线程之间的球颜色混乱！如果要解决此问题，则要将线程执行方法中的<strong>Graphics g对象这个共享变量加锁，保证它在当前线程运行结束的情况下才可被其他线程所调用</strong>，如下为加锁情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * implements Runnable每个线程 实际运行的内容是独立的</span></span><br><span class="line"><span class="comment"> * 成员属性是共享的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawBallThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">Graphics g;<span class="comment">// 保证可见</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">50</span>;</span><br><span class="line">Color color = Color.RED;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DrawBallThread</span><span class="params">(Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> size, Color color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.g = g;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line"><span class="keyword">this</span>.size = size;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> speedX=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> copynum = num;</span><br><span class="line"><span class="comment">//Random ran = new Random();</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//-------------------------加锁的情况下-------------------- synchronized (g) &#123;</span></span><br><span class="line"><span class="comment">//g.setColor(new Color(238,238,238)); //灰色 先画背景 相当于清屏</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">if</span> (copynum ** <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>||x&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>||y&gt;<span class="number">500</span>) &#123;</span><br><span class="line">speedX =-speedX;</span><br><span class="line">&#125;</span><br><span class="line">x += speedX;</span><br><span class="line">y += speedX;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (g) &#123;</span><br><span class="line"><span class="comment">//g.setColor(Color.white);</span></span><br><span class="line"><span class="comment">//g.fillRect(0, 0, 500, 500);</span></span><br><span class="line"></span><br><span class="line">g.setColor(color);</span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; 300; i++) &#123;</span></span><br><span class="line"><span class="comment">//g.fillOval(x, y, size, size);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">g.fillOval(x, y, size, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">30</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210611135114185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>小结：<br>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量<strong>只有读操作，而无写</strong>操作，一般来说，这个全局变量是<strong>线程安全</strong>的;若有<strong>多个线程同时执行写</strong>操作，一般都需要考虑<strong>线程同步</strong>， 否则的话就可能影响线程安全。</p><h3 id="同步代码块、锁"><a href="#同步代码块、锁" class="headerlink" title="同步代码块、锁"></a>同步代码块、锁</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 前面先引出了小球的案例，已对锁有了初步了解，现在详细介绍一下同步代码块、锁：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要解决上述多线程并发访问一个资源的安全性问题，Java中提供了同步机制 (synchronized)来解决。</p><p><strong>同步代码块</strong>: synchronized 关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。<br>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">synchronized</span>(同步锁)&#123; 需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步锁: 对象的同步锁只是一个概念,可以想象为在对象上<strong>标记了一个锁</strong>。</p><ol><li><strong>锁对象</strong> 可以是任意类型。</li><li>多个线程对象 要使用同一把锁。<blockquote><p>注意:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着 (BLOCKED)。</p></blockquote></li></ol><p><strong>同步方法</strong>: 使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外<br>等着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123; 可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Lock锁</strong>：<code>java.util.concurrent.locks.Lock</code>机制提供了比synchronized代码块和synchronized方法更广泛的锁定操作,<br>同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。 Lock锁也称同步锁，加锁与释放锁方法化了，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> :加同步锁。 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> :释放同步锁。</span></span><br></pre></td></tr></table></figure><p>举例：<br>在线程执行方法的前后<strong>执行锁对象的lock、unlock</strong>方法达到加锁和释放锁的目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123; <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">/*</span></span><br><span class="line"><span class="comment">* 执行卖票操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">//每个窗口卖票的操作 //窗口 永远开启 while(true)&#123;</span></span><br><span class="line">lock.lock(); </span><br><span class="line"><span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;<span class="comment">//有票 可以卖</span></span><br><span class="line"><span class="comment">//出票操作 //使用sleep模拟一下出票时间 try &#123;</span></span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto‐generated catch block</span></span><br><span class="line">e.printStackTrace(); &#125;</span><br><span class="line"><span class="comment">//获取当前线程对象的名字</span></span><br><span class="line">String name = Thread.currentThread().getName(); </span><br><span class="line">System.out.println(name+<span class="string">"正在卖:"</span>+ticket‐‐);</span><br><span class="line">&#125;</span><br><span class="line">lock.unlock(); </span><br><span class="line">&#125;</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p>几个安全相关的概念普及：</p><p><strong>原子性</strong>：即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。原子性就像数据库里面的事务一样，他们是一个团队，同生共死。</p><p><strong>可见性</strong>：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。<strong>常采用volatile</strong>去修饰变量，能够保证各个线程的一致可见性，也就是当一个线程修改了变量值后，别的线程能够看到</p><p><strong>有序性</strong>：即程序执行的顺序按照代码的先后顺序执行。</p><pre><code>num=1;  -- 1 num++  2 num++  数据安全不能保证 volatile    -- 一致可见性 不能保证线程数据安全synchronized -- 重量级锁 性能优秀 -- 不方便 -- 实现锁机制 --  保证原子性 final 原子操作：载入 堆中共享变量  写回变量  lock unlock     保证数据原子性的操作：        一个个来    文件操作：        读 写     所有线程 只读 -- 共享     线程 一个读   一个写 -- 必须实现 锁 排队     所有线程  写 写 - 必须实现 锁        JUC     ArrayList -- 增删查改 -- 原子操作的是：增删改 Redis -- 单线程 方法 ：分别对哪些资源对象进行加锁     方法中使用的变量     方法所在类的对象 </code></pre><p>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​    </p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维码也不过如此嘛，手写二维码玩一下【计算机基础：二进制+字节+移位运算】</title>
      <link href="2021/06/09/Deep5-%E6%89%8B%E5%86%99%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>2021/06/09/Deep5-%E6%89%8B%E5%86%99%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其实二维码就是由URL字符串转换得到的，那么手写一个最简单的字符与图像的转换如何实现呢？下面请看</p><h2 id="字符串转二维码"><a href="#字符串转二维码" class="headerlink" title="字符串转二维码"></a>字符串转二维码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryString</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">setTitle(<span class="string">"二维码"</span>);</span><br><span class="line">setSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.paint(g);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] binaryArray = stringToBinaryArray(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">int</span>[][] imgdata = <span class="keyword">new</span> <span class="keyword">int</span>[binaryArray.length/<span class="number">16</span>][<span class="number">16</span>]; <span class="comment">//</span></span><br><span class="line">BufferedImage buffimg = <span class="keyword">new</span> BufferedImage(<span class="number">160</span>,(binaryArray.length/<span class="number">16</span>)*<span class="number">10</span>,BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">Graphics g2 = buffimg.getGraphics();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgdata.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgdata[i].length; j++) &#123;</span><br><span class="line">imgdata[i][j] = binaryArray[i*<span class="number">16</span>+j];</span><br><span class="line"><span class="keyword">if</span>(imgdata[i][j]==<span class="number">48</span>) &#123;</span><br><span class="line">g2.setColor(Color.white);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">g2.setColor(Color.black);</span><br><span class="line">&#125;</span><br><span class="line">g2.fillRect(j*<span class="number">10</span>, i*<span class="number">10</span>,<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">g.drawImage(buffimg, <span class="number">100</span>, <span class="number">100</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] stringToBinaryArray(String srcStr) &#123;</span><br><span class="line">String link = <span class="string">"http://www.bilibili.com 天气不错"</span>; <span class="comment">//28个字符</span></span><br><span class="line"><span class="comment">//String link = "http://www.baidu.com 天气"; //28个字符</span></span><br><span class="line"><span class="comment">// 二进制 Str -&gt; 二进制码</span></span><br><span class="line"><span class="comment">// 转成char</span></span><br><span class="line"><span class="keyword">int</span> strLength = link.length();</span><br><span class="line"><span class="keyword">int</span>[] binaryData = <span class="keyword">new</span> <span class="keyword">int</span>[strLength * <span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strLength; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> c = link.charAt(i);</span><br><span class="line"></span><br><span class="line">String binaryStr = Integer.toBinaryString(c);</span><br><span class="line">System.out.println(<span class="string">"------缺码------"</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(binaryStr);<span class="comment">// 缺码</span></span><br><span class="line"><span class="comment">// 补码：在前补 0</span></span><br><span class="line"><span class="keyword">int</span> binaryStrLength = binaryStr.length();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (binaryStrLength &lt; <span class="number">16</span>) &#123;</span><br><span class="line">binaryStr = <span class="string">"0"</span> + binaryStr;</span><br><span class="line">binaryStrLength++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"------全码------"</span>);</span><br><span class="line">System.out.println(binaryStr);<span class="comment">// 全码</span></span><br><span class="line">System.out.println(<span class="string">"--存入binaryData--"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">System.out.println(binaryStr.charAt(j));</span><br><span class="line">binaryData[i * <span class="number">16</span> + j] = binaryStr.charAt(j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"------binaryData-------"</span>);</span><br><span class="line">System.out.println(binaryData);</span><br><span class="line">System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; binaryData.length; i++) &#123;</span><br><span class="line">System.out.print(binaryData[i]);</span><br><span class="line">System.out.print(<span class="string">" "</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">16</span>) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> binaryData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span>BinaryString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20210613223458780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20210613223458780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center</a> =200x400)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里输入的字符串为：”<a href="http://www.bilibili.com" target="_blank" rel="noopener">http://www.bilibili.com</a> 天气不错“，由图可以清晰看出由于是16位，那么前面字母部分的二进制则均为0，只有后面才有黑色的1，英文字母只占满了后8位，而最后四个中文字符，才有16位进行二进制编码，占满了全部16位，不懂为啥英文占8位，中文得16位的请看另一篇讲字符串二进制的文章 <a href="https://blog.csdn.net/popofzk/article/details/117712441?spm=1001.2014.3001.5501" target="_blank" rel="noopener">计算机基础：二进制+字节+移位运算</a></p><h2 id="二维码转字符串"><a href="#二维码转字符串" class="headerlink" title="二维码转字符串"></a>二维码转字符串</h2><p>大致思路：</p><ol><li>读取到二维码图片，用数组存储rgb像素值，再把黑白色转成0、1二进制</li><li>每一个字符得到整理成一个二进制字符串（16位）。</li><li>再把二进制字符串转String字符串（二进制字符串先转十进制数字，十进制再转字符串）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code2String</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public String picPath;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> w;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setH</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setW</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] getImagePix(String picPath)&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(picPath);</span><br><span class="line">        BufferedImage img = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            img = ImageIO.read(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> w = img.getWidth();</span><br><span class="line">        <span class="keyword">int</span> h = img.getHeight();</span><br><span class="line">        setH(h);</span><br><span class="line">        setW(w);</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">"图片宽度为："</span>+ w+ <span class="string">" 图片长度为："</span>+h</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">int</span>[][] imgArr = <span class="keyword">new</span> <span class="keyword">int</span> [h][w];</span><br><span class="line">        System.out.println(<span class="string">"---------imgArr----length"</span>);</span><br><span class="line">        System.out.println(imgArr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgArr[i].length; j++) &#123;</span><br><span class="line">                imgArr[i][j] =img.getRGB(j,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> imgArr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">binaryToString</span><span class="params">(ArrayList&lt;String&gt; binaryStringList)</span></span>&#123;</span><br><span class="line">        String resultString = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; binaryStringList.size(); i++) &#123;</span><br><span class="line">            String binaryString = binaryStringList.get(i);</span><br><span class="line"><span class="comment">//            System.out.println("------二进制转十进制数字------");</span></span><br><span class="line">            <span class="keyword">int</span> binaryInt=Integer.parseInt(binaryString, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">int</span> [] arrayS = &#123;binaryInt&#125;;</span><br><span class="line"><span class="comment">//            System.out.println("------十进制转字符串-------");</span></span><br><span class="line">            String s = <span class="keyword">new</span> String(arrayS,<span class="number">0</span>,arrayS.length);</span><br><span class="line">            resultString += s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">codeParsing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [][] imgArr = getImagePix(<span class="string">"img/pic1.png"</span>);</span><br><span class="line">        <span class="keyword">int</span> zoom = Math.round((<span class="keyword">float</span>)w/<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">int</span> [][] binaryArr = <span class="keyword">new</span> <span class="keyword">int</span>[h/zoom][<span class="number">16</span>]; <span class="comment">//28x16</span></span><br><span class="line">        System.out.println(<span class="string">"---zoom---"</span>);</span><br><span class="line">        System.out.println(zoom);</span><br><span class="line">        System.out.println(<span class="string">"---------binaryArr.length---------"</span>);</span><br><span class="line">        System.out.println(binaryArr.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; binaryArr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; binaryArr[i].length; j++) &#123;</span><br><span class="line"><span class="comment">//                System.out.println("---------binaryArr[i].length--------");</span></span><br><span class="line"><span class="comment">//                System.out.println(binaryArr[i].length);</span></span><br><span class="line"><span class="comment">//                System.out.println("第" + i + " 第"+j);</span></span><br><span class="line"><span class="comment">//                System.out.println(j);</span></span><br><span class="line"><span class="comment">//                System.out.println("---------imgArr[i*zoom][j*zoom]---------");</span></span><br><span class="line"><span class="comment">//                System.out.println(imgArr[i*zoom][j*zoom]);</span></span><br><span class="line">                <span class="keyword">int</span> rgbValue = imgArr[i*zoom][j*zoom];</span><br><span class="line">                <span class="keyword">int</span> red,green,blue;</span><br><span class="line">                red = rgbValue &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">                green = rgbValue &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">                blue = rgbValue &gt;&gt; <span class="number">0</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="keyword">int</span> gray = (red + green + blue) / <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span> (gray == <span class="number">0</span>)&#123;<span class="comment">//黑色</span></span><br><span class="line">                    binaryArr[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    binaryArr[i][j]=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                System.out.println("存入的值"+ gray);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------binaryArr二进制字符串-------------"</span>);</span><br><span class="line">        ArrayList&lt;String&gt; binaryStringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; binaryArr.length; i++) &#123;</span><br><span class="line">            String curString = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; binaryArr[i].length; j++) &#123;</span><br><span class="line">                System.out.print(binaryArr[i][j]);</span><br><span class="line">                curString += binaryArr[i][j];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            binaryStringList.add(curString);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------二进制字符串转String字符串-----------"</span>);</span><br><span class="line">        String binaryToString = binaryToString(binaryStringList);</span><br><span class="line">        System.out.println(binaryToString);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Code2String code2String = <span class="keyword">new</span> Code2String();</span><br><span class="line">        code2String.codeParsing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 程序是怎样跑起来的 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 字节 </tag>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、补码，字符串的底层存储都不懂，还敢说学过计算机？【计算机基础：二进制+字节+移位运算】</title>
      <link href="2021/06/08/Deep2%EF%BC%9A%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6+%E5%AD%97%E8%8A%82+%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91/"/>
      <url>2021/06/08/Deep2%EF%BC%9A%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%EF%BC%9A%E4%BA%8C%E8%BF%9B%E5%88%B6+%E5%AD%97%E8%8A%82+%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>提到二进制，为啥计算机底层数据存储都采用二进制呢？计算机内部事由IC电子部件构成，IC的一个引脚，只能表示两个状态（《程序是怎样跑起来的》第二章）</p><img src="https://img-blog.csdnimg.cn/20210608182649936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h1 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h1><p>二进制的数一般是8位、16、32，8位的二进制数被称为一个字节，字节是最基本的信息计量单位，而位是最小单位，字节是基本单位，内存和磁盘都是用字节来储存和读写数据，使用位单位则无法读写数据，因此，字节是基本单位</p><h2 id="位bit"><a href="#位bit" class="headerlink" title="位bit"></a>位bit</h2><p>bit位:位是==计算机存储的最小单位==简称为b也称为比特(bit)例如1b,2b,3b<br>byte字节:byte字节是计算机用于计量存储容量的,一种计量单位<br>1byte= 8bit<br>1byte =1B<br>1byte=存1个字母<br>2byte=存一个汉字</p><p>32位和62位系统有什么区别：</p><ol><li>处理数据能力不同：64位的一次可以处理64位的数据，向下兼容，比如32位 16位</li><li>支持的内存不同，或者说寻址能力不同：32位的最多支持4gb的内存，而64最多支持上百g的内存</li><li>架构不同</li><li>对配置要求不同，32位系统需要32位的配套系统安装</li></ol><p>疑问：既然有32 64，那有没有128位呢？</p><p>字符：电子计算机或者说是无线电通信中字母、数字、符号的统称</p><h2 id="各类型占用比特（bit）"><a href="#各类型占用比特（bit）" class="headerlink" title="各类型占用比特（bit）"></a>各类型占用比特（bit）</h2><img src="https://img-blog.csdnimg.cn/2021060818305690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ul><li>1个byte（字节）= 8位（bit），每一位就是0、1二进制，那么8位就能储存$2^8=256$个数字，所以1个字节能够代表256个数字，取值范围在-128~127</li><li>以此类推，1个short（短整型）=16位，那么就能储存$2^{16}=65535$个，取值范围就在-32768~32767</li></ul><h2 id="吃透字符："><a href="#吃透字符：" class="headerlink" title="吃透字符："></a>吃透字符：</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>字符的历史比较复杂：<br>分为可见字符和控制字符：</p><ul><li>可见字符：英文字母、数字、标点符号</li><li>控制字符：如 换行、回车等</li></ul><img src="https://img-blog.csdnimg.cn/20210608223909373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />如图，将这0~127（128个）的编号称作==码位==，代表了字符的id信息，再把这每个字符的码位转化二进制信息进行存储，这样的二进制信息为ASCII码：<img src="https://img-blog.csdnimg.cn/20210609170132592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>但是原始128个ASCII码字符过于少，仅满足==美国==需求，为了满足==欧洲等国家==字符集的需求，又对ASCII进行了扩充，从128扩充到255，那么ASCII码也就只能表示256个字符，对于==中国==来说，实在太少！</p><p>因为8位最多只能表示256个字符，对于中文来说，有几千个中文字符，我们则必须用16位表示一个字符了！那么要先设计字符集：</p><h3 id="GB2312字符集"><a href="#GB2312字符集" class="headerlink" title="GB2312字符集"></a>GB2312字符集</h3><p>使用分区管理，共计94个区，每个区含94个位，共8836个码位。<br>先介绍一下码位：<br><img src="https://img-blog.csdnimg.cn/2021060920062834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><br> <img src="https://img-blog.csdnimg.cn/2021060920050574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><br> <img src="https://img-blog.csdnimg.cn/20210609200829267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>前面的ASCII码可以直接转为二进制来存储，GB2312如何存储？<br><img src="https://img-blog.csdnimg.cn/20210609201044655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><br>GBK2312的高位和低位都大于127，那么计算机只要碰到大于127的字节就是汉字的开始<br><img src="https://img-blog.csdnimg.cn/2021061110542046.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>那么，世界上就会有不同的编码，会非常乱！<br><img src="https://img-blog.csdnimg.cn/20210611105453827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>ISO组织为了解决这个问题，开始规范化编码！提出了Unicode，目的就是把世界上所有字符放在一起并编号<br><img src="https://img-blog.csdnimg.cn/20210611105733928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是ASCII本来也只需要8位、GB2312只用16位，这里的UCS字符集需要32位，扩大了4倍、2倍，导致Unicode提出后并没有被广泛接受，而后期各国交流更加频繁，从而新生了一个新编码UTF-8<br>UTF-8每次传送8位数据，是一种可变长的编码格式<br><img src="https://img-blog.csdnimg.cn/20210611110356437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算<img src="https://img-blog.csdnimg.cn/20210608183243416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h1><p>移位运算指的是将二进制数值各个数位进行左右移位（shift）的运算，移位有左移、右移两种。<br>左移好理解，就是将原数值乘以2的n次幂，但是右移要注意了！二进制中的最高位表示的是符号（1代表负数，0代表正数），<br>eg：那么-1用8位如何表示呢？<br>大部分人会理解成：1的二进制是00000001，那么-1就是10000001，答案错！正确为：11111111。<br>计算机做减法运算时，实际上内部是加法，那么表示负数，就要用到正数的==补数==表示，补数=正数取反+1；<br>验证：1+（-1）=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000001</span></span><br><span class="line">+<span class="number">1111111</span></span><br><span class="line">   <span class="number">10000000</span></span><br></pre></td></tr></table></figure><p>这里相加后是9位，其中最高位的1溢出，答案为0，符合。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 仔细思考一下补数整个的机制，就不难理解如-32768至32767、 -128至127这些数据表示大范围为何正数最大值都比负数最大小1了！</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 程序是怎样跑起来的 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 字节 </tag>
            
            <tag> 移位运算 </tag>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>儿子到底继承了爸爸哪些优良传统？【OOP+继承+接口】</title>
      <link href="2021/05/28/Deep1%EF%BC%9A%E3%80%90OOP-%E7%BB%A7%E6%89%BF-%E6%8E%A5%E5%8F%A3%E3%80%91/"/>
      <url>2021/05/28/Deep1%EF%BC%9A%E3%80%90OOP-%E7%BB%A7%E6%89%BF-%E6%8E%A5%E5%8F%A3%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在Java中，继承是类与类之间的一种关系，分为父类和子类两种。这里和接口区分一下：一个类只能继承一个父类，而不能继承多个——即单继承关系；而一个类却可以实现多个接口。如下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>子类继承了父类的所有内容，但是对于不同访问修饰父类修饰的属性方法，子类所调用的权限也不相同。对于public关键词修饰的属性和方法，子类同一个项目下都可以继承和调用。protected关键词修饰的属性和方法，可以在同包下和子类继承关系下继承和调用。对于缺省关键词的方法和属性，只能在同包下继承的调用，但是对于private修饰符修饰的属性和方法，只能自己该类使用。<br>子类继承父类的方法后，还可以根据需要重写其该方法。重写方法的名称必须与父类相同，访问修饰符可以和父类相同也可以比父类权限更大、返回值类型可以和父类相同也可以是父的子类，这样可以丰富扩展子类继承父类的方法。<br>对于继承父类的子类方法，在初始化方法时可以使用父类容器来初始化子类</p><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="继承的内容"><a href="#继承的内容" class="headerlink" title="继承的内容"></a>继承的内容</h3><ol><li>子类继承到父类的哪些东西？</li></ol><p>所有</p><ol start="2"><li>子类以及子类对象可以调用到继承的哪些属性和方法？</li></ol><p>要看 父类的属性、方法的具体==访问修饰符==：</p><table><thead><tr><th>访问修饰符</th><th>访问范围</th></tr></thead><tbody><tr><td>public</td><td>项目里</td></tr><tr><td>private</td><td>类里</td></tr><tr><td>protected</td><td>包下，不同包的子类</td></tr><tr><td>缺省</td><td>同包下</td></tr></tbody></table><p>那么对于子类来说，</p><p>同包下：</p><p>​    只有private不能调用</p><p>不同包下：</p><p>​    public，protected 可以调用</p><p>==protected== 受保护的，子类不能访问父类的私有字段。不过有时候希望限制<strong>父类中的某个方法只允许子类访问</strong>，或者<strong>希望子类的方法访问超类的某个字段</strong>。</p><h3 id="方法重写："><a href="#方法重写：" class="headerlink" title="方法重写："></a>方法重写：</h3><p>注解格式：除方法体之外与父类一致</p><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><p>子类中重写的方法，与父类权限一致或者大于（因为子类继承，希望它有更强的扩展性，所以权限理应更大）</p><h4 id="返回值类型："><a href="#返回值类型：" class="headerlink" title="返回值类型："></a>返回值类型：</h4><p>与父类方法的返回值类型类/子类</p><h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><p>参数类型 不能修改</p><p>对于子类而言：子类及子类对象可以优先调用重写之后的</p><h4 id="重载："><a href="#重载：" class="headerlink" title="重载："></a>重载：</h4><p>方法名相同，参数不一致（子类 父类也可以实现重载，并不会归为一种类型）</p><h4 id="自动转型："><a href="#自动转型：" class="headerlink" title="自动转型："></a>自动转型：</h4><p>强制转型：int i = (int)1.2;<br>        A a = new B();<br>        A 是 B 的 父类——&gt; 祖先<br>        向上转型 之后 还会优先调用重写的方法吗？<br>            会</p><p>子类对像  向上 -&gt; 父类类型 ——&gt;向下转回子类类型 【可以】<br>父类对象 –&gt; 向下转型 子类类型 （==对象 无中生有== 子类可能有一些特别的属性方法 父类没有）【不可以】</p><p>==注意==：子类向上转型后，只能调用父类有的方法，并且是调的子类覆盖重写的，而不能调用子类独立的方法；子类独有的方法在父类中根本没有定义，所以父类无法找到子类独有的方法。</p><p>任务：一个类实例化的加载过程：</p><p>顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.加载静态成员&#x2F;代码块：</span><br><span class="line"></span><br><span class="line">先递归地加载父类的静态成员&#x2F;代码块(Object的最先)；再依次加载到本类的静态成员。</span><br><span class="line">同一个类里的静态成员&#x2F;代码块，按写代码的顺序加载。</span><br><span class="line">如果其间调用静态方法，则调用时会先运行静态方法，再继续加载。同一个类里调用静态方法时，可以不理会写代码的顺序。</span><br><span class="line">调用父类的静态成员，可以像调用自己的一样；但调用其子类的静态成员，必须使用“子类名.成员名”来调用。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.加载非静态成员&#x2F;普通代码块，初始化构造方法：（实例块在创建对象时才会被加载。而静态成员在不创建对象时可以加载）</span><br><span class="line"></span><br><span class="line">先递归地加载父类的非静态成员&#x2F;代码块(Object的最先)，非静态成员和代码块按代码出现顺序加载，并在加载完非静态成员后初始化构造方法；再依次加载到本类的非静态成员，并初始化构造方法，默认为无参构造，当然也可以指定父类初始化构造方法，和本类初始化构造方法。在子类构造方法中用super(参数列表);可以指定初始化父类构造方法，默认不写super(参数列表)为初始化父类无参构造方法。</span><br><span class="line">同一个类里的非静态成员&#x2F;普通代码块，按写代码的顺序加载。同一个类里调用方法时，可以不理会写代码的顺序。</span><br><span class="line">但调用属性时，必须注意加载顺序。一般编译就会不通过。</span><br><span class="line">调用父类的非静态成员(private 除外)，也可以像调用自己的一样。</span><br></pre></td></tr></table></figure><p>问题：静态代码块只加载一次，静态方法先于静态代码块？<br>这里要看情况，我这里样例是 由于声明成员变量时调用到了静态方法 所以静态方法优先于静态代码块 但实际上这两者本没有优先区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init Base "</span> + a);</span><br><span class="line">         <span class="comment">//System.out.println("Null Init " + b);</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init Base "</span> + <span class="keyword">this</span>.b);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *一级子类和基类包含的内容一样</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">  <span class="comment">//静态变量、静态块执行顺序，按书写先后顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a1 = getSuperStaticNumber();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b1 = getSuperInstanceNumber();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init SuperClass"</span> + <span class="keyword">this</span>.b1);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init SuperClass"</span> + a1);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSuperStaticNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Static member init"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuperInstanceNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Instance member init"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *二级子类为测试该代码的驱动类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a2 = getStaticNumber();</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> b2 = getInstanceNumber();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Init SubClass "</span> + <span class="keyword">this</span>.b2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStaticNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Static member init Sub"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInstanceNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Instance member init Sub"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">2000</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">static</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(<span class="string">"Static Init "</span> + a2);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 程序入口,main</span></span><br><span class="line"><span class="comment">      * </span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">new</span> Sub();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><!-- ![在这里插入图片描述]() --><img src="https://img-blog.csdnimg.cn/20210527153502546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>几个面试常见问题：</p><ul><li>请解释hashCode()和equals()方法有什么联系？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java对象的eqauls方法和hashCode方法是这样规定的：</span><br><span class="line"></span><br><span class="line">➀相等（相同）的对象必须具有相等的哈希码（或者散列码）。</span><br><span class="line"></span><br><span class="line">➁如果两个对象的hashCode相同，它们并不一定相同。</span><br></pre></td></tr></table></figure></li><li>若对一个类不重写，它的equals()方法是如何比较的？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址</span><br></pre></td></tr></table></figure></li><li>请说明Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。</span><br><span class="line">与此相对，方法覆盖是说子类重新定义了父类的方法。</span><br><span class="line">方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</span><br></pre></td></tr></table></figure></li><li>请判断，两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，该说法是否正确，为什么？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">不对，如果两个对象x和y满足x.equals(y) &#x3D;&#x3D; true，它们的哈希码（hash code）应当相同。</span><br><span class="line">Java对于eqauls方法和hashCode方法是这样规定的：</span><br><span class="line">(1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同；</span><br><span class="line">(2)如果两个对象的hashCode相同，它们并不一定相同。</span><br><span class="line">当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在Set集合中，同时增加新元素的效率会大大下降</span><br><span class="line">（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）</span><br></pre></td></tr></table></figure></li><li>请判断当一个对象被当作参数传递给一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是值传递。Java 编程语言只有值传递参数。</span><br><span class="line">当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。</span><br><span class="line">对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。</span><br></pre></td></tr></table></figure>==Java是值传递== 就算传的是对象 也是传的对象地址<br><a href="https://www.zhihu.com/question/31203609/answer/164430457" target="_blank" rel="noopener">https://www.zhihu.com/question/31203609/answer/164430457</a><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于Java不支持多继承，而有可能某个类或对象要使用分别在几个类或对象里面的方法或属性，现有的单继承机制就不能满足要求。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 与继承相比，接口有更高的灵活性，因为接口中没有任何实现代码。当一个类实现了接口以后，该类要==实现接口里面所有的方法和属性==，并且接口里面的属性在默认状态下面都是public static,所有方法默认情况下是public.一个类可以实现多个接口。</p>]]></content>
      
      
      <categories>
          
          <category> 深入 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OOP </tag>
            
            <tag> 继承 </tag>
            
            <tag> 接口 </tag>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 集成多容器镜像实 践:Jdk8,py37,Mysql,es,采用Dockfile+docker-compose编排</title>
      <link href="2021/01/29/Docker-%E9%9B%86%E6%88%90%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%AE%9E-%E8%B7%B5-Jdk8-py37-Mysql-es-%E9%87%87%E7%94%A8Dockfile-docker-compose%E7%BC%96%E6%8E%92/"/>
      <url>2021/01/29/Docker-%E9%9B%86%E6%88%90%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E5%AE%9E-%E8%B7%B5-Jdk8-py37-Mysql-es-%E9%87%87%E7%94%A8Dockfile-docker-compose%E7%BC%96%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://img-blog.csdnimg.cn/202101292257120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于一个较大的项目(Jdk8+py37+Mysql+es)，如果仅仅使用一个容器做部署，安装过程可能会极其复杂，并且并不利于后期各模块的更新，为了方便他人，也为了快速生成镜像部署，对于多服务的项目，我采用了Dock-compose技术生成多容器，并进行编排，第一次做，耗时3天成功，有不少经验分享于此，便于以后快速部署环境！</p><h1 id="1-Mysql"><a href="#1-Mysql" class="headerlink" title="1. Mysql"></a>1. Mysql</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 强烈不建议自己先生成一个干净的centos，然后进到容器里面安装Mysql，这个过程谁试过谁知道，很耗时间并且不易成功！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一开始我已经调通了Springboot和es在一个容器，本想着装一个Mysql就基本结束了，谁料这将会是一个大坑！！<br>最终的Mysql方案，直接采用Dockerhub官方镜像，<br><img src="https://img-blog.csdnimg.cn/20210129220051755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里补充几点，对于Mysql，一般需要初始化sql，可以改动docker-entrypoint.sh文件，并替换进容器里，该文件内容修改地方如下，这里我只是一个空库空表：<br><img src="https://img-blog.csdnimg.cn/20210129220459734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么这个文件如何得到？可以先启动这个容器，然后用cp命令考出来，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  d5200819a46d:/usr/local/bin/docker-entrypoint.sh .</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 启动Docker-compose.yaml中的单个容器，如只启动Mysql：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d mysql</span><br></pre></td></tr></table></figure><h1 id="2-es-amp-Jdk8"><a href="#2-es-amp-Jdk8" class="headerlink" title="2.es &amp; Jdk8"></a>2.es &amp; Jdk8</h1><h2 id="2-1-es"><a href="#2-1-es" class="headerlink" title="2.1 es"></a>2.1 es</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这两个相对容易一点，只需要配好jdk8环境即可，如果都放一个容器里面容易出内存问题，且不方便看两个服务的日志，并不利于调试，故拆成两个容器最好！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; es：本地的整个es文件夹放进容器内即可，这里我先用dockerfile配好了一个含有jdk8及es文件夹的容器，然后commit成一个新的镜像es:vcoustom，再丢进docker-compose进行编排：<br><img src="https://img-blog.csdnimg.cn/20210129221137232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的解释一下为何把9201对宿主机进行了映射，为了方便调试，在localhost:9201下看到es的数据结构页面。<br>es文件夹内的端口配置，elasticsearch.yml<br><img src="https://img-blog.csdnimg.cn/20210129221437303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>tcp端口配置(与Java通信)：<br><img src="https://img-blog.csdnimg.cn/20210129221520837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>es启动的报错：</strong><br>这里的cluster.routing.allocation.disk.threshold_enabled一定要配，否则容易报空间不足的问题<br>如果es启动报内存不足问题，修改config/jvm.options,将1g改小到512m解决问题，减小启动内存的消耗<br><img src="https://img-blog.csdnimg.cn/2021012922184722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>es容器采用dockerfile生成镜像：</strong><br><img src="https://img-blog.csdnimg.cn/20210129222219167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-2-Springboot项目"><a href="#2-2-Springboot项目" class="headerlink" title="2.2 Springboot项目"></a>2.2 Springboot项目</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 很简单，只需要配好jdk8环境即可，这里需要注意一下工作路径，也就是执行最终启动命令的位置，否则jar包启动时不会扫描当前jar包所在目录下的文件<br><img src="https://img-blog.csdnimg.cn/2021012922253052.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该Springboot项目只需jdk9环境。所以和前面的es写的dockerfile类似，只改COPY内容即可</p><h1 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 该模块在整个Springboot项目中承担了一个django接口，所以也不难配置，只需拉取一个python37镜像，简单配置<br><img src="https://img-blog.csdnimg.cn/20210129222859352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里我采用了另一种docker-compose的写法，就是直接在yaml里面写好镜像的build方法，CMD在dockerfile里面已经写了，那么docker-compose.yaml内就不用写了<br><img src="https://img-blog.csdnimg.cn/20210129223015878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的几个容器我分别采用了三种方式写docker-compose，殊途同归，但是自己去体会，他的目的以及侧重点还是不一样的！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果我们需要将整个目录发给别人去部署，那么就尽量不要用save命令将自己写的镜像保存成tar 给别人导入，而是尽可能的发给别人少量的文件，让别人能够从docker-hub拉取，如这里的python和mysql镜像，这两个容器内部的原始镜像都是从官方拉取的，那么就不需要自己save了！<br><img src="https://img-blog.csdnimg.cn/20210129223443563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210129223500671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>save方法解释一下：就是将自己配好的镜像save成一个tar包，发给别人，别人通过load命令导入到他电脑的docker镜像库中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save frontier2:vpopo -o xxx.tar</span><br><span class="line">docker load -i xxx.tar</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里再解释一下RUN和CMD命令，对于一个镜像的生成，RUN执行于生成镜像的过程中(比如安装相应的系统环境)，CMD命令执行于启动该镜像后系统初始化要执行的命令(比如某个服务的启动)</p><h1 id="Docker-compose-yaml"><a href="#Docker-compose-yaml" class="headerlink" title="Docker-compose.yaml"></a>Docker-compose.yaml</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'mysql:5.7'</span></span><br><span class="line"><span class="comment">#     network_mode: "host"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql/conf.d:/etc/mysql/conf.d</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql/logs:/logs</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/opt/mysql//data:/var/lib/mysql</span></span><br><span class="line">    <span class="comment"># - $PWD/schema.sql:/docker-entrypoint-initdb.d/schema.sql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">$PWD/docker-entrypoint.sh:/docker-entrypoint.sh</span></span><br><span class="line"><span class="comment">#    command: ["mysql","-uroot","-p123456","&lt;","/tmp/schema.sql"]</span></span><br><span class="line">  <span class="attr">es:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'es:vcoustom'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9201:9201"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"9301:9301"</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["su","-","es","-c","/usr/app_file/elasticsearch-6.4.2/bin/elasticsearch"]</span></span><br><span class="line">  <span class="attr">python:</span></span><br><span class="line">    <span class="comment"># image: 'python:3.7.4'</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./docker-python</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="comment"># volumes:</span></span><br><span class="line">    <span class="comment"># - $PWD/word_funtion2:/usr/src/app/word_funtion2</span></span><br><span class="line">    <span class="comment"># working_dir: /usr/src/app/word_funtion2</span></span><br><span class="line">    <span class="comment"># # command: ["chmod","u+x","/usr/local/pystart.sh","&amp;&amp;","/usr/local/pystart.sh"]</span></span><br><span class="line">    <span class="comment"># command: </span></span><br><span class="line">    <span class="comment"># - sh</span></span><br><span class="line">    <span class="comment"># - -c </span></span><br><span class="line">    <span class="comment"># - |</span></span><br><span class="line">    <span class="comment">#     pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line">    <span class="comment">#     python manage.py runserver 0.0.0.0:8000</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">  <span class="attr">frontier_prediction:</span></span><br><span class="line">    <span class="comment">#network_mode: "host"</span></span><br><span class="line">    <span class="comment"># image: 'frontier2:vpopo'</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"mysql"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"es"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"python"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'frontier_prediction:vcoustom'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">    <span class="comment"># command: ["/usr/local/jdk1.8.0_202/bin/java","-jar","/usr/app_file/agri-1.0-SNAPSHOT.jar"]</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line">        <span class="string">cd</span> <span class="string">/usr/app_file/</span> </span><br><span class="line">        <span class="string">/usr/local/jdk1.8.0_202/bin/java</span> <span class="string">-jar</span> <span class="string">agri-1.0-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><h1 id="高频Docker命令"><a href="#高频Docker命令" class="headerlink" title="高频Docker命令"></a>高频Docker命令</h1><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看本机镜像</span><br><span class="line">docker ps #查看目前启动的容器</span><br><span class="line">docker exec -it cab0db06ada2 /bin/bash #进入到某个容器中</span><br><span class="line">docker stop cab0db06ada2</span><br><span class="line">docker logs -f ea504eaaf08e</span><br></pre></td></tr></table></figure><p>将容器提交为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a "popo" -m "popo" b83f55190bf3 frontier2:vpopo</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 解释一下commit，当我们将一个配好的容器提交为一个镜像时，无论你是否开启端口 服务，它保存的是一个静态的系统关机状态，相当于它只保存了这个容器的环境(包括文件改动等)，并不意味着你打开这个镜像，他就已经开好了服务，这里要清晰！这也是之前一直困扰了我的问题，通过实践解决了！<br>这里还有一个高级的奇淫技巧,如果启动容器忘记了挂载，可以中途拷贝容器内的文件出来到本机目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp  d5200819a46d:/usr/local/bin/docker-entrypoint.sh .</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker-compose up -d frontier_prediction</span><br><span class="line">docker-compose stop frontier_prediction</span><br><span class="line">docker-compose rm frontier_prediction</span><br></pre></td></tr></table></figure><h1 id="多个容器间通信"><a href="#多个容器间通信" class="headerlink" title="多个容器间通信"></a>多个容器间通信</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里走了很多弯路。其实很简单，如果都是容器与容器通信的话，host直接改为docker-compose.yaml中各个services的名字即可，比如frontier_prediction这个Springboot项目要访问mysql容器的3306端口，只需改项目中的host为：mysql即可，而不是localhost</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Docker </tag>
            
            <tag> java </tag>
            
            <tag> Docker-compose </tag>
            
            <tag> Mysql </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Springboot】用户权限框架：Spring security &amp; Shiro</title>
      <link href="2021/01/24/Springboot%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%A1%86%E6%9E%B6%EF%BC%9ASpring-security-Shiro/"/>
      <url>2021/01/24/Springboot%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%A1%86%E6%9E%B6%EF%BC%9ASpring-security-Shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Shiro简介"><a href="#1、Shiro简介" class="headerlink" title="1、Shiro简介"></a>1、Shiro简介</h1><h2 id="1-1、Shiro-是什么？"><a href="#1-1、Shiro-是什么？" class="headerlink" title="1.1、Shiro 是什么？"></a>1.1、Shiro 是什么？</h2><ul><li><p>Apache Shiro 是 Java 的一个安全（权限）框架。</p></li><li><p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。</p></li><li><p>Shiro 可以完成：认证、授权、加密、会话管理、与Web 集成、缓存等。</p></li><li><p>下载地址</p><ul><li>官网：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a></li><li>github：<a href="https://github.com/apache/shiro" target="_blank" rel="noopener">https://github.com/apache/shiro</a></li></ul></li></ul><h2 id="1-2、有哪些功能？"><a href="#1-2、有哪些功能？" class="headerlink" title="1.2、有哪些功能？"></a>1.2、有哪些功能？</h2><p><img src="https://img-blog.csdnimg.cn/20210129213400955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>Authentication:身份认证/登录，验证用户是不是拥有相应的身份</p></li><li><p>Authorization:授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限</p></li><li><p>Session Management:会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境，也可以是Web 环境的</p></li><li><p>Cryptography:加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储</p></li><li><p>Web Support:Web 支持，可以非常容易的集成到Web 环境</p></li><li><p>Caching:缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率</p></li><li><p>Concurrency:Shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去</p></li><li><p>Testing:提供测试支持</p></li><li><p>“Run As”:允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</p></li><li><p>Remember Me:记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</p></li></ul><h2 id="1-3、Shiro架构-外部"><a href="#1-3、Shiro架构-外部" class="headerlink" title="1.3、Shiro架构(外部)"></a>1.3、Shiro架构(外部)</h2><p>从外部来看Shiro，即从应用程序角度的来观察如何使用Shiro完成工作<br><img src="https://img-blog.csdnimg.cn/20210129213425685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>Subject：应用代码直接交互的对象是Subject，也就是说Shiro的对外API 核心就是Subject。Subject 代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；与Subject 的所有交互都会委托给SecurityManager；Subject 其实是一个门面，SecurityManager才是实际的执行者</p></li><li><p>SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且其管理着所有Subject；可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于SpringMVC中DispatcherServlet的角色</p></li><li><p>Realm：Shiro从Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm 看成DataSource</p></li><li><p>1.4、Shiro架构(内部)<br><img src="https://img-blog.csdnimg.cn/20210129213458977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Subject：任何可以与应用交互的“用户”；</p></li><li><p>SecurityManager：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证、授权、会话及缓存的管理。</p></li><li><p>Authenticator：负责Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p></li><li><p>Authorizer：授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p></li><li><p>Realm：可以有1 个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的Realm；</p></li><li><p>SessionManager：管理Session 生命周期的组件；而Shiro并不仅仅可以用在Web 环境，也可以用在如普通的JavaSE环境<br>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</p></li><li><p>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密。</p><h1 id="2、SpringBoot集成"><a href="#2、SpringBoot集成" class="headerlink" title="2、SpringBoot集成"></a>2、SpringBoot集成</h1><p>项目结构：<br><img src="https://img-blog.csdnimg.cn/20210129213729703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p>编写ShiroConfig配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//shiroFilterFactoryBean  过滤的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(@Qualifier(<span class="string">"getDefaultWebSecurityManager"</span>)</span> DefaultWebSecurityManager defaultWebSecurityManager) </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">// 设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">            authc： 必须认证了才能访问</span></span><br><span class="line"><span class="comment">            user： 必须拥有记住我功能才能用</span></span><br><span class="line"><span class="comment">            perms： 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">            role： 拥有某个角色权限</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//filterMap.put("/user/add","authc");</span></span><br><span class="line">        <span class="comment">//filterMap.put("/user/update","authc");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权，正常情况下，没有授权会跳转到为授权页面</span></span><br><span class="line">        filterMap.put(<span class="string">"/user/add"</span>,<span class="string">"perms[user:add]"</span>);</span><br><span class="line">        filterMap.put(<span class="string">"/user/update"</span>,<span class="string">"perms[user:update]"</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">"/user/*"</span>,<span class="string">"authc"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录的请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">"/toLogin"</span>);  <span class="comment">//设置登录页面 如果没有权限则跳转到此页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//为授权页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/noauto"</span>); <span class="comment">//如果没有授权则返回此页面</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager  安全对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(@Qualifier(<span class="string">"userRealm"</span>)</span> UserRealm userRealm) </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关联userRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"userRealm"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整合ShiroDialect： 用来整合 Shiro thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的UserRealm：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的UserRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了=&gt;授权doGetAuthorizationInfo"</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//info.addStringPermission("user:add");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User)subject.getPrincipal();<span class="comment">//拿到user对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户的权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        System.out.println(<span class="string">"----用户的权限perms----"</span> + currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了=&gt;认证doGetAuthorizationInfo"</span>);</span><br><span class="line">        <span class="comment">// 拿到前端传来的userToken，UsernamePasswordToken在MyController中</span></span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 虚拟用户</span></span><br><span class="line">        <span class="comment">//String name = "root";</span></span><br><span class="line">        <span class="comment">//String password = "123456";</span></span><br><span class="line">        <span class="comment">//if (!userToken.getUsername().equals(name)) &#123;</span></span><br><span class="line">        <span class="comment">//    return null;//抛出异常 UnknownAccountException</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真实数据库 用户名、密码， 数据中取</span></span><br><span class="line">        User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;<span class="comment">//没有这个人</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首页</span></span><br><span class="line">        <span class="comment">//Subject currentSubject = SecurityUtils.getSubject();</span></span><br><span class="line">        <span class="comment">//Session session = currentSubject.getSession();</span></span><br><span class="line">        <span class="comment">//session.setAttribute("loginUser",user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以加密：MD5(简单密码可能被破解)，MD5盐值加密(再加上user等信息加密)</span></span><br><span class="line">        <span class="comment">// 密码认证，shiro做，不需要在这里判断密码正确与否，因为密码有可能泄露，根本不让你接触密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021012921415083.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Shiro </tag>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Springboot】Mybatis-plus学习笔记：大大简化Mybatis 无须繁琐CRUD</title>
      <link href="2021/01/22/Mybatis-plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%A7%E5%A4%A7%E7%AE%80%E5%8C%96Mybatis/"/>
      <url>2021/01/22/Mybatis-plus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A4%A7%E5%A4%A7%E7%AE%80%E5%8C%96Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatisPlus概述"><a href="#MyBatisPlus概述" class="headerlink" title="MyBatisPlus概述"></a>MyBatisPlus概述</h2><p>需要的基础:把我的MyBatis、Spring、SpringMVC就可以学习这个了! 为什么要学习它呢?MyBatisPlus可以节省我们大量工作时间，所有的CRUD代码它都可以自动化完成! JPA 、 tk-mapper、MyBatisPlus<br>偷懒的!</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>是什么? MyBatis 本来就是简化 JDBC 操作的! 官网:<a href="https://mp.baomidou.com/" target="_blank" rel="noopener">https://mp.baomidou.com/</a> MyBatis Plus，简化 MyBatis !<br><img src="https://img-blog.csdnimg.cn/20210124161928400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus 是自己开发，并非官方的! --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mapper继承BaseMapper"><a href="#mapper继承BaseMapper" class="headerlink" title="mapper继承BaseMapper"></a>mapper继承BaseMapper</h3><p>之前的Mybatis，需要写mapper接口，还需要写它的实现类，实现类中药写所有的CRUD方法，以下为Mybatis：<br><img src="https://img-blog.csdnimg.cn/20210124162739567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124162908818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>现在的Mybatis-plus，无须繁琐的CRUD方法，继承了BaseMapper，就已经完成了简单增删改查的方法<br><img src="https://img-blog.csdnimg.cn/20210124162356852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面进行CRUD测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.example.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatisplus.example.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setBirth(<span class="string">"1997-10-14"</span>);</span><br><span class="line">        user.setGender(<span class="string">"男"</span>);</span><br><span class="line">        user.setName(<span class="string">"小马先生"</span>);</span><br><span class="line">        user.setRole(<span class="string">"admin"</span>);</span><br><span class="line">        user.setSuggestion(<span class="string">"所有的不平凡都来自平凡"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">28</span>);</span><br><span class="line"><span class="comment">//        user.setBirth("1996-10-1");</span></span><br><span class="line">        user.setSuggestion(<span class="string">"所有的不平凡都来自平凡"</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 测试乐观锁  成功案例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1、查询用户信息</span></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2、修改用户信息</span></span><br><span class="line">        user.setName(<span class="string">"刘邦"</span>);</span><br><span class="line">        user.setGender(<span class="string">"女"</span>);</span><br><span class="line">        <span class="comment">//3、执行更新操作</span></span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">// 测试乐观锁  失败案例---多线程下</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程1</span></span><br><span class="line"></span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"刘邦"</span>);</span><br><span class="line">        user.setGender(<span class="string">"女"</span>);</span><br><span class="line">        <span class="comment">//模拟另一个线程执行了插队操作</span></span><br><span class="line">       User user2 = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">       user2.setName(<span class="string">"刘备"</span>);</span><br><span class="line">       user2.setGender(<span class="string">"男"</span>);</span><br><span class="line">       userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//自旋锁来多次尝试提交</span></span><br><span class="line">       userMapper.updateById(user);<span class="comment">// 如果没有乐观锁就会覆盖插队线程的值!</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>  <span class="comment">//批量查询固定id 集合传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBuBatchId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(users.get(1).getName());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//用map来指定字段查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBuBatchId2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"徐淑高"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//测试分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>); <span class="comment">//current当前页 size大小</span></span><br><span class="line">        userMapper.selectPage(page,<span class="keyword">null</span>); <span class="comment">//wrapper是高级查询</span></span><br><span class="line"></span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">28</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"小马先生"</span>);</span><br><span class="line">        userMapper.deleteByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>实体类User中，可以对该实体类进行表名绑定（如果表名和实体类名不一致时）</p></li><li><p>对于类建立的Getter、Setter、有参无参可以通过lombok注解来简化<br><img src="https://img-blog.csdnimg.cn/20210124163325833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2021012416350528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>阿里的数据库构建规范中，需要给每个表至少拥有create_time、update_time字段，这个可以通过写一个MyMetaObjectHandler类来实现官方给的MetaObjectHandler接口，覆盖重写插入时候的填充策略、更新时候的填充策略，记得用@Component丢进spring中，即可保证在插入时候、更新时候，create_time、update_time字段同步更新，无须手动写时间<br><img src="https://img-blog.csdnimg.cn/2021012416372831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>乐观锁和分页，按照官网进行配置即可，乐观锁需要加一个version字段，在操作数据库时会判断version版本</p></li></ul><p>乐观锁 : 故名思意十分乐观，它总是认为不会出现问题，无论干什么不去上锁!如果出现了问题， 再次更新值测试<br>悲观锁:故名思意十分悲观，它总是认为总是出现问题，无论干什么都会上锁!再去操作!</p><p>我们这里主要讲解 乐观锁机制! 乐观锁实现方式:</p><ol><li>取出记录时，获取当前 version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion 如果version不对，就更新失败</li></ol><p>乐观锁和分页插件对应的config：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatisplus.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.mybatisplus.example.mapper"</span>)</span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------分页插件</span></span><br><span class="line">    <span class="comment">// 分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Springboot </tag>
            
            <tag> Mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Springboot】Redis学习笔记</title>
      <link href="2021/01/04/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/01/04/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><p> 1、单机Mysql时代</p><p><img src="https://img-blog.csdnimg.cn/20210124122915940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）<br>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！<br><img src="https://img-blog.csdnimg.cn/20210124122903412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><p>3、分库分表 + 水平拆分 + Mysql集群<br>技术和业务在发展的同时，对人的要求也越来越高!<br>本质:数据库(读，写)<br>早些年MyISAM: 表锁，十分影响效率!高并发下就会出现严重的锁问题 转战Innodb:行锁<br>慢慢的就开始使用分库分表来解决写的压力! MySQL 在哪个年代推出 了表分区!这个并没有多少公司 使用!<br>MySQL 的 集群，很好满足哪个年代的所有需求!<br><img src="https://img-blog.csdnimg.cn/20210124123205551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、如今最近的年代<br>2010–2020 十年之间，世界已经发生了翻天覆地的变化;(定位，也是一种数据，音乐，热榜!) MySQL 等关系型数据库就不够用了!数据量很多，变化很快~!<br>MySQL 有的使用它来存储一些比较大的文件，博客，图片!数据库表很大，效率就低了!如果有一种数 据库来专门处理这种数据,<br>MySQL压力就变得十分小(研究如何处理这些问题!)大数据的IO压力下，表几乎没法更大!</p><p>目前一个基本的互联网项目!<br><img src="https://img-blog.csdnimg.cn/20210124123324246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为什么要用NoSQL!<br>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">传统的 RDBMS(关系型数据库)</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中 row col</span><br><span class="line">- 操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Nosql</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性</span><br><span class="line">- CAP定理和BASE</span><br><span class="line">- 高性能，高可用，高扩展</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><p>了解：3V + 3高<br>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p><strong>文档型数据库（bson数据格式）：</strong></p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p><strong>列存储数据库</strong></p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p><strong>图关系数据库</strong></p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table><h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis能该干什么？</p></blockquote><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p><h3 id="安装（略）"><a href="#安装（略）" class="headerlink" title="安装（略）"></a>安装（略）</h3><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3></li></ol><p><strong>redis-benchmark：</strong> Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="https://img-blog.csdnimg.cn/20210124133354636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>简单测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试：100个并发连接 100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210124133436761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>redis默认有16个数据库<br><img src="https://img-blog.csdnimg.cn/20210124133502896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认使用的第0个;</p></blockquote><p>16个数据库为：DB 0~DB 15<br>默认使用DB 0 ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get databases <span class="comment"># 命令行查看数据库数量databases</span></span><br><span class="line">1) <span class="string">"databases"</span></span><br><span class="line">2) <span class="string">"16"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; select 8 <span class="comment"># 切换数据库 DB 8</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; dbsize <span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SELECT 8</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[8]&gt; get name <span class="comment"># db8中并不能获取db0中的键值对。</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379[8]&gt; DBSIZE</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379[8]&gt; SELECT 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"counter:__rand_int__"</span></span><br><span class="line">2) <span class="string">"mylist"</span></span><br><span class="line">3) <span class="string">"name"</span></span><br><span class="line">4) <span class="string">"key:__rand_int__"</span></span><br><span class="line">5) <span class="string">"myset:__rand_int__"</span></span><br><span class="line">127.0.0.1:6379&gt; DBSIZE <span class="comment"># size和key个数相关</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><blockquote><p><strong>Redis是单线程的，Redis是基于内存操作的。</strong></p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p><strong>Redis为什么单线程还这么快？</strong></p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p><h2 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h2><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html" target="_blank" rel="noopener">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html" target="_blank" rel="noopener">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html" target="_blank" rel="noopener">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html" target="_blank" rel="noopener">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html" target="_blank" rel="noopener">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html" target="_blank" rel="noopener">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html" target="_blank" rel="noopener">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html" target="_blank" rel="noopener">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html" target="_blank" rel="noopener">分区</a>。</p><h3 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h3><blockquote><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p></blockquote><p>下面学习的命令：</p><ul><li><code>exists key</code>：判断键是否存在</li><li><code>del key</code>：删除键值对</li><li><code>move key db</code>：将键值对移动到指定数据库</li><li><code>expire key second</code>：设置键值对的过期时间</li><li><code>type key</code>：查看value的数据类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * <span class="comment"># 查看当前数据库所有key</span></span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qinjiang <span class="comment"># set key</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"name"</span></span><br><span class="line">127.0.0.1:6379&gt; move age 1 <span class="comment"># 将键值对移动到指定数据库</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EXISTS age <span class="comment"># 判断键是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line">127.0.0.1:6379&gt; EXISTS name</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[1]&gt; keys *</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">127.0.0.1:6379[1]&gt; del age <span class="comment"># 删除键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 删除个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE age 15 <span class="comment"># 设置键值对的过期时间</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 设置成功 开始计数</span></span><br><span class="line">127.0.0.1:6379&gt; ttl age <span class="comment"># 查看key的过期剩余时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2 <span class="comment"># -2 表示key过期，-1表示key未设置过期时间</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get age <span class="comment"># 过期的key 会被自动delete</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name <span class="comment"># 查看value的数据类型</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>关于<code>TTL</code>命令</p><p>Redis的key，通过TTL命令返回key的==过期时间==，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ul><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ul><p>更多命令学习：<a href="https://www.redis.net.cn/order/" target="_blank" rel="noopener">https://www.redis.net.cn/order/</a></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-wBVZtGVm-1597890996517)(狂神说 Redis.assets/image-20200813114228439.png)]</p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>普通的set、get直接略过。</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>APPEND key value</code></td><td>向指定的key的value后追加字符串</td><td>127.0.0.1:6379&gt; set msg hello OK 127.0.0.1:6379&gt; append msg “ world” (integer) 11 127.0.0.1:6379&gt; get msg “hello world”</td></tr><tr><td><code>DECR/INCR key</code></td><td>将指定key的value数值进行+1/-1(仅对于数字)</td><td>127.0.0.1:6379&gt; set age 20 OK 127.0.0.1:6379&gt; incr age (integer) 21 127.0.0.1:6379&gt; decr age (integer) 20</td></tr><tr><td><code>INCRBY/DECRBY key n</code></td><td>按指定的步长对数值进行加减</td><td>127.0.0.1:6379&gt; INCRBY age 5 (integer) 25 127.0.0.1:6379&gt; DECRBY age 10 (integer) 15</td></tr><tr><td><code>INCRBYFLOAT key n</code></td><td>为数值加上浮点型数值</td><td>127.0.0.1:6379&gt; INCRBYFLOAT age 5.2 “20.2”</td></tr><tr><td><code>STRLEN key</code></td><td>获取key保存值的字符串长度</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; STRLEN msg (integer) 11</td></tr><tr><td><code>GETRANGE key start end</code></td><td>按起止位置获取字符串（闭区间，起止位置都取）</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; GETRANGE msg 3 9 “lo worl”</td></tr><tr><td><code>SETRANGE key offset value</code></td><td>用指定的value 替换key中 offset开始的值</td><td>127.0.0.1:6379&gt; SETRANGE msg 2 hello (integer) 7 127.0.0.1:6379&gt; get msg “tehello”</td></tr><tr><td><code>GETSET key value</code></td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td><td>127.0.0.1:6379&gt; GETSET msg test “hello world”</td></tr><tr><td><code>SETNX key value</code></td><td>仅当key不存在时进行set</td><td>127.0.0.1:6379&gt; SETNX msg test (integer) 0 127.0.0.1:6379&gt; SETNX name sakura (integer) 1</td></tr><tr><td><code>SETEX key seconds value</code></td><td>set 键值对并设置过期时间</td><td>127.0.0.1:6379&gt; setex name 10 root OK 127.0.0.1:6379&gt; get name (nil)</td></tr><tr><td><code>MSET key1 value1 [key2 value2..]</code></td><td>批量set键值对</td><td>127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 OK</td></tr><tr><td><code>MSETNX key1 value1 [key2 value2..]</code></td><td>批量设置键值对，仅当参数中所有的key都不存在时执行</td><td>127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4 (integer) 0</td></tr><tr><td><code>MGET key1 [key2..]</code></td><td>批量获取多个key保存的值</td><td>127.0.0.1:6379&gt; MGET k1 k2 k3 1) “v1” 2) “v2” 3) “v3”</td></tr><tr><td><code>PSETEX key milliseconds value</code></td><td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td><td></td></tr><tr><td><code>getset key value</code></td><td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td><td></td></tr></tbody></table><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li>计数器</li><li>统计多单位的数量：uid:123666：follow 0</li><li>粉丝数</li><li>对象存储缓存</li></ul><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p></blockquote><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等<br><img src="https://img-blog.csdnimg.cn/20210124133604137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>LPUSH/RPUSH key value1[value2..]</code></td><td>从左边/右边向列表中PUSH值(一个或者多个)。</td></tr><tr><td><code>LRANGE key start end</code></td><td>获取list 起止元素==（索引从左往右 递增）==</td></tr><tr><td><code>LPUSHX/RPUSHX key value</code></td><td>向已存在的列名中push值（一个或者多个）</td></tr><tr><td>`LINSERT key BEFORE</td><td>AFTER pivot value`</td></tr><tr><td><code>LLEN key</code></td><td>查看列表长度</td></tr><tr><td><code>LINDEX key index</code></td><td>通过索引获取列表元素</td></tr><tr><td><code>LSET key index value</code></td><td>通过索引为元素设值</td></tr><tr><td><code>LPOP/RPOP key</code></td><td>从最左边/最右边移除值 并返回</td></tr><tr><td><code>RPOPLPUSH source destination</code></td><td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td></tr><tr><td><code>LTRIM key start end</code></td><td>通过下标截取指定范围内的列表</td></tr><tr><td><code>LREM key count value</code></td><td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td></tr><tr><td><code>BLPOP/BRPOP key1[key2] timout</code></td><td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>BRPOPLPUSH source destination timeout</code></td><td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">---------------------------LPUSH---RPUSH---LRANGE--------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k1 <span class="comment"># LPUSH mylist=&gt;&#123;1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH mylist k2 <span class="comment"># LPUSH mylist=&gt;&#123;2,1&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH mylist k3 <span class="comment"># RPUSH mylist=&gt;&#123;2,1,3&#125;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; get mylist <span class="comment"># 普通的get是无法获取list值的</span></span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 4 <span class="comment"># LRANGE 获取起止位置范围内的元素</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 2</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 1</span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1 <span class="comment"># 获取全部元素</span></span><br><span class="line">1) <span class="string">"k2"</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">3) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LPUSHX---RPUSHX-----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 <span class="comment"># list不存在 LPUSHX失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list v1 v2  </span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX mylist k4 k5 <span class="comment"># 向mylist中 左边 PUSH k4 k5</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"k1"</span></span><br><span class="line">5) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after k2 ins_key1 <span class="comment"># 在k2元素后 插入ins_key1</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"ins_key1"</span></span><br><span class="line">5) <span class="string">"k1"</span></span><br><span class="line">6) <span class="string">"k3"</span></span><br><span class="line">127.0.0.1:6379&gt; LLEN mylist <span class="comment"># 查看mylist的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 3 <span class="comment"># 获取下标为3的元素</span></span><br><span class="line"><span class="string">"ins_key1"</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX mylist 0</span><br><span class="line"><span class="string">"k5"</span></span><br><span class="line">127.0.0.1:6379&gt; LSET mylist 3 k6 <span class="comment"># 将下标3的元素 set值为k6</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k5"</span></span><br><span class="line">2) <span class="string">"k4"</span></span><br><span class="line">3) <span class="string">"k2"</span></span><br><span class="line">4) <span class="string">"k6"</span></span><br><span class="line">5) <span class="string">"k1"</span></span><br><span class="line">6) <span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------LPOP--RPOP--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LPOP mylist <span class="comment"># 左侧(头部)弹出</span></span><br><span class="line"><span class="string">"k5"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP mylist <span class="comment"># 右侧(尾部)弹出</span></span><br><span class="line"><span class="string">"k3"</span></span><br><span class="line"></span><br><span class="line">---------------------------RPOPLPUSH--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k6"</span></span><br><span class="line">4) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist newlist <span class="comment"># 将mylist的最后一个值(k1)弹出，加入到newlist的头部</span></span><br><span class="line"><span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1</span><br><span class="line">1) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">3) <span class="string">"k6"</span></span><br><span class="line"></span><br><span class="line">---------------------------LTRIM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 0 1 <span class="comment"># 截取mylist中的 0~1部分</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">"k4"</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始 mylist: k2,k2,k2,k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line">---------------------------LREM--------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist 3 k2 <span class="comment"># 从头部开始搜索 至多删除3个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; LREM mylist -2 k2 <span class="comment">#从尾部开始搜索 至多删除2个 k2</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 删除后：mylist: k2,k2,k2,k4,k2,k2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---------------------------BLPOP--BRPOP--------------------------</span><br><span class="line"></span><br><span class="line">mylist: k2,k2,k2,k4,k2,k2</span><br><span class="line">newlist: k1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30 <span class="comment"># 从newlist中弹出第一个值，mylist作为候选</span></span><br><span class="line">1) <span class="string">"newlist"</span> <span class="comment"># 弹出</span></span><br><span class="line">2) <span class="string">"k1"</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist mylist 30</span><br><span class="line">1) <span class="string">"mylist"</span> <span class="comment"># 由于newlist空了 从mylist中弹出</span></span><br><span class="line">2) <span class="string">"k2"</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30</span><br><span class="line">(30.10s) <span class="comment"># 超时了</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BLPOP newlist 30 <span class="comment"># 我们连接另一个客户端向newlist中push了test, 阻塞被解决。</span></span><br><span class="line">1) <span class="string">"newlist"</span></span><br><span class="line">2) <span class="string">"test"</span></span><br><span class="line">(12.54s)</span><br></pre></td></tr></table></figure><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li><strong>如果key不存在，则创建新的链表</strong></li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p><strong>应用：</strong></p><p><strong>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</strong></p><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><blockquote><p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>SADD key member1[member2..]</code></td><td>向集合中无序增加一个/多个成员</td></tr><tr><td><code>SCARD key</code></td><td>获取集合的成员数</td></tr><tr><td><code>SMEMBERS key</code></td><td>返回集合中所有的成员</td></tr><tr><td><code>SISMEMBER key member</code></td><td>查询member元素是否是集合的成员,结果是无序的</td></tr><tr><td><code>SRANDMEMBER key [count]</code></td><td>随机返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SPOP key [count]</code></td><td>随机移除并返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>SMOVE source destination member</code></td><td>将source集合的成员member移动到destination集合</td></tr><tr><td><code>SREM key member1[member2..]</code></td><td>移除集合中一个/多个成员</td></tr><tr><td><code>SDIFF key1[key2..]</code></td><td>返回所有集合的差集 key1- key2 - …</td></tr><tr><td><code>SDIFFSTORE destination key1[key2..]</code></td><td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td></tr><tr><td><code>SINTER key1 [key2..]</code></td><td>返回所有集合的交集</td></tr><tr><td><code>SINTERSTORE destination key1[key2..]</code></td><td>在SINTER的基础上，存储结果到集合中。覆盖</td></tr><tr><td><code>SUNION key1 [key2..]</code></td><td>返回所有集合的并集</td></tr><tr><td><code>SUNIONSTORE destination key1 [key2..]</code></td><td>在SUNION的基础上，存储结果到及和张。覆盖</td></tr><tr><td><code>SSCAN KEY [MATCH pattern] [COUNT count]</code></td><td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SADD myset m1 m2 m3 m4 <span class="comment"># 向myset中增加成员 m1~m4</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; SCARD myset <span class="comment"># 获取集合的成员数目</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers myset <span class="comment"># 获取集合中所有成员</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">4) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m5 <span class="comment"># 查询m5是否是myset的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不是，返回0</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m2</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 是，返回1</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset m3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">---------------------SRANDMEMBER--SPOP----------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 3 <span class="comment"># 随机返回3个成员</span></span><br><span class="line">1) <span class="string">"m2"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m4"</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset <span class="comment"># 随机返回1个成员</span></span><br><span class="line"><span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 2 <span class="comment"># 随机移除并返回2个成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m4"</span></span><br><span class="line"><span class="comment"># 将set还原到&#123;m1,m2,m3,m4&#125;</span></span><br><span class="line"></span><br><span class="line">---------------------SMOVE--SREM----------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset newset m3 <span class="comment"># 将myset中m3成员移动到newset集合</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m2"</span></span><br><span class="line">3) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">1) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; SREM newset m3 <span class="comment"># 从newset中移除m3元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS newset</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算</span></span><br><span class="line"><span class="comment"># setx=&gt;&#123;m1,m2,m4,m6&#125;, sety=&gt;&#123;m2,m5,m6&#125;, setz=&gt;&#123;m1,m3,m6&#125;</span></span><br><span class="line"></span><br><span class="line">-----------------------------SDIFF------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety setz <span class="comment"># 等价于setx-sety-setz</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF setx sety <span class="comment"># setx - sety</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m1"</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF sety setx <span class="comment"># sety - setx</span></span><br><span class="line">1) <span class="string">"m5"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------SINTER---------------------------------------</span><br><span class="line"><span class="comment"># 共同关注（交集）</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety setz <span class="comment"># 求 setx、sety、setx的交集</span></span><br><span class="line">1) <span class="string">"m6"</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER setx sety <span class="comment"># 求setx sety的交集</span></span><br><span class="line">1) <span class="string">"m2"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line"></span><br><span class="line">-------------------------SUNION---------------------------------------</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety setz <span class="comment"># setx sety setz的并集</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line">3) <span class="string">"m3"</span></span><br><span class="line">4) <span class="string">"m2"</span></span><br><span class="line">5) <span class="string">"m1"</span></span><br><span class="line">6) <span class="string">"m5"</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION setx sety <span class="comment"># setx sety 并集</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m6"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">4) <span class="string">"m1"</span></span><br><span class="line">5) <span class="string">"m5"</span></span><br></pre></td></tr></table></figure><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>HSET key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td></tr><tr><td><code>HMSET key field1 value1 [field2 value2..]</code></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td><code>HSETNX key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><code>HEXISTS key field</code></td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td><code>HGET key field value</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>HMGET key field1 [field2..]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>HGETALL key</code></td><td>获取在哈希表key 的所有字段和值</td></tr><tr><td><code>HKEYS key</code></td><td>获取哈希表key中所有的字段</td></tr><tr><td><code>HLEN key</code></td><td>获取哈希表中字段的数量</td></tr><tr><td><code>HVALS key</code></td><td>获取哈希表中所有值</td></tr><tr><td><code>HDEL key field1 [field2..]</code></td><td>删除哈希表key中一个/多个field字段</td></tr><tr><td><code>HINCRBY key field n</code></td><td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td></tr><tr><td><code>HINCRBYFLOAT key field n</code></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td></tr><tr><td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代哈希表中的键值对。</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">------------------------HSET--HMSET--HSETNX----------------</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name sakura <span class="comment"># 将studentx哈希表作为一个对象，设置name为sakura</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx name gyc <span class="comment"># 重复设置field进行覆盖，并返回0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HSET studentx age 20 <span class="comment"># 设置studentx的age为20</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HMSET studentx sex 1 tel 15623667886 <span class="comment"># 设置sex为1，tel为15623667886</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx name gyc <span class="comment"># HSETNX 设置已存在的field</span></span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 失败</span></span><br><span class="line">127.0.0.1:6379&gt; HSETNX studentx email 12345@qq.com</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 成功</span></span><br><span class="line"></span><br><span class="line">----------------------HEXISTS--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx name <span class="comment"># name字段在studentx中是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 存在</span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS studentx addr</span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 不存在</span></span><br><span class="line"></span><br><span class="line">-------------------HGET--HMGET--HGETALL-----------</span><br><span class="line">127.0.0.1:6379&gt; HGET studentx name <span class="comment"># 获取studentx中name字段的value</span></span><br><span class="line"><span class="string">"gyc"</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET studentx name age tel <span class="comment"># 获取studentx中name、age、tel字段的value</span></span><br><span class="line">1) <span class="string">"gyc"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"15623667886"</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL studentx <span class="comment"># 获取studentx中所有的field及其value</span></span><br><span class="line"> 1) <span class="string">"name"</span></span><br><span class="line"> 2) <span class="string">"gyc"</span></span><br><span class="line"> 3) <span class="string">"age"</span></span><br><span class="line"> 4) <span class="string">"20"</span></span><br><span class="line"> 5) <span class="string">"sex"</span></span><br><span class="line"> 6) <span class="string">"1"</span></span><br><span class="line"> 7) <span class="string">"tel"</span></span><br><span class="line"> 8) <span class="string">"15623667886"</span></span><br><span class="line"> 9) <span class="string">"email"</span></span><br><span class="line">10) <span class="string">"12345@qq.com"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------HKEYS--HLEN--HVALS--------------</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx <span class="comment"># 查看studentx中所有的field</span></span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">3) <span class="string">"sex"</span></span><br><span class="line">4) <span class="string">"tel"</span></span><br><span class="line">5) <span class="string">"email"</span></span><br><span class="line">127.0.0.1:6379&gt; HLEN studentx <span class="comment"># 查看studentx中的字段数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; HVALS studentx <span class="comment"># 查看studentx中所有的value</span></span><br><span class="line">1) <span class="string">"gyc"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"1"</span></span><br><span class="line">4) <span class="string">"15623667886"</span></span><br><span class="line">5) <span class="string">"12345@qq.com"</span></span><br><span class="line"></span><br><span class="line">-------------------------HDEL--------------------------</span><br><span class="line">127.0.0.1:6379&gt; HDEL studentx sex tel <span class="comment"># 删除studentx 中的sex、tel字段</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; HKEYS studentx</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br><span class="line">3) <span class="string">"email"</span></span><br><span class="line"></span><br><span class="line">-------------HINCRBY--HINCRBYFLOAT------------------------</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx age 1 <span class="comment"># studentx的age字段数值+1</span></span><br><span class="line">(<span class="built_in">integer</span>) 21</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY studentx name 1 <span class="comment"># 非整数字型字段不可用</span></span><br><span class="line">(error) ERR <span class="built_in">hash</span> value is not an <span class="built_in">integer</span></span><br><span class="line">127.0.0.1:6379&gt; HINCRBYFLOAT studentx weight 0.6 <span class="comment"># weight字段增加0.6</span></span><br><span class="line"><span class="string">"90.8"</span></span><br></pre></td></tr></table></figure><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！<strong>Hash更适合于对象的存储，Sring更加适合字符串存储！</strong></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>ZADD key score member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间score的成员数</td></tr><tr><td><code>ZINCRBY key n member</code></td><td>有序集合中对指定成员的分数加上增量 n</td></tr><tr><td><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><code>ZRANGE key start end</code></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><code>ZRANGEBYLEX key min max</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><code>ZRANGEBYSCORE key min max</code></td><td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td></tr><tr><td><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><code>ZREM key member1 [member2..]</code></td><td>移除有序集合中一个/多个成员</td></tr><tr><td><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><code>ZREVRANGE key start end</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><code>ZREVRANGEBYSCORRE key max min</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><code>ZREVRANGEBYLEX key max min</code></td><td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td></tr><tr><td><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td></tr><tr><td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">-------------------ZADD--ZCARD--ZCOUNT--------------</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 <span class="comment"># 向有序集合myzset中添加成员m1 score=1 以及成员m2 score=2..</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myzset <span class="comment"># 获取有序集合的成员数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 1 <span class="comment"># 获取score在 [0,1]区间的成员数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myzset 0 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line">----------------ZINCRBY--ZSCORE--------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 <span class="comment"># 将成员m2的score +5</span></span><br><span class="line"><span class="string">"7"</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m1 <span class="comment"># 获取成员m1的score</span></span><br><span class="line"><span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myzset m2</span><br><span class="line"><span class="string">"7"</span></span><br><span class="line"></span><br><span class="line">--------------ZRANK--ZRANGE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m1 <span class="comment"># 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 1 <span class="comment"># 获取索引在 0~1的成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myzset 0 -1 <span class="comment"># 获取全部成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#testset=&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0</span></span><br><span class="line">------------------ZRANGEBYLEX---------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + <span class="comment"># 返回所有成员</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">4) <span class="string">"apple"</span></span><br><span class="line">5) <span class="string">"back"</span></span><br><span class="line">6) <span class="string">"java"</span></span><br><span class="line">7) <span class="string">"redis"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 <span class="comment"># 分页 按索引显示查询结果的 0,1,2条记录</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 <span class="comment"># 显示 3,4,5条记录</span></span><br><span class="line">1) <span class="string">"apple"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple <span class="comment"># 显示 (-,apple] 区间内的成员</span></span><br><span class="line">1) <span class="string">"abc"</span></span><br><span class="line">2) <span class="string">"add"</span></span><br><span class="line">3) <span class="string">"amaze"</span></span><br><span class="line">4) <span class="string">"apple"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java <span class="comment"># 显示 [apple,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">"apple"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"java"</span></span><br><span class="line"></span><br><span class="line">-----------------------ZRANGEBYSCORE---------------------</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 <span class="comment"># 返回score在 [1,10]之间的的成员</span></span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 5</span><br><span class="line">1) <span class="string">"m1"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line"></span><br><span class="line">--------------------ZLEXCOUNT-----------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset - +</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREM testset abc <span class="comment"># 移除成员abc</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java <span class="comment"># 移除字典区间[apple,java]中的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 <span class="comment"># 移除排名0~1的所有成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 <span class="comment"># 移除score在 [0,3]的成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># testset=&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0</span></span><br><span class="line"><span class="comment"># myzset=&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;</span></span><br><span class="line">----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 <span class="comment"># 按score递减排序，然后按索引，返回结果的 0~3</span></span><br><span class="line">1) <span class="string">"m9"</span></span><br><span class="line">2) <span class="string">"m7"</span></span><br><span class="line">3) <span class="string">"m4"</span></span><br><span class="line">4) <span class="string">"m3"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 <span class="comment"># 返回排序结果的 索引的2~4</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 <span class="comment"># 按score递减顺序 返回集合中分数在[2,6]之间的成员</span></span><br><span class="line">1) <span class="string">"m4"</span></span><br><span class="line">2) <span class="string">"m3"</span></span><br><span class="line">3) <span class="string">"m2"</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add <span class="comment"># 按字典倒序 返回集合中(add,java]字典区间的成员</span></span><br><span class="line">1) <span class="string">"java"</span></span><br><span class="line">2) <span class="string">"back"</span></span><br><span class="line">3) <span class="string">"apple"</span></span><br><span class="line">4) <span class="string">"amaze"</span></span><br><span class="line"></span><br><span class="line">-------------------------ZREVRANK------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m7 <span class="comment"># 按score递减顺序，返回成员m7索引</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myzset m2</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mathscore=&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩</span></span><br><span class="line"><span class="comment"># enscore=&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩</span></span><br><span class="line">-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------</span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore <span class="comment"># 将mathscore enscore进行合并 结果存放到sumscore</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores <span class="comment"># 合并后的score是之前集合中所有score的和</span></span><br><span class="line">1) <span class="string">"xm"</span></span><br><span class="line">2) <span class="string">"160"</span></span><br><span class="line">3) <span class="string">"xg"</span></span><br><span class="line">4) <span class="string">"177"</span></span><br><span class="line">5) <span class="string">"xh"</span></span><br><span class="line">6) <span class="string">"188"</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN <span class="comment"># 取两个集合的成员score最小值作为结果的</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores</span><br><span class="line">1) <span class="string">"xm"</span></span><br><span class="line">2) <span class="string">"70"</span></span><br><span class="line">3) <span class="string">"xg"</span></span><br><span class="line">4) <span class="string">"87"</span></span><br><span class="line">5) <span class="string">"xh"</span></span><br><span class="line">6) <span class="string">"93"</span></span><br></pre></td></tr></table></figure><p>应用案例：</p><ul><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ul><h2 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h2><h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial(地理位置)"></a>Geospatial(地理位置)</h3><blockquote><p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td><td>将具体经纬度的坐标存入一个有序集合</td></tr><tr><td><code>geopos key member [member..]</code></td><td>获取集合中的一个/多个成员坐标</td></tr><tr><td><code>geodist key member1 member2 [unit]</code></td><td>返回两个给定位置之间的距离。默认以米作为单位。</td></tr><tr><td>`georadius key longitude latitude radius m</td><td>km</td></tr><tr><td><code>GEORADIUSBYMEMBER key member radius...</code></td><td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td></tr><tr><td><code>geohash key member1 [member2..]</code></td><td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td></tr></tbody></table><p><strong>有效经纬度</strong></p><blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p><strong>关于GEORADIUS的参数</strong></p><blockquote><p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">----------------georadius---------------------</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 120 30 500 km withcoord withdist <span class="comment"># 查询经纬度(120,30)坐标500km半径内的成员</span></span><br><span class="line">1) 1) <span class="string">"hangzhou"</span></span><br><span class="line">   2) <span class="string">"29.4151"</span></span><br><span class="line">   3) 1) <span class="string">"120.20000249147415"</span></span><br><span class="line">      2) <span class="string">"30.199999888333501"</span></span><br><span class="line">2) 1) <span class="string">"shanghai"</span></span><br><span class="line">   2) <span class="string">"205.3611"</span></span><br><span class="line">   3) 1) <span class="string">"121.40000134706497"</span></span><br><span class="line">      2) <span class="string">"31.400000253193539"</span></span><br><span class="line">     </span><br><span class="line">------------geohash---------------------------</span><br><span class="line">127.0.0.1:6379&gt; geohash china:city yichang shanghai <span class="comment"># 获取成员经纬坐标的geohash表示</span></span><br><span class="line">1) <span class="string">"wmrjwbr5250"</span></span><br><span class="line">2) <span class="string">"wtw6ds0y300"</span></span><br></pre></td></tr></table></figure><h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>数据集中不重复的元素的个数。</p></blockquote><p><strong>应用场景：</strong></p><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><blockquote><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PFADD key element1 [elememt2..]</code></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><code>PFCOUNT key [key]</code></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">----------PFADD--PFCOUNT---------------------</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemx a b c d e f g h i j k <span class="comment"># 添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> myelemx <span class="comment"># hyperloglog底层使用String</span></span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemx <span class="comment"># 估算myelemx的基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; PFADD myelemy i j k z m c b v p q s</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemy</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line">----------------PFMERGE-----------------------</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE myelemz myelemx myelemy <span class="comment"># 合并myelemx和myelemy 成为myelemz</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT myelemz <span class="comment"># 估算基数</span></span><br><span class="line">(<span class="built_in">integer</span>) 17</span><br></pre></td></tr></table></figure><p>如果允许容错，那么一定可以使用Hyperloglog !</p><p>如果不允许容错，就使用set或者自己的数据类型即可 ！</p><h3 id="BitMaps-位图"><a href="#BitMaps-位图" class="headerlink" title="BitMaps(位图)"></a>BitMaps(位图)</h3><blockquote><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p></blockquote><p><strong>应用场景</strong></p><p>签到统计、状态统计</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>setbit key offset value</code></td><td>为指定key的offset位设置值</td></tr><tr><td><code>getbit key offset</code></td><td>获取offset位的值</td></tr><tr><td><code>bitcount key [start end]</code></td><td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td></tr><tr><td><code>bitop operration destkey key[key..]</code></td><td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td></tr><tr><td><code>BITPOS key bit [start] [end]</code></td><td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">------------setbit--getbit--------------</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1 <span class="comment"># 设置sign的第0位为 1 </span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 1 <span class="comment"># 设置sign的第2位为 1  不设置默认 是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> sign</span><br><span class="line">string</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getbit sign 2 <span class="comment"># 获取第2位的数值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 4 <span class="comment"># 未设置默认是0</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">-----------bitcount----------------------------</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign <span class="comment"># 统计sign中为1的位数</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><p><strong>bitmaps的底层</strong></p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-9PlszjhS-1597890996519)(D:\我\MyBlog\狂神说 Redis.assets\image-20200803234336175.png)]</p><p>这样设置以后你能get到的值是：<strong>\xA2\x80</strong>，所以bitmaps是一串从左到右的二进制串</p><h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性</p><blockquote><p>Redis事务本质：一组命令的集合。</p><p>—————– 队列 set set set 执行 ——————-</p><p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p><ul><li>一次性</li><li>顺序性</li><li>排他性</li></ul><hr><ol><li>Redis事务没有隔离级别的概念</li><li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li></ol></blockquote><h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul><li>开启事务（<code>multi</code>）</li><li>命令入队</li><li>执行事务（<code>exec</code>）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1 <span class="comment"># 命令入队</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2 <span class="comment"># ..</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 事务执行</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">4) OK</span><br><span class="line">5) 1) <span class="string">"k3"</span></span><br><span class="line">   2) <span class="string">"k2"</span></span><br><span class="line">   3) <span class="string">"k1"</span></span><br></pre></td></tr></table></figure><p><strong>取消事务(<code>discurd</code>)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD <span class="comment"># 放弃事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXEC </span><br><span class="line">(error) ERR EXEC without MULTI <span class="comment"># 当前未开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 <span class="comment"># 被放弃事务中命令并未执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote><p>代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; error k1 <span class="comment"># 这是一条语法错误命令</span></span><br><span class="line">(error) ERR unknown <span class="built_in">command</span> `error`, with args beginning with: `k1`, <span class="comment"># 会报错但是不影响后续命令入队 </span></span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors. <span class="comment"># 执行报错</span></span><br><span class="line">127.0.0.1:6379&gt; get k1 </span><br><span class="line">(nil) <span class="comment"># 其他命令并没有被执行</span></span><br></pre></td></tr></table></figure><blockquote><p>代码逻辑错误 (运行时异常) *<em>其他命令可以正常执行 *</em> &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCR k1 <span class="comment"># 这条命令逻辑错误（对字符串进行增量）</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) (error) ERR value is not an <span class="built_in">integer</span> or out of range <span class="comment"># 运行时报错</span></span><br><span class="line">4) <span class="string">"v2"</span> <span class="comment"># 其他命令正常执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。</span></span><br><span class="line"><span class="comment"># 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。</span></span><br></pre></td></tr></table></figure><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100 <span class="comment"># 设置余额:100</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> use 0 <span class="comment"># 支出使用:0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># 监视money (上锁)</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exec</span> <span class="comment"># 监视值没有被中途修改，事务正常执行</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p></blockquote><p>我们启动另外一个客户端模拟插队线程。</p><p>线程1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money <span class="comment"># money上锁</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY use 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; <span class="comment"># 此时事务并没有执行</span></span><br></pre></td></tr></table></figure><p>模拟线程插队，线程2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INCRBY money 500 <span class="comment"># 修改了线程一中监视的money</span></span><br><span class="line">(<span class="built_in">integer</span>) 600</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>回到线程1，执行事务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXEC <span class="comment"># 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败</span></span><br><span class="line">(nil) <span class="comment"># 没有结果，说明事务执行失败</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get money <span class="comment"># 线程2 修改生效</span></span><br><span class="line"><span class="string">"600"</span></span><br><span class="line">127.0.0.1:6379&gt; get use <span class="comment"># 线程1事务执行失败，数值没有被修改</span></span><br><span class="line"><span class="string">"0"</span></span><br></pre></td></tr></table></figure><blockquote><p>解锁获取最新值，然后再加锁进行事务。</p><p><code>unwatch</code>进行解锁。</p></blockquote><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><p>SpringBoot 操作数据:spring-data jpa jdbc mongodb redis!<br>SpringData 也是和 SpringBoot 齐名的项目!<br>说明: 在 SpringBoot2.x 之后，原来使用的jedis 被替换为了 lettuce?<br>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接 池! 更像 BIO 模式<br>lettuce : 采用netty，实例可以再多个线程中进行共享，不存在线程不安全的情况!可以减少线程数据 了，更像 NIO 模式<br>源码分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>) <span class="comment">// 我们可以自己定义一个 redisTemplate来替换这个默认的!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化!</span></span><br><span class="line"><span class="comment">// 两个泛型都是 Object, Object 的类型，我们后使用需要强制转换 &lt;String, Object&gt; RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;(); template.setConnectionFactory(redisConnectionFactory);</span></span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">// 由于 String 是redis中最常使用的类型，所以说单独提出来了一 个bean!</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(); template.setConnectionFactory(redisConnectionFactory); <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合：</p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 配置redis </span><br><span class="line">spring.redis.host&#x3D;127.0.0.1 </span><br><span class="line">spring.redis.port&#x3D;6379</span><br></pre></td></tr></table></figure></li><li>测试!<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis02SpringbootApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是一样的</span></span><br><span class="line"><span class="comment">// opsForValue 操作字符串 类似String</span></span><br><span class="line"><span class="comment">// opsForList 操作List 类似List // opsForSet</span></span><br><span class="line"><span class="comment">// opsForHash</span></span><br><span class="line"><span class="comment">// opsForZSet</span></span><br><span class="line"><span class="comment">// opsForGeo</span></span><br><span class="line"><span class="comment">// opsForHyperLogLog</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//CRUD</span></span><br><span class="line"><span class="comment">//除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的</span></span><br><span class="line"><span class="comment">//获取redis的连接对象</span></span><br><span class="line"><span class="comment">//RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">// connection.flushDb();</span></span><br><span class="line"><span class="comment">// connection.flushAll();</span></span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"mykey"</span>,<span class="string">"关注狂神说公众号"</span>); </span><br><span class="line">System.out.println(redisTemplate.opsForValue().get(<span class="string">"mykey"</span>));</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210124135025661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>关于对象的保存:所有的对象需要序列化<br><img src="https://img-blog.csdnimg.cn/20210124135106502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写自己的RedisTemplate：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这是我给大家写好的一个固定模板，大家在企业中，拿去就可以直接使用! // 自己定义了一个 RedisTemplate</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory</span></span></span><br><span class="line"><span class="function"><span class="params">factory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,</span><br><span class="line">Object&gt;();</span><br><span class="line">template.setConnectionFactory(factory);</span><br><span class="line"><span class="comment">// Json序列化配置</span></span><br><span class="line">Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); </span><br><span class="line">om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"><span class="comment">// String 的序列化</span></span><br><span class="line">StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span></span><br><span class="line">StringRedisSerializer();</span><br><span class="line"><span class="comment">// key采用String的序列化方式 template.setKeySerializer(stringRedisSerializer);</span></span><br><span class="line"><span class="comment">// hash的key也采用String的序列化方式 template.setHashKeySerializer(stringRedisSerializer);</span></span><br><span class="line"><span class="comment">// value序列化方式采用jackson template.setValueSerializer(jackson2JsonRedisSerializer);</span></span><br><span class="line"><span class="comment">// hash的value序列化方式采用jackson template.setHashValueSerializer(jackson2JsonRedisSerializer); template.afterPropertiesSet();</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h2><blockquote><p>容量单位不区分大小写，G和GB有区别<br><img src="https://img-blog.csdnimg.cn/20210124135434997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以使用 include 组合多个配置问题<br><img src="https://img-blog.csdnimg.cn/20210124135450341.png" alt="在这里插入图片描述"><br>网络配置<br><img src="https://img-blog.csdnimg.cn/20210124135512211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>日志输出级别<br><img src="https://img-blog.csdnimg.cn/20210124135532626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通用CENERAL</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes # 以守护进程的方式运行，默认是 no，我们需要自己开启为yes!</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6379.pid # 如果以后台的方式运行，我们就需要指定一个 pid 文件!</span><br><span class="line"># 日志</span><br><span class="line"># Specify the server verbosity level. # This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development&#x2F;testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably) 生产环境 # warning (only very important &#x2F; critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&quot; # 日志的文件位置名</span><br><span class="line">databases 16 # 数据库的数量，默认是 16 个数据库</span><br><span class="line">always-show-logo yes # 是否总是显示LOGO</span><br></pre></td></tr></table></figure><p>快照:</p><p>持久化， 在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb. aof redis 是内存数据库，如果没有持久化，那么数据断电及失!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 如果900s内，如果至少有一个1 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 900 1</span><br><span class="line"># 如果300s内，如果至少10 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 300 10</span><br><span class="line"># 如果60s内，如果至少10000 key进行了修改，我们及进行持久化操作 </span><br><span class="line">save 60 10000</span><br><span class="line"># 我们之后学习持久化，会自己定义这个测试!</span><br><span class="line">stop-writes-on-bgsave-error yes </span><br><span class="line"># 持久化如果出错，是否还需要继续工作!</span><br><span class="line"> rdbcompression yes </span><br><span class="line"># 是否压缩 rdb 文件，需要消耗一些cpu资源!</span><br><span class="line">  rdbchecksum yes</span><br><span class="line"># 保存rdb文件的时候，进行错误的检查校验!</span><br><span class="line">dir .&#x2F;     # rdb 文件保存的目录!</span><br></pre></td></tr></table></figure><p>SECURITY 安全:<br>可以在这里设置redis的密码，默认是没有密码!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass # 获取redis的密码</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br><span class="line">127.0.0.1:6379&gt; config set requirepass &quot;123456&quot; # 设置redis的密码 OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass # 发现所有的命令都没有权限了 (error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 # 使用密码进行登录!</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;123456&quot;</span><br></pre></td></tr></table></figure><p>限制 CLIENTS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000 # 设置能连接上redis的最大客户端的数量</span><br><span class="line">maxmemory &lt;bytes&gt; # redis 配置最大的内存容量</span><br><span class="line">maxmemory-policy noeviction # 内存到达上限之后的处理策略 </span><br><span class="line">1、volatile-lru:只对设置了过期时间的key进行LRU(默认值) </span><br><span class="line">2、allkeys-lru : 删除lru算法的key </span><br><span class="line">3、volatile-random:随机删除即将过期key </span><br><span class="line">4、allkeys-random:随机删除</span><br><span class="line">5、volatile-ttl : 删除即将过期的 </span><br><span class="line">6、noeviction : 永不过期，返回错误</span><br></pre></td></tr></table></figure><p>APPEND ONLY 模式 aof配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下， rdb完全够用!</span><br><span class="line">appendfilename &quot;appendonly.aof&quot; # 持久化的文件的名字</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"># 每次修改都会 sync。消耗性能</span><br><span class="line"># 每秒执行一次 sync，可能会丢失这1s的数据!</span><br><span class="line"># 不执行 sync，这个时候操作系统自己同步数据，速度最快!</span><br></pre></td></tr></table></figure><h2 id="持久化—RDB"><a href="#持久化—RDB" class="headerlink" title="持久化—RDB"></a>持久化—RDB</h2><p>RDB：Redis Databases</p><p>持久化规则<br>由于Redis是基于内存的数据库，需要将数据由内存持久化到文件中</p><p>持久化方式：</p><ul><li>RDB</li><li>AOF</li></ul><h3 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h3><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；<br><img src="https://img-blog.csdnimg.cn/20210124140255237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><hr><p>在进行 <strong><code>RDB</code></strong> 的时候，<strong><code>redis</code></strong> 的主线程是不会做 <strong><code>io</code></strong> 操作的，主线程会 <strong><code>fork</code></strong> 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)<br><img src="https://img-blog.csdnimg.cn/20210124140426860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><hr><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210124140533225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；</p><h4 id="触发持久化规则"><a href="#触发持久化规则" class="headerlink" title="触发持久化规则"></a>触发持久化规则</h4><p>满足配置条件中的触发条件 ；</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。<br><img src="https://img-blog.csdnimg.cn/20210124140607446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124140623863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；<br><img src="https://img-blog.csdnimg.cn/20210124140645467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>bgsave和save对比</strong></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞？</td><td>是</td><td>是（阻塞发生在fock()，通常非常快）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外的内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fock子进程，消耗内存</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点：</strong></p><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h2 id="十一、持久化AOF"><a href="#十一、持久化AOF" class="headerlink" title="十一、持久化AOF"></a>十一、持久化AOF</h2><p><strong>Append Only File</strong></p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Z8wr9lBW-1597890996525)(狂神说 Redis.assets/image-20200818123711375.png)]</p><blockquote><p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><h3 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h3><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>如果要使用AOF，需要修改配置文件：<br><img src="https://img-blog.csdnimg.cn/20210124140719611.png" alt="在这里插入图片描述"><br><code>appendonly no yes</code>则表示启用AOF</p><p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p><p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p><blockquote><p>优点和缺点</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes  <span class="comment"># 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用</span></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always # 每次修改都会sync 消耗性能</span></span><br><span class="line">appendfsync everysec <span class="comment"># 每秒执行一次 sync 可能会丢失这一秒的数据</span></span><br><span class="line"><span class="comment"># appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p><strong>缺点</strong></p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h2 id="十二、RDB和AOP选择"><a href="#十二、RDB和AOP选择" class="headerlink" title="十二、RDB和AOP选择"></a>十二、RDB和AOP选择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr></tbody></table><h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><h2 id="十三、Redis发布与订阅"><a href="#十三、Redis发布与订阅" class="headerlink" title="十三、Redis发布与订阅"></a>十三、Redis发布与订阅</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p><img src="https://img-blog.csdnimg.cn/20210124140904442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的 关系:<br><img src="https://img-blog.csdnimg.cn/20210124140944765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户 端:<br><img src="https://img-blog.csdnimg.cn/20210124141016130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>命令：<br>这些命令被广泛用于构建即时通信应用，比如网络聊天室(chatroom)和实时广播、实时提醒等。<br><img src="https://img-blog.csdnimg.cn/20210124141049171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试：<br>订阅端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE kuangshenshuo # 订阅一个频道 kuangshenshuo Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;kuangshenshuo&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line"># 等待读取推送的信息</span><br><span class="line">1) &quot;message&quot; # 消息</span><br><span class="line">2) &quot;kuangshenshuo&quot; # 那个频道的消息 3) &quot;hello,kuangshen&quot; # 消息的具体内容</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;kuangshenshuo&quot;</span><br><span class="line">3) &quot;hello,redis&quot;</span><br></pre></td></tr></table></figure><p>发送端:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH kuangshenshuo &quot;hello,kuangshen&quot; # 发布者发布消息到频道! (integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH kuangshenshuo &quot;hello,redis&quot; # 发布者发布消息到频道! (integer) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>原理:<br>Redis是使用C实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍 此加深对 Redis 的理解。<br>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。<br>微信:<br>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道!， 而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键， 就是将客户端添加到给定 channel 的订阅链表中。<br><img src="https://img-blog.csdnimg.cn/20210124141242791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。<br><img src="https://img-blog.csdnimg.cn/20210124141419910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>Pub/Sub 从字面上理解就是发布(Publish)与订阅(Subscribe)，在Redis中，你可以设定对某一个 key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应 的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。<br>使用场景:<br>1、实时消息系统!<br>2、事实聊天!(频道当做聊天室，将信息回显给所有人即可!)<br>3、订阅，关注系统都是可以的!<br>稍微复杂的场景我们就会使用 消息中间件 MQ ()</p><h2 id="十四、Redis主从复制"><a href="#十四、Redis主从复制" class="headerlink" title="十四、Redis主从复制"></a>十四、Redis主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h3 id="为什么使用集群"><a href="#为什么使用集群" class="headerlink" title="为什么使用集群"></a>为什么使用集群</h3><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们在讲解配置文件的时候，注意到有一个<code>replication</code>模块 (见Redis.conf中第8条)</p><p>查看当前库的信息：<code>info replication</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master <span class="comment"># 角色</span></span><br><span class="line">connected_slaves:0 <span class="comment"># 从机数量</span></span><br><span class="line">master_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcff</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>既然需要启动多个服务，就需要多个配置文件。每个配置文件对应修改以下信息：</p><ul><li>端口号</li><li>pid文件名</li><li>日志文件名</li><li>rdb文件名</li></ul><p>启动单机多服务集群：<br><img src="https://img-blog.csdnimg.cn/20210124141550717.png" alt="在这里插入图片描述"></p><h3 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h3><p>==默认情况下，每台Redis服务器都是主节点；==我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用<code>SLAVEOF host port</code>就可以为从机配置主机了。<br><img src="https://img-blog.csdnimg.cn/20210124141617285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后主机上也能看到从机的状态：<br><img src="https://img-blog.csdnimg.cn/20210124141634331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们这里是使用命令搭建，是暂时的，==真实开发中应该在从机的配置文件中进行配置，==这样的话是永久的。<br><img src="https://img-blog.csdnimg.cn/20210124141657721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ol><li><p>从机只能读，不能写，主机可读可写但是多用于写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 127.0.0.1:6381&gt; <span class="built_in">set</span> name sakura <span class="comment"># 从机6381写入失败</span></span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only replica.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; set name sakura # 从机6380写入失败</span></span><br><span class="line"><span class="string">(error) READONLY You can'</span>t write against a <span class="built_in">read</span> only replica.</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name sakura</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">"sakura"</span></span><br></pre></td></tr></table></figure></li><li><p>当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p></li><li><p>当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p></li><li><p>第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令<code>slaveof no one</code>,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul></li></ol><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大呢？手动！</p></blockquote><p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么久重新连接！</p><h2 id="十五、哨兵模式"><a href="#十五、哨兵模式" class="headerlink" title="十五、哨兵模式"></a>十五、哨兵模式</h2><p>(自动选举老大的模式)</p><p>更多信息参考博客：<a href="https://www.jianshu.com/p/06ab9daf921d" target="_blank" rel="noopener">https://www.jianshu.com/p/06ab9daf921d</a></p><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>概述:<br>主从切换技术的方法是:当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工 干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑 哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵) 架构来解决这个问题。<br>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。 哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独<br>立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。<br><img src="https://img-blog.csdnimg.cn/20210124141957325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里的哨兵有两个作用</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。 </li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服 务器，修改配置文件，让它们切换主机。</li></ul><p>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。 各个哨兵之间还会进行监控，这样就形成了多哨兵模式。<br><img src="https://img-blog.csdnimg.cn/20210124142056745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认 为主服务器不可用，这个现象成为主观下线。当后面的哨兵也检测到主服务器不可用，并且数量达到一 定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。 切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为 客观下线。<br>测试!<br>我们目前的状态是 一主二从! 1、配置哨兵配置文件 sentinel.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sentinel monitor 被监控的名称 host port 1 </span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p> 后面的这个数字1，代表主机挂了，slave投票看让谁接替成为主机，票数最多的，就会成为主机!</p><p> 2、启动哨兵!<br> <img src="https://img-blog.csdnimg.cn/20210124142300348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210124142312270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果Master 节点断开了，这个时候就会从从机中随机选择一个服务器! (这里面有一个投票算法!)<br><img src="https://img-blog.csdnimg.cn/20210124142333889.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>哨兵日志!<br><img src="https://img-blog.csdnimg.cn/20210124142353788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则!</p><p>哨兵模式:<br>优点:<br>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有<br>2、 主从可以切换，故障可以转移，系统的可用性就会更好<br>3、哨兵模式就是主从模式的升级，手动到自动，更加健壮!<br>缺点:<br>1、Redis 不好啊在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦! 2、实现哨兵模式的配置其实是很麻烦的，里面有很多选择!</p><p>哨兵模式的全部配置!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379</span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel的工作目录</span><br><span class="line">dir &#x2F;tmp</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span><br><span class="line"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。  </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="line"># 默认三分钟</span><br><span class="line"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"># SCRIPTS EXECUTION</span><br><span class="line"> </span><br><span class="line">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><span class="line">#对于脚本的运行结果有以下规则：</span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="line">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><span class="line"> </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><br><span class="line">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="line">#一个是事件的类型，</span><br><span class="line">#一个是事件的描述。</span><br><span class="line">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="line">#通知脚本</span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">  sentinel notification-script mymaster &#x2F;var&#x2F;redis&#x2F;notify.sh</span><br><span class="line"> </span><br><span class="line"># 客户端重新配置主节点参数脚本</span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><span class="line"># 以下参数将会在调用脚本时传给脚本:</span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="line"># 目前&lt;state&gt;总是“failover”,</span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">sentinel client-reconfig-script mymaster &#x2F;var&#x2F;redis&#x2F;reconfig.sh</span><br></pre></td></tr></table></figure><h2 id="十六、缓存穿透与雪崩"><a href="#十六、缓存穿透与雪崩" class="headerlink" title="十六、缓存穿透与雪崩"></a>十六、缓存穿透与雪崩</h2><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote><p>概念</p></blockquote><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。<br><img src="https://img-blog.csdnimg.cn/20210124143010474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。<br><img src="https://img-blog.csdnimg.cn/20210124143032543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><blockquote><p>概念</p></blockquote><p> 相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><blockquote><p>解决方案</p></blockquote><ol><li><p><strong>设置热点数据永不过期</strong></p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p></li><li><p><strong>加互斥锁(分布式锁)</strong></p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。<br><img src="https://img-blog.csdnimg.cn/2021012414305256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>解决方案</p></blockquote><ul><li><p>redis高可用</p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p></li><li><p>限流降级</p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热</p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Springboot </tag>
            
            <tag> Redis </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门+进阶总结</title>
      <link href="2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/"/>
      <url>2020/12/09/Docker%E5%85%A5%E9%97%A8-%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文大量参考b站kuangshen的Docker视频</p><h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     # 显示docker的版本信息</span><br><span class="line">docker info        # 显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help  # 帮助命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/build/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        5 months ago        13.3kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像标签</span><br><span class="line">IMAGE ID    镜像id</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             # 列出所有镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像id</span><br></pre></td></tr></table></figure><p><strong>docker search 搜索镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb                           MariaDB is a community-developed fork of MyS…   3490                [OK]                </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可选项，通过收藏来过滤</span></span><br><span class="line">--filter=STARS=3000  #搜索出来的镜像就是STARS大于3000的</span><br><span class="line">[root@localhost /]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mysql               MySQL is a widely used, open-source relation…   9604                [OK]                </span><br><span class="line">mariadb             MariaDB is a community-developed fork of MyS…   3490                [OK]</span><br></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@localhost /]# docker pull mysql</span><br><span class="line">Using default tag: latest    # 如果不写 tag,默认就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Pull complete  # 分层下载，docker image的核心 联合文件系统</span><br><span class="line">d51ce1c2e575: Pull complete </span><br><span class="line">c2344adc4858: Pull complete </span><br><span class="line">fcf3ceff18fc: Pull complete </span><br><span class="line">16da0c38dc5b: Pull complete </span><br><span class="line">b905d1797e97: Pull complete </span><br><span class="line">4b50d1c6b05c: Pull complete </span><br><span class="line">c75914a65ca2: Pull complete </span><br><span class="line">1ae8042bdd09: Pull complete </span><br><span class="line">453ac13c00a3: Pull complete </span><br><span class="line">9e680cd72f08: Pull complete </span><br><span class="line">a6b5dc864b6c: Pull complete </span><br><span class="line">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  # 真实地址</span><br><span class="line"></span><br><span class="line">docker pull mysql 等价于: docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@localhost /]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">8559a31e96f4: Already exists   # 联合文件系统的好处：上面下载过的MySQL与5.7版本的MySQL有相同的文件时不需要重复下载</span><br><span class="line">d51ce1c2e575: Already exists </span><br><span class="line">c2344adc4858: Already exists </span><br><span class="line">fcf3ceff18fc: Already exists </span><br><span class="line">16da0c38dc5b: Already exists </span><br><span class="line">b905d1797e97: Already exists </span><br><span class="line">4b50d1c6b05c: Already exists </span><br><span class="line">d85174a87144: Pull complete </span><br><span class="line">a4ad33703fa8: Pull complete </span><br><span class="line">f7a5433ce20d: Pull complete </span><br><span class="line">3dcd2a278b4a: Pull complete </span><br><span class="line">Digest: sha256:32f9d9a069f7a735e28fd44ea944d53c61f990ba71460c5c183e610854ca4854</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-O5oXLHZ6-1607516885224)(Docker%E6%A6%82%E8%BF%B0(1)].assets%5Cimage-20200610165130055.png)</p><p><strong>docker rmi 删除镜像</strong></p><p>rm——remove i——images</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker rmi -f 镜像id   #删除指定镜像</span><br><span class="line">[root@localhost /]# docker rmi -f 镜像id 镜像id 镜像id     #删除多个镜像</span><br><span class="line">[root@localhost /]# docker rmi -f $(docker images -aq)     #删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：有了镜像才可以创建容器，linux,下载一个centos镜像来学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name="Name"容器名字 tomcat01 tomcat02 ，用来区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             使用交互方式运行，进入容器查看内容</span><br><span class="line">-p              指定容器的端口 -p 8080:80</span><br><span class="line">-p  ip:主机(即宿主机)端口：容器端口</span><br><span class="line">-p  主机端口：容器端口  #这种方式常用</span><br><span class="line">-p  容器端口</span><br><span class="line">容器端口P</span><br><span class="line">-P              随机指定端口(大写P)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@localhost /]# docker run -it centos /bin/bash </span><br><span class="line">[root@8b4c74381205 /]# ls     #查看容器内的centos,基础版本，很多命令都是不完善的！</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@8b4c74381205 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost /]# ls</span><br><span class="line">123  bin   dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">222  boot  etc  lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></table></figure><p><strong>列出所有运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker ps 命令</span></span><br><span class="line">(不加） # 列出当前正在运行的容器</span><br><span class="line">-a     # 列出当前正在运行的容器 + 带出历史运行过的容器</span><br><span class="line">-n=?   # 显示最近创建的容器</span><br><span class="line">-q    # 只显示当前容器的编号</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                          PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         4 minutes ago       Exited (0) About a minute ago                       epic_wilson</span><br><span class="line">fb87667bbc19        bf756fb1ae65        "/hello"            2 hours ago         Exited (0) 2 hours ago                              awesome_banach</span><br><span class="line">[root@localhost /]# docker ps -a -n=1</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">8b4c74381205        centos              "/bin/bash"         9 minutes ago       Exited (0) 6 minutes ago                       epic_wilson</span><br><span class="line">[root@localhost /]# docker ps -aq</span><br><span class="line">8b4c74381205</span><br><span class="line">fb87667bbc19</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit   # 直接退出容器</span><br><span class="line">Ctrl + p + q  # 容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id   # 删除指定容器，不能删除正在运行的容器，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)    # 删除所有容器 </span><br><span class="line">docker ps -a -q|xargs docker rm  # 删除所有容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id     # 启动容器</span><br><span class="line">docker restart 容器id   # 重启容器</span><br><span class="line">docker stop 容器id      # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id      # 强制停止当前正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]# docker run -d centos</span><br><span class="line">e9d60f206fa19963203db6c42c2f83c5120eb90eeee2b7ba9fdc4589370fd6b6</span><br><span class="line">[root@localhost /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps,发现 centos 停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx,容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 数字 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示日志</span></span><br><span class="line">-tf # 显示日志</span><br><span class="line">--tail  # 要显示的日志条数</span><br><span class="line">[root@localhost /]# docker logs -tf --tail 10 ce989f90023d</span><br></pre></td></tr></table></figure><p><strong>查看容器中进程信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker top 容器id</span></span><br><span class="line">[root@localhost /]# docker top ce989f90023d</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME     </span><br><span class="line">root                12249               12232               0                   22:44               pts/0               00:00:00</span><br></pre></td></tr></table></figure><p><strong>查看镜像的元数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker inspect ce989f90023d</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244",</span><br><span class="line">        "Created": "2020-06-10T14:44:45.025360147Z",</span><br><span class="line">        "Path": "/bin/bash",</span><br><span class="line">        "Args": [],</span><br><span class="line">        "State": &#123;</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 12249,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2020-06-10T14:44:45.770227584Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244/ce989f90023dedc0b3f39c057b91f5c0b17180b3aef7aea0df8c93731e724244-json.log",</span><br><span class="line">        "Name": "/nifty_johnson",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;&#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Capabilities": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641-init/diff:/var/lib/docker/overlay2/d4cd3bedb1e7340e62bb292c1e0d5ae37b1d1689ffc1640da67b2a8325facc21/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/bce8b2400427de29dd406d54ec08b3c07dc95530e80d37977a156ca971b37641/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "ce989f90023d",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": true,</span><br><span class="line">            "AttachStdout": true,</span><br><span class="line">            "AttachStderr": true,</span><br><span class="line">            "Tty": true,</span><br><span class="line">            "OpenStdin": true,</span><br><span class="line">            "StdinOnce": true,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/bash"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "org.label-schema.build-date": "20200114",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS",</span><br><span class="line">                "org.opencontainers.image.created": "2020-01-14 00:00:00-08:00",</span><br><span class="line">                "org.opencontainers.image.licenses": "GPL-2.0-only",</span><br><span class="line">                "org.opencontainers.image.title": "CentOS Base Image",</span><br><span class="line">                "org.opencontainers.image.vendor": "CentOS"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "74d140bbc60432c5fdce865fa48f78c1138923dd292e708a25c4de17de812d56",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/74d140bbc604",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.3",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "58fd9703e96d12128c30f244be3205e3fe31fc7d1fb7fffdddba72d981e782f4",</span><br><span class="line">                    "EndpointID": "3580dd1064b07f434c61e316f14cb7d7b53a3d6d7c9c0f77eb6570f1781623bc",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.3",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:03",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker exec -it ce989f90023d /bin/bash</span><br><span class="line">[root@ce989f90023d /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@ce989f90023d /]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 14:44 pts/0    00:00:00 /bin/bash</span><br><span class="line">root         15      0  0 15:19 pts/1    00:00:00 /bin/bash</span><br><span class="line">root         29     15  0 15:20 pts/1    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost /]# docker attach ce989f90023d</span><br><span class="line">正在执行当前的代码...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span><span class="comment"># 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程（进入的是正在运行的命令行，而不是新的窗口）</span></span></span><br></pre></td></tr></table></figure><p><strong>从容器内拷贝文件到主机上</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内目标文件路径  目的主机路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前主机目录</span></span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">ztx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入docker容器内部</span></span><br><span class="line">[root@localhost home]# docker attach ce989f90023d</span><br><span class="line">[root@ce989f90023d /]# cd /home/</span><br><span class="line">[root@ce989f90023d home]# ls</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器内新建一个文件</span></span><br><span class="line">[root@ce989f90023d home]# touch test.java</span><br><span class="line">[root@ce989f90023d home]# exit</span><br><span class="line">exit</span><br><span class="line">[root@localhost home]# docker ps -a</span><br><span class="line">CONTAINER ID     IMAGE      COMMAND       CREATED           STATUS                PORTS           NAMES</span><br><span class="line">ce989f90023d     centos  "/bin/bash"  44 minutes ago  Exited (0) 46 seconds ago               nifty_johnson</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将docker内文件拷贝到主机上</span></span><br><span class="line">[root@localhost home]# docker cp ce989f90023d:/home/test.java /home</span><br><span class="line">[root@localhost home]# ls</span><br><span class="line">test.java  ztx</span><br><span class="line">[root@localhost home]# </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209202906322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach to a running container       # 当前shell下attach连接指定运行的镜像</span><br><span class="line"> build       Build an image from a Dockerfile        # 通过Dockerfile定制镜像</span><br><span class="line"> commit      Create a new image from a container changes  #提交当前容器为新的镜像</span><br><span class="line"> cp          Copy files&#x2F;folders between a container and the local filesystem #从容器中拷贝指定文件或目录到宿主机中</span><br><span class="line"> create      Create a new container   # 创建一个新的容器，同run,但不启动容器</span><br><span class="line"> diff        Inspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化</span><br><span class="line"> events      Get real time events from the server   # 从docker服务获取容器实时事件</span><br><span class="line"> exec        Run a command in a running container    # 在已存在的容器上运行命令</span><br><span class="line"> export      Export a container filesystem as a tar archive # 导出容器的内容流作为一个tar归档文件[对应import]</span><br><span class="line"> history     Show the history of an image            # 展示一个镜像形成历史</span><br><span class="line"> images      List images                             # 列出系统当前的镜像</span><br><span class="line"> import      Import the contents from a tarball to create a filesystem image # 从tar包中的内容创建一个新的文件系统镜像[对应export]</span><br><span class="line"> info        Display system-wide information         # 显示系统相关信息</span><br><span class="line"> inspect     Return low-level information on Docker objects # 查看容器详细信息</span><br><span class="line"> kill        Kill one or more running containers     # 杀死指定的docker容器</span><br><span class="line"> load        Load an image from a tar archive or STDIN # 从一个tar包加载一个镜像[对应save]</span><br><span class="line"> login       Log in to a Docker registry  # 注册或者登录一个docker源服务器</span><br><span class="line"> logout      Log out from a Docker registry  # 从当前Docker registry退出</span><br><span class="line"> logs        Fetch the logs of a container  # 输出当前容器日志信息</span><br><span class="line"> pause       Pause all processes within one or more containers      # 暂停容器</span><br><span class="line"> port        List port mappings or a specific mapping for the container # 查看映射端口对应容器内部源端口</span><br><span class="line"> ps          List containers  # 列出容器列表</span><br><span class="line"> pull        Pull an image or a repository from a registry # 从docker镜像源服务器拉取指定镜像或库镜像</span><br><span class="line"> push        Push an image or a repository to a registry   # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line"> rename      Rename a container  # 给docker容器重新命名</span><br><span class="line"> restart     Restart one or more containers  # 重启运行的容器</span><br><span class="line"> rm          Remove one or more containers  # 移除一个或者多个容器</span><br><span class="line"> rmi         Remove one or more images  # 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line"> run         Run a command in a new container  # 创建一个新的容器并运行一个命令</span><br><span class="line"> save        Save one or more images to a tar archive (streamed to STDOUT by default) # 保存一个镜像为一个tar包[对应load]</span><br><span class="line"> search      Search the Docker Hub for images  # 在docker hub中搜索镜像</span><br><span class="line"> start       Start one or more stopped containers  # 启动容器</span><br><span class="line"> stats       Display a live stream of container(s) resource usage statistics # 实时显示容器资源使用统计</span><br><span class="line"> stop        Stop one or more running containers  # 停止容器</span><br><span class="line"> tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源中镜像打标签</span><br><span class="line"> top         Display the running processes of a container     # 查看容器中运行的进程信息</span><br><span class="line"> unpause     Unpause all processes within one or more containers # 取消暂停容器</span><br><span class="line"> update      Update configuration of one or more containers  # 更新一个或多个容器配置</span><br><span class="line"> version     Show the Docker version information  # 查看docker版本号 </span><br><span class="line"> wait        Block until one or more containers stop, then print their exit codes # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure><h1 id="Docker镜像讲解"><a href="#Docker镜像讲解" class="headerlink" title="Docker镜像讲解"></a>Docker镜像讲解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件保，用来打包软件运行环境和基于运行环境开发的软件，他包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件。</p><p>所有应用，直接打包docker镜像，就可以直接跑起来！</p><p><strong>如何得到镜像</strong></p><ul><li>从远程仓库下载</li><li>别人拷贝给你</li><li>自己制作一个镜像 DockerFile</li></ul><h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote><p>UnionFs （联合文件系统）</p></blockquote><p>UnionFs（联合文件系统）：Union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，他支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ unite several directories into a single virtual filesystem)。Union文件系统是 Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>boots(boot file system）主要包含 bootloader和 Kernel, bootloader主要是引导加载 kernel, Linux刚启动时会加载bootfs文件系统，在 Docker镜像的最底层是 boots。这一层与我们典型的Linux/Unix系统是一样的，包括bootloader和 Kernel。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system),在 bootfs之上。包含的就是典型 Linux系统中的/dev,/proc,/bin,/etc等标准目录和文件。 rootfs就是各种不同的操作系统发行版，比如 Ubuntu, Centos等等。<br><img src="https://img-blog.csdnimg.cn/20201209203030450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？<br><img src="https://img-blog.csdnimg.cn/20201209203049210.png" alt="在这里插入图片描述"><br>对于个精简的OS, rootfs可以很小，只需要包合最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， rootfs会有差別，因此不同的发行版可以公用bootfs.</p><p>虚拟机是分钟级别，容器是秒级！</p><h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><blockquote><p>分层的镜像</p></blockquote><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载！<br><img src="https://img-blog.csdnimg.cn/20201209203126879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>思考：为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">➜  / docker image inspect redis          </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "sha256:f9b9909726890b00d2098081642edf32e5211b7ab53563929a47f250bcdc1d7c",</span><br><span class="line">        "RepoTags": [</span><br><span class="line">            "redis:latest"</span><br><span class="line">        ],</span><br><span class="line">        "RepoDigests": [</span><br><span class="line">            "redis@sha256:399a9b17b8522e24fbe2fd3b42474d4bb668d3994153c4b5d38c3dafd5903e32"</span><br><span class="line">        ],</span><br><span class="line">        "Parent": "",</span><br><span class="line">        "Comment": "",</span><br><span class="line">        "Created": "2020-05-02T01:40:19.112130797Z",</span><br><span class="line">        "Container": "d30c0bcea88561bc5139821227d2199bb027eeba9083f90c701891b4affce3bc",</span><br><span class="line">        "ContainerConfig": &#123;</span><br><span class="line">            "Hostname": "d30c0bcea885",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "#(nop) ",</span><br><span class="line">                "CMD [\"redis-server\"]"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "DockerVersion": "18.09.7",</span><br><span class="line">        "Author": "",</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "ExposedPorts": &#123;</span><br><span class="line">                "6379/tcp": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",</span><br><span class="line">                "GOSU_VERSION=1.12",</span><br><span class="line">                "REDIS_VERSION=6.0.1",</span><br><span class="line">                "REDIS_DOWNLOAD_URL=http://download.redis.io/releases/redis-6.0.1.tar.gz",</span><br><span class="line">                "REDIS_DOWNLOAD_SHA=b8756e430479edc162ba9c44dc89ac394316cd482f2dc6b91bcd5fe12593f273"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "redis-server"</span><br><span class="line">            ],</span><br><span class="line">            "ArgsEscaped": true,</span><br><span class="line">            "Image": "sha256:704c602fa36f41a6d2d08e49bd2319ccd6915418f545c838416318b3c29811e0",</span><br><span class="line">            "Volumes": &#123;</span><br><span class="line">                "/data": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "WorkingDir": "/data",</span><br><span class="line">            "Entrypoint": [</span><br><span class="line">                "docker-entrypoint.sh"</span><br><span class="line">            ],</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": null</span><br><span class="line">        &#125;,</span><br><span class="line">        "Architecture": "amd64",</span><br><span class="line">        "Os": "linux",</span><br><span class="line">        "Size": 104101893,</span><br><span class="line">        "VirtualSize": 104101893,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/adea96bbe6518657dc2d4c6331a807eea70567144abda686588ef6c3bb0d778a/diff:/var/lib/docker/overlay2/66abd822d34dc6446e6bebe73721dfd1dc497c2c8063c43ffb8cf8140e2caeb6/diff:/var/lib/docker/overlay2/d19d24fb6a24801c5fa639c1d979d19f3f17196b3c6dde96d3b69cd2ad07ba8a/diff:/var/lib/docker/overlay2/a1e95aae5e09ca6df4f71b542c86c677b884f5280c1d3e3a1111b13644b221f9/diff:/var/lib/docker/overlay2/cd90f7a9cd0227c1db29ea992e889e4e6af057d9ab2835dd18a67a019c18bab4/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/afa1de233453b60686a3847854624ef191d7bc317fb01e015b4f06671139fb11/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "RootFS": &#123;</span><br><span class="line">            "Type": "layers",</span><br><span class="line">            "Layers": [</span><br><span class="line">                "sha256:c2adabaecedbda0af72b153c6499a0555f3a769d52370469d8f6bd6328af9b13",</span><br><span class="line">                "sha256:744315296a49be711c312dfa1b3a80516116f78c437367ff0bc678da1123e990",</span><br><span class="line">                "sha256:379ef5d5cb402a5538413d7285b21aa58a560882d15f1f553f7868dc4b66afa8",</span><br><span class="line">                "sha256:d00fd460effb7b066760f97447c071492d471c5176d05b8af1751806a1f905f8",</span><br><span class="line">                "sha256:4d0c196331523cfed7bf5bafd616ecb3855256838d850b6f3d5fba911f6c4123",</span><br><span class="line">                "sha256:98b4a6242af2536383425ba2d6de033a510e049d9ca07ff501b95052da76e894"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "Metadata": &#123;</span><br><span class="line">            "LastTagTime": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或培加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创建第三个镜像层。</p><p>该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。<br><img src="https://img-blog.csdnimg.cn/2020120920315698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而整体的大镜像包含了来自两个镜像层的6个文件。<br><img src="https://img-blog.csdnimg.cn/20201209203215883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上图中的镜像层跟之前图中的略有区別，主要目的是便于展示文件。</p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。<br><img src="https://img-blog.csdnimg.cn/20201209203355485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者块设备技术，井且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW [1]。</p><blockquote><p>特点</p></blockquote><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！<br><img src="https://img-blog.csdnimg.cn/20201209203422845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如何提交一个自己的镜像？</p><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git原理类似</span></span><br><span class="line">docker commit -m="描述信息" -a="作者" 容器id 目标镜像名:[版本TAG]</span><br></pre></td></tr></table></figure><p>实战测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、启动一个默认的tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2、发现这个默认的tomcat是没有webapps应用的，镜像的原因。官方的镜像默认webapps下面是没有文件的！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3、我自己将webapp.dist下文件拷贝至webapps下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4、将我们操作过的容器通过commit提交为一个镜像！我们以后就可以使用我们修改过的镜像了，这就是我们自己的一个修改的镜像</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203500527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。<br>到了这里就算是入门Docker了！</p><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><p><strong>docker的理念回顾</strong></p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！==需求：数据可以持久化==</p><p>MySQL，容器删除了，删库跑路！==需求：MySQL数据可以存储在本地！==</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！<br><img src="https://img-blog.csdnimg.cn/20201209203542399.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@localhost home]# docker run -it -v /home/ceshi:/home  centos  /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动起来的时候，我们可以通过docker inspect 容器id 来查看挂载情况：（见下图）</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203640456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在容器内指定目录下添加或修改一个文件，会同步到主机指定目录下！反之，在主机目录下做相关操作，也会同步到容器对应的目录下！</p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的！</p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><p>两个路径保持完全的同步！！！双向绑定，<strong>一边发生变化，另一边也会随之变化！</strong></p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷的情况</span></span><br><span class="line">[root@localhost data]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               2dd0379216c9ee4441ed56f8ce53461c19abe78b8cfd024ac5fbe07c3b8f09ba</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里发现，这种就是匿名挂载，我们在 -v 后只写了容器内的路径，没有写容器外的路径！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">[root@localhost home]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">5ba5708389bf71b2156fdbcedc50a62b16ac27adb2a3dfac42c52e9da5ace79f</span><br><span class="line">[root@localhost home]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名：容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷  <span class="comment"># 先找到卷所在路径 docker volume inspect 卷名，如下图：</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203752895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>所有的docker容器内的卷，没有指定目录的情况下都是在<strong>/var/lib/docker/volumes/xxxx/_data</strong>下！<br>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况使用 <strong>具名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如何确定是具名挂载还是匿名挂载，还是指定路径挂载！</span></span><br><span class="line">-v容器内路径       # 匿名挂载</span><br><span class="line">-v卷名:容器内路径  # 具名挂载</span><br><span class="line">-v/宿主机路径:容器内路径   # 指定路径挂载！</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径：ro 或 rw   改变读写权限</span></span><br><span class="line">ro #readonly 只读</span><br><span class="line">rw #readwrite 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！</span></span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认是 rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></span><br></pre></td></tr></table></figure><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p>Dockerfile 就是用来构建 docker镜像的构建文件！命令脚本！ 先体验一下！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个个的命令，每个命令都是最终镜像的一层！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随机，建议 dockerfile</span></span><br><span class="line"></span><br><span class="line">[root@localhost docker-test-volume]# vim dockerfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中的内容：指令(大写) 参数</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME ["volume01","volume02"]</span><br><span class="line"></span><br><span class="line">CMD echo"----end----"</span><br><span class="line"></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个命令，就是镜像的一层！</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209203834981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：我们这里的 dockerfile  是我们编写的文件名哦！<br><img src="https://img-blog.csdnimg.cn/2020120920385769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这两个卷和外部一定有两个同步的目录！<br><img src="https://img-blog.csdnimg.cn/20201209203919566.png" alt="在这里插入图片描述"><br>查看一下卷挂载在主机上的路径</p><p><strong>docker inspect 容器id</strong><br><img src="https://img-blog.csdnimg.cn/20201209203943550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>测试一下刚才的文件是否同步出去了！</p><p>这种方式我们未来使用十分的多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像的时候没有挂在卷，要手动镜像挂载即可： (参考上文==<strong>具名和匿名挂载</strong>==)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v 卷名:容器内路径</span><br></pre></td></tr></table></figure><h2 id="数据卷容器（多个容器之间同步数据-）"><a href="#数据卷容器（多个容器之间同步数据-）" class="headerlink" title="数据卷容器（多个容器之间同步数据 ）"></a>数据卷容器（多个容器之间同步数据 ）</h2><p><strong>多个mysql同步数据！</strong><br><img src="https://img-blog.csdnimg.cn/20201209204110474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204121507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209204138239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201209204053289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在docker03下创建docker03文件后，进入docker01发现也依旧会同步过来：<br><img src="https://img-blog.csdnimg.cn/20201209215656378.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试1：删除docker01后，docker02和docker03是否还可以访问原来docker01下创建的的文件？</span><br><span class="line"># 测试1的结果为：依旧可以访问！！！</span><br><span class="line"></span><br><span class="line"># 测试2：删除docker01后，docker02和docker03之间是否可以相互同步文件？</span><br><span class="line"># 测试2的结果为：docket02和docker03之间一九可以完成同步！！！ 见下图：</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120921574695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209215802776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>多个mysql实现数据共享</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line">➜  ~ docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步！</span></span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h2><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p><strong>构建步骤：</strong></p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看官方是怎么做的！</p><h2 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h2><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像层，并提交！<br><img src="https://img-blog.csdnimg.cn/20201209215953139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h2 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM# 基础镜像，一切从这里开始构建   centos</span><br><span class="line">MAINTAINER# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD# 步骤：tomcat镜像，这个tomcat压缩包！ 添加内容，每添加会成一层</span><br><span class="line">WORKDIR# 镜像的工作目录  </span><br><span class="line">VOLUME# 挂载的目录</span><br><span class="line">EXPOSE          # 暴露端口配置，跟 -p 是一个道理</span><br><span class="line">CMD# 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可被替代</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要执行的命令，可以追加命令</span><br><span class="line">ONBUILD# 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令</span><br><span class="line">COPY# 类似ADD,将我们文件拷贝到镜像中</span><br><span class="line">ENV# 构建的时候设置环境变量，跟 -e 是一个意思</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220023958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>Docker Hub中99%镜像都是从这个基础镜像过来的( <strong>FROM scratch</strong> )，然后配置需要的软件和配置来构建。</p><blockquote><p>创建一个自己的 centos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写DockerFile文件，内容如下：</span></span><br><span class="line">[root@localhost dockerfile]# cat mydockerfile-centos</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER ztx&lt;123456@qq.com&gt; </span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local        #centos中的工作目录</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools   #ifconfig的相关命令</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "----end----"</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令docker build -f dockerfile文件路径 -t 镜像名:[tag] .</span></span><br><span class="line">[root@localhost dockerfile]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">....</span><br><span class="line">Successfully built c987078b06cb</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行</span></span><br></pre></td></tr></table></figure><p>生成命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>==通过build命令，用写好的mydockerfile-centos文件来构建target（-t 目标）名为mycentos:0.1 .的镜像 [tag]为版本号==</p><p>其中from的centos是本地从hub上pull过的镜像（docker images），如果没有 则会自动去pull下载</p><p>测试运行：<br><img src="https://img-blog.csdnimg.cn/20201209220142434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行的时候带上版本号 否则获取最新版本</p><p><strong>对比：</strong></p><p><strong>之前的原生的centos</strong><br><img src="https://img-blog.csdnimg.cn/20201209220205867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>我们增加之后的镜像</strong><br> <img src="https://img-blog.csdnimg.cn/20201209220221830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：net-tools 包含一系列程序，构成了 Linux 网络的基础。</p><p>我们可以列出本地镜像的变更历史：<br><img src="https://img-blog.csdnimg.cn/20201209220241622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们平时拿到一个镜像，可以研究一下它是怎么做的！</p><blockquote><p>CMD 和 ENTRYPOINT 的区别</p></blockquote><p><strong>测试CMD</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-cmd</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls","-a"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令  -l 成为ls -al</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\":</span><br><span class="line"> executable file not found in $PATH": unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 -l 替换了CMD[<span class="string">"ls"</span>,<span class="string">"-l"</span>]。 而-l 不是命令,所以报错</span></span><br></pre></td></tr></table></figure><p><strong>测试ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-entrypoint</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls","-a"]</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found ...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们的命令，是直接拼接在我们的ENTRYPOINT命令后面的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1 -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 16 06:32 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64 ....</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><p>1、准备镜像文件tomcat压缩包，jdk压缩包！<br>2、编写Dockerfile文件，官方命名: <strong>Dockerfile</strong> ，build会自动寻找这个文件，就不要 -f 指定了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER kuangshen&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u161-linux-x64.tar.gz    /usr/local/</span><br><span class="line">ADD apache-tomcat-8.0.53.tar.gz   /usr/local</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_161</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-8.0.53</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.0.53/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.0.53/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>ADD命令会自动解压压缩包</p><p>3、构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker build -t diytomcat .     diytomcat是定义的镜像名</span></span><br></pre></td></tr></table></figure><p>4、启动镜像，创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -p 9090:8080 --name kuangshentomcat02 -v /home/kuangshen/build/tomcat/<span class="built_in">test</span>:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/webapps/<span class="built_in">test</span> -v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/<span class="built_in">local</span>/apache-tomcat-8.0.53/logs diytomcat</span></span><br></pre></td></tr></table></figure><p>5、访问测试<br><img src="https://img-blog.csdnimg.cn/20201209220335132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6、发布项目（由于做了卷挂载，我们就可以直接在本地发布项目了）</p><p>在/home/kuangshen/build/tomcat/test目录下创建WEB-INF目录，在里面创建web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                               http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在回到test目录，添加一个index.jsp页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span>vim</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Hello World!<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">System.out.println</span>("<span class="attr">---my</span> <span class="attr">test</span> <span class="attr">web</span> <span class="attr">logs---</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现：test项目部署成功，可以直接访问！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcatlogs]# cat catalina.out</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220425594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>之前一直访问失败是web.xml配置有问题，最后也是查看该日志提示，才得以解决！！！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、在我们服务器上提交自己的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost tomcat]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录dockerhub</span></span><br><span class="line">[root@localhost tomcat]# docker login -u ztx115</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>4、登录完毕后就可以提交镜像了，就是一步 docker push</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> push自己的镜像到服务器上！</span></span><br><span class="line">[root@localhost tomcat]# docker push diytomcat</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">c5593011cd68: Preparing </span><br><span class="line">d3ce40b8178e: Preparing </span><br><span class="line">02084c67dcc9: Preparing </span><br><span class="line">2b7c1c6c89c5: Preparing </span><br><span class="line">0683de282177: Preparing </span><br><span class="line">denied: requested access to the resource is denied  # 拒绝</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push镜像的问题？</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决：增加一个tag         docker tag  指定镜像的id   dockerhub的用户名/镜像重命名:[tag]</span></span><br><span class="line">[root@localhost tomcat]# docker tag bb64ab96b432 ztx115/tomcat:1.0</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020120922045783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>注意：镜像的重命名前一定要加当前的dockerhub的用户名，否则将会push失败！！！！</strong>（如：把ztx115改成ztx,  push一定失败！）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docekr push上去即可！  自己平时发布的镜像尽量带上版本号</span></span><br><span class="line">[root@localhost tomcat]# docker push ztx115/tomcat:1.0</span><br><span class="line">The push refers to repository [docker.io/ztx115/tomcat]</span><br><span class="line">c5593011cd68: Pushed </span><br><span class="line">d3ce40b8178e: Pushed </span><br><span class="line">02084c67dcc9: Pushed </span><br><span class="line">2b7c1c6c89c5: Pushed </span><br><span class="line">0683de282177: Pushed </span><br><span class="line">1.0: digest: sha256:b6733deccf85ad66c6f4302215dd9ea63e1579817f15a099b5858785708ed408 size: 1372</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201209220546540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现，提交时也是按照镜像的层级来进行提交的！</p><blockquote><p>发布到阿里云镜像服务上（狂神视频截图）</p></blockquote><p>1、登录阿里云</p><p>2、找到容器镜像服务</p><p>3、创建命名空间<br><img src="https://img-blog.csdnimg.cn/20201209220605544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、创建容器镜像仓库<br><img src="https://img-blog.csdnimg.cn/20201209220622908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201209220634804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020120922064542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5、浏览阿里云<br><img src="https://img-blog.csdnimg.cn/20201209220705783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用阿里云容器镜像的参考官方指南即可！！！（即上图）</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="https://img-blog.csdnimg.cn/20201209220744812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Java项目打包实战——以hugegraph知识图谱为例</title>
      <link href="2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/"/>
      <url>2020/12/09/Docker-Java%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E4%BB%A5hugegraph%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E4%B8%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    本文主要针对开源图谱hugegraph做了docker打包处理，hugegraph在windows上往往不是特别方便，也很容易崩，故写此文。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>本地能跑通的hugegraph三件套：<ul><li>hugegraph-0.10.4</li><li>hugegraph-loader-0.10.0（数据导入配件 不建议在docker内部使用，很容易内存不够，可以将本地导通的g/m/s文件夹放进hugegraph-0.10.4下即可(RockDb)）</li><li>hugegraph-studio-0.10.0</li></ul></li><li>依赖的编译环境只有jdk8，下载好x86 linux版即可</li></ul><h1 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h1><p>​    新建一个构建镜像的目录(hugegraph-docker)，用于存放原材料：</p><p><img src="https://img-blog.csdnimg.cn/20201209201152438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>​    编写Dockerfile脚本文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER erickun&lt;847473488@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/local/</span><br><span class="line">COPY hugegraph-tools-1.4.0 /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CMD /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/init-store.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-0.10.4/bin/start-hugegraph.sh &amp;&amp; /usr/local/hugegraph-tools-1.4.0/services/hugegraph-studio-0.10.0/bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ADD :可以将tar压缩包自动解压到centos系统中对应路径下  (ADD 能解压压缩文件并把它们添加到镜像中，也从 url 拷贝文件到镜像中)，COPY则是将资源拷贝至镜像，两者的基本功能类似</li><li>ENV:配置环境变量，此处配置了jdk8的环境</li><li>RUN: 在镜像生成的过程中执行的命令，多与系统相关，如此处安装vim工具</li><li>CMD：在镜像docker run了之后，容器初始执行的命令</li></ul><p>执行打包命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t testhugegraph .</span><br></pre></td></tr></table></figure><p>为镜像起名为testhugegraph，不要忘记最后一个点</p><p><img src="https://img-blog.csdnimg.cn/20201209201214486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>生成完后，可以用<code>docker images</code>来查看是否生成成功，再来用此镜像新建一个容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:8088 -p 8081:8080 -it --name testhugegraph testhugegraph</span><br></pre></td></tr></table></figure><ul><li>-p：做端口映射： &lt;宿主机端口&gt;:&lt;容器内部端口&gt;，当然也可以写进Dockerfile的EXPOSE，为方便随时指定端口，不建议写进EXPOSE</li><li>-it:交互模式</li><li>–name：容器的名字</li><li>testhugegraph：从testhugegraph镜像中来生成一个叫testhugegraph的容器</li></ul><h1 id="内外端口映射"><a href="#内外端口映射" class="headerlink" title="内外端口映射"></a>内外端口映射</h1><p>​    实战中，内部端口可以访问<a href="http://127.0.0.1:8080（curl">http://127.0.0.1:8080（curl</a> <a href="http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==">http://127.0.0.1:8080），但是外部访问8081，网页报错：报错：==该网页无法正常运作==</a></p><p>原因：内外绑定的默认host是0.0.0.0，而不是127.0.0.1，故要修改内部服务启动的host:</p><p><img src="https://img-blog.csdnimg.cn/20201209201236279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 知识图谱 </tag>
            
            <tag> hugegraph </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于leaflet的地图开发十大功能集合</title>
      <link href="2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/"/>
      <url>2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E5%9C%B0%E5%9B%BE%E5%BC%80%E5%8F%91%E5%8D%81%E5%A4%A7%E5%8A%9F%E8%83%BD%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Leaflet十大常用功能合集"><a href="#Leaflet十大常用功能合集" class="headerlink" title="Leaflet十大常用功能合集"></a>Leaflet十大常用功能合集</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本篇文章主要介绍基于leaflet开源地图组件开发的地图搭建，包含热力图、Geojson轨迹、marker、动画、用户标记侧栏、测量工具、搜索框、经纬线显示等功能。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 本文中的代码都是经过测试无误的，关于依赖包均可在github上找到源文件，主要就是依赖导入和函数调用两部分，为了简洁，json数据一般外部导入，路径正确即可。</p><h1 id="底图导入"><a href="#底图导入" class="headerlink" title="底图导入"></a>底图导入</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 地图的导入分在线和离线，在线直接调提供瓦片服务的url即可，离线请参考我的另一文章：<a href="https://blog.csdn.net/popofzk/article/details/108902634" target="_blank" rel="noopener">基于leaflet的离线瓦片发布方式总结</a> 代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Offline Map by WHU<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span> <span class="attr">href</span>=<span class="string">"docs/images/favicon.ico"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部的js或者css  （组件的依赖） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/leaflet.css"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/heatpoint.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * </span><br><span class="line"><span class="css">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123; <span class="attribute">height</span>: <span class="number">100%</span>; &#125;</span></span><br><span class="line">      /* html,body &#123;</span><br><span class="line">          padding: 0;</span><br><span class="line">          margin: 0 auto;</span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">          min-width: 100%;</span><br><span class="line">      &#125; */</span><br><span class="line"><span class="css">      <span class="selector-id">#map</span> &#123;</span></span><br><span class="line">          width: 100%;</span><br><span class="line">          height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//----------------绘制底图</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> mymap = L.map(<span class="string">'map'</span>).setView([ <span class="number">20</span>,<span class="number">120</span>], <span class="number">5</span>);</span></span><br><span class="line"><span class="actionscript">mymap.zoomControl.setPosition(<span class="string">'topright'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> url = <span class="string">"https://api.mapbox.com/styles/v1/&#123;id&#125;/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw"</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// var url = 'http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;'</span></span></span><br><span class="line">L.tileLayer( url , &#123;</span><br><span class="line">  maxZoom: 18,</span><br><span class="line">  minZoom:2,</span><br><span class="line"><span class="actionscript">  id: <span class="string">'mapbox/streets-v11'</span>,</span></span><br><span class="line">  tileSize: 512,</span><br><span class="line">  zoomOffset: -1</span><br><span class="line">&#125;).addTo(mymap);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能一：热力图"><a href="#功能一：热力图" class="headerlink" title="功能一：热力图"></a>功能一：热力图</h1><p>依赖包：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet-heat.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>heatpoint数据文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heatpoint = [</span><br><span class="line">  [ <span class="number">25.277312550</span> , <span class="number">124.687775915409</span>,<span class="string">"486"</span>],</span><br><span class="line">  [ <span class="number">27.72593995</span> , <span class="number">124.474295839426</span>, <span class="string">"807"</span>],</span><br><span class="line">  [ <span class="number">27</span>, <span class="number">125</span>,<span class="string">"899"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126</span>,<span class="string">"1273"</span>],</span><br><span class="line">  [ <span class="number">28</span>,<span class="number">126.5</span> , <span class="string">"1258"</span>],</span><br><span class="line">  [ <span class="number">28</span>, <span class="number">126.6</span>,<span class="string">"1279"</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加热力图  lat, lng, intensity</span></span><br><span class="line">  <span class="keyword">var</span> layerHeat = L.heatLayer(heatpoint, &#123;<span class="attr">radius</span>: <span class="number">10</span>&#125;);</span><br><span class="line">  mymap.addLayer(layerHeat);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002202042404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能二：GeoJson轨迹"><a href="#功能二：GeoJson轨迹" class="headerlink" title="功能二：GeoJson轨迹"></a>功能二：GeoJson轨迹</h1><p>GeoJson数据格式：这里我采用的是对不同轨迹上不同颜色，对原始版本进行了修改。<br>轨迹构成面：<br>数据这里省略了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">        [ ,  ],</span><br><span class="line">        [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [[</span><br><span class="line">          [ ,  ],</span><br><span class="line">          [ ,  ]</span><br><span class="line">      ]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>轨迹线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> states= [&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"1"</span>,<span class="string">"color"</span>:<span class="string">"#BB443E"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">  <span class="string">"properties"</span>: &#123;<span class="string">"id"</span>: <span class="string">"2"</span>,<span class="string">"color"</span>:<span class="string">"#000000"</span>&#125;,</span><br><span class="line">  <span class="string">"geometry"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">      <span class="string">"coordinates"</span>: [</span><br><span class="line">             [ ,  ],</span><br><span class="line">             [ ,  ]</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>外部导入数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./json/geoJson.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> myStyle = &#123;</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">'#101010'</span>,</span><br><span class="line">            <span class="string">"weight"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0.5</span>,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">var</span> layerGeo = L.geoJSON(states, &#123;</span><br><span class="line">    style: <span class="function"><span class="keyword">function</span> (<span class="params">feature</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(feature.geometry.type == <span class="string">"LineString"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">color</span>: feature.properties.color&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).addTo(mymap)</span><br></pre></td></tr></table></figure><h1 id="功能三：marker"><a href="#功能三：marker" class="headerlink" title="功能三：marker"></a>功能三：marker</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> icon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/fig.svg'</span>,</span><br><span class="line">                                        iconSize:     [<span class="number">20</span>, <span class="number">20</span>], <span class="comment">// size of the icon</span></span><br><span class="line">                                        <span class="comment">// shadowSize:   [50, 64], // size of the shadow</span></span><br><span class="line">                                        iconAnchor:   [<span class="number">22</span>, <span class="number">94</span>], <span class="comment">// point of the icon which will correspond to marker's location</span></span><br><span class="line">                                        shadowAnchor: [<span class="number">4</span>, <span class="number">62</span>],  <span class="comment">// the same for the shadow</span></span><br><span class="line">                                        popupAnchor:  [<span class="number">-3</span>, <span class="number">-76</span>] <span class="comment">// point from which the popup should open relative to the iconAnchor</span></span><br><span class="line">              &#125;)</span><br><span class="line">   </span><br><span class="line">    marker = <span class="keyword">new</span> L.marker(loc,&#123;<span class="attr">icon</span>: icon&#125; );<span class="comment">//se property </span></span><br><span class="line">    marker.addTo(mymap)</span><br><span class="line">                <span class="comment">// searched</span></span><br><span class="line">   marker.bindPopup(<span class="string">'area: '</span>+ title );</span><br><span class="line">            </span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><h1 id="功能四：轨迹动画（从A-gt-B）"><a href="#功能四：轨迹动画（从A-gt-B）" class="headerlink" title="功能四：轨迹动画（从A-&gt;B）"></a>功能四：轨迹动画（从A-&gt;B）</h1><p><a href="https://github.com/ewoken/Leaflet.MovingMarker" target="_blank" rel="noopener">参考github</a><br><a href="http://ewoken.github.io/Leaflet.MovingMarker/" target="_blank" rel="noopener">官方demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动画轨迹js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/MovingMarker.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用多个动画效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------geo的动画 L.Marker.movingMarker-------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> parisKievLL = [[<span class="number">48.8567</span>, <span class="number">2.3508</span>], [<span class="number">50.45</span>, <span class="number">30.523333</span>]];</span><br><span class="line"><span class="keyword">var</span> londonParisRomeBerlinBucarest = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">48.8567</span>, <span class="number">2.3508</span>],</span><br><span class="line">[<span class="number">41.9</span>, <span class="number">12.5</span>], [<span class="number">52.516667</span>, <span class="number">13.383333</span>], [<span class="number">44.4166</span>,<span class="number">26.1</span>]];</span><br><span class="line"><span class="keyword">var</span> londonBrusselFrankfurtAmsterdamLondon = [[<span class="number">51.507222</span>, <span class="number">-0.1275</span>], [<span class="number">50.85</span>, <span class="number">4.35</span>],</span><br><span class="line">[<span class="number">50.116667</span>, <span class="number">8.683333</span>], [<span class="number">52.366667</span>, <span class="number">4.9</span>], [<span class="number">51.507222</span>, <span class="number">-0.1275</span>]];</span><br><span class="line"><span class="keyword">var</span> barcelonePerpignanPauBordeauxMarseilleMonaco = [</span><br><span class="line">    [<span class="number">41.385064</span>, <span class="number">2.173403</span>],</span><br><span class="line">    [<span class="number">42.698611</span>, <span class="number">2.895556</span>],</span><br><span class="line">    [<span class="number">43.3017</span>, <span class="number">-0.3686</span>],</span><br><span class="line">    [<span class="number">44.837912</span>, <span class="number">-0.579541</span>],</span><br><span class="line">    [<span class="number">43.296346</span>, <span class="number">5.369889</span>],</span><br><span class="line">    [<span class="number">43.738418</span>, <span class="number">7.424616</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> planeIcon = <span class="keyword">new</span> L.icon(&#123;<span class="attr">iconUrl</span>: <span class="string">'./css/images/marker-icon-2x.png'</span>,</span><br><span class="line">iconSize: [<span class="number">40</span>, <span class="number">70</span>],</span><br><span class="line">    iconAnchor: [<span class="number">22</span>, <span class="number">94</span>],</span><br><span class="line">    popupAnchor: [<span class="number">-3</span>, <span class="number">-76</span>],</span><br><span class="line">    shadowUrl: <span class="string">'./css/images/marker-shadow.png'</span>,</span><br><span class="line">    shadowSize: [<span class="number">68</span>, <span class="number">95</span>],</span><br><span class="line">    shadowAnchor: [<span class="number">22</span>, <span class="number">94</span>]</span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------用户点击开始轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker1 = L.Marker.movingMarker(parisKievLL, [<span class="number">10000</span>]).addTo(mymap);</span><br><span class="line">L.polyline(parisKievLL).addTo(mymap);</span><br><span class="line">marker1.once(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    marker1.start();</span><br><span class="line">    marker1.closePopup();</span><br><span class="line">    marker1.unbindPopup();</span><br><span class="line">    marker1.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (marker1.isRunning()) &#123;</span><br><span class="line">            marker1.pause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            marker1.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to pause !&lt;/b&gt;'</span>).openPopup();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">marker1.bindPopup(<span class="string">'&lt;b&gt;Click me to start !&lt;/b&gt;'</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">marker1.openPopup();</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------自动播放轨迹动画</span></span><br><span class="line"><span class="keyword">var</span> marker2 = L.Marker.movingMarker(londonParisRomeBerlinBucarest,</span><br><span class="line">    [<span class="number">3000</span>, <span class="number">9000</span>, <span class="number">9000</span>, <span class="number">4000</span>],&#123;<span class="attr">autostart</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line">L.polyline(londonParisRomeBerlinBucarest, &#123;<span class="attr">color</span>: <span class="string">'red'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------循环动画</span></span><br><span class="line"><span class="keyword">var</span> marker3 = L.Marker.movingMarker(londonBrusselFrankfurtAmsterdamLondon,</span><br><span class="line">    [<span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>, <span class="number">2000</span>], &#123;<span class="attr">autostart</span>: <span class="literal">true</span>, <span class="attr">loop</span>: <span class="literal">true</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.loops = <span class="number">0</span>;</span><br><span class="line">marker3.bindPopup(<span class="string">''</span>, &#123;<span class="attr">closeOnClick</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">L.polyline(londonBrusselFrankfurtAmsterdamLondon, &#123;<span class="attr">color</span>: <span class="string">'black'</span>&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">marker3.on(<span class="string">'loop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker3.loops++;</span><br><span class="line">    <span class="keyword">if</span> (e.elapsedTime &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        marker3.getPopup().setContent(<span class="string">"&lt;b&gt;Loop: "</span> + marker3.loops + <span class="string">"&lt;/b&gt;"</span>)</span><br><span class="line">        marker3.openPopup();</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            marker3.closePopup();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (! marker1.isEnded()) &#123;</span><br><span class="line">                marker1.openPopup();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (marker4.getLatLng().equals([<span class="number">45.816667</span>, <span class="number">15.983333</span>])) &#123;</span><br><span class="line">                    marker4.bindPopup(<span class="string">'Click on the map to move me !'</span>);</span><br><span class="line">                    marker4.openPopup();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------根据用户的鼠标点击来运动  不精确</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> marker4 = L.Marker.movingMarker([[<span class="number">45.816667</span>, <span class="number">15.983333</span>]], [],&#123;<span class="attr">icon</span>: planeIcon&#125;).addTo(mymap);</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    marker4.moveTo(e.latlng, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="功能五：轨迹动画-轨迹自身动画"><a href="#功能五：轨迹动画-轨迹自身动画" class="headerlink" title="功能五：轨迹动画(轨迹自身动画)"></a>功能五：轨迹动画(轨迹自身动画)</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入动画效果DashFlow --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/L.Path.DashFlow.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 导入DashFlow动画依赖 轨迹线path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./json/route.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/ ---------------------------------------------添加动画效果DashFlow</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, latlngs = [], len = route.length; i &lt; len; i++) &#123;</span><br><span class="line">latlngs.push(<span class="keyword">new</span> L.LatLng(route[i][<span class="number">0</span>], route[i][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = L.polyline(latlngs, &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    mymap.fitBounds(L.latLngBounds(latlngs));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(L.marker(latlngs[<span class="number">0</span>]));</span><br><span class="line">mymap.addLayer(L.marker(latlngs[len - <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">mymap.addLayer(path);<span class="comment">//添加一个path动画</span></span><br><span class="line"></span><br><span class="line">L.circleMarker([<span class="number">10</span>, <span class="number">70</span>], &#123;</span><br><span class="line">dashArray: <span class="string">"15,15"</span>,</span><br><span class="line">dashSpeed: <span class="number">-30</span>,</span><br><span class="line">radius: <span class="number">147.5</span></span><br><span class="line">&#125;).addTo(mymap); <span class="comment">//添加以中心点 半径画圆的 动画效果</span></span><br></pre></td></tr></table></figure><h1 id="功能六：用户标注侧栏"><a href="#功能六：用户标注侧栏" class="headerlink" title="功能六：用户标注侧栏"></a>功能六：用户标注侧栏</h1><p><img src="https://img-blog.csdnimg.cn/20201002201912445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入画图组件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./js/leaflet.draw.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.4.10/leaflet.draw.css"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------增加右侧用户画图toolbar</span></span><br><span class="line"><span class="keyword">var</span> drawnItems = <span class="keyword">new</span> L.FeatureGroup();</span><br><span class="line">mymap.addLayer(drawnItems);</span><br><span class="line"><span class="keyword">var</span> drawControl = <span class="keyword">new</span> L.Control.Draw(&#123;<span class="attr">position</span>: <span class="string">'topright'</span>,</span><br><span class="line">    edit: &#123;</span><br><span class="line">        featureGroup: drawnItems</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mymap.addControl(drawControl);</span><br><span class="line">mymap.on(L.Draw.Event.CREATED, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layer = event.layer;</span><br><span class="line"></span><br><span class="line">        drawnItems.addLayer(layer);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="功能七：测量工具-m-nm-mi"><a href="#功能七：测量工具-m-nm-mi" class="headerlink" title="功能七：测量工具(m/nm/mi)"></a>功能七：测量工具(m/nm/mi)</h1><p>导入依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 测量工具 Leaflet.PolylineMeasure--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/Lealet.PolylineMeasure.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/Leaflet.PolylineMeasure.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ---------------------------------------------测量工具Leaflet.PolylineMeasure</span></span><br><span class="line">L.control.scale (&#123;<span class="attr">maxWidth</span>:<span class="number">240</span>, <span class="attr">metric</span>:<span class="literal">true</span>, <span class="attr">imperial</span>:<span class="literal">false</span>, <span class="attr">position</span>: <span class="string">'bottomleft'</span>&#125;).addTo (mymap);</span><br><span class="line"><span class="keyword">let</span> polylineMeasure = L.control.polylineMeasure (&#123;<span class="attr">position</span>:<span class="string">'topright'</span>, <span class="attr">unit</span>:<span class="string">'metres'</span>, <span class="attr">showBearings</span>:<span class="literal">true</span>, <span class="attr">clearMeasurementsOnStop</span>: <span class="literal">false</span>, <span class="attr">showClearControl</span>: <span class="literal">true</span>, <span class="attr">showUnitControl</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">polylineMeasure.addTo (mymap);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugevent</span>(<span class="params">e</span>) </span>&#123; <span class="built_in">console</span>.debug(e.type, e, polylineMeasure._currentLine) &#125;</span><br><span class="line"></span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:toggle'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:start'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:resume'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:finish'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:clear'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:add'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:insert'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:move'</span>, debugevent);</span><br><span class="line">mymap.on(<span class="string">'polylinemeasure:remove'</span>, debugevent);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204247110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能八：经纬度显示"><a href="#功能八：经纬度显示" class="headerlink" title="功能八：经纬度显示"></a>功能八：经纬度显示</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --------------------------------------------绘制经纬度网格线 Specify divisions every 10 degrees</span></span><br><span class="line">  L.latlngGraticule(&#123;</span><br><span class="line">            weight: <span class="string">"2.0"</span>,</span><br><span class="line">            color: <span class="string">'#101010'</span>,</span><br><span class="line">            showLabel: <span class="literal">true</span>,</span><br><span class="line">            dashArray: [<span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">            zoomInterval: [</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">2</span>, <span class="attr">end</span>: <span class="number">3</span>, <span class="attr">interval</span>: <span class="number">30</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">4</span>, <span class="attr">end</span>: <span class="number">4</span>, <span class="attr">interval</span>: <span class="number">10</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">5</span>, <span class="attr">end</span>: <span class="number">7</span>, <span class="attr">interval</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">start</span>: <span class="number">8</span>, <span class="attr">end</span>: <span class="number">10</span>, <span class="attr">interval</span>: <span class="number">1</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002204133961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能九：中心坐标显示"><a href="#功能九：中心坐标显示" class="headerlink" title="功能九：中心坐标显示"></a>功能九：中心坐标显示</h1><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 坐标显示  中心坐标 底部显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://xguaita.github.io/Leaflet.MapCenterCoord/dist/L.Control.MapCenterCoord.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------------------------------------------添加屏幕中心坐标的底部显示</span></span><br><span class="line">L.control.mapCenterCoord(</span><br><span class="line">  &#123;</span><br><span class="line">  latlngFormat: <span class="string">'DM'</span>,</span><br><span class="line">  latlngDesignators: <span class="literal">true</span>,</span><br><span class="line">  position: <span class="string">"bottomright"</span></span><br><span class="line">&#125;</span><br><span class="line">).addTo(mymap);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201002203210350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能十：仿谷歌搜索框"><a href="#功能十：仿谷歌搜索框" class="headerlink" title="功能十：仿谷歌搜索框"></a>功能十：仿谷歌搜索框</h1><p><a href="https://github.com/8to5Developer/leaflet-custom-searchbox" target="_blank" rel="noopener">参考github</a></p><p>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框 谷歌风格 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="https://code.jquery.com/jquery-1.12.1.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/leaflet.customsearchbox.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"./css/searchbox.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchboxControl=createSearchboxControl();</span><br><span class="line">        <span class="keyword">var</span> control = <span class="keyword">new</span> searchboxControl(&#123;</span><br><span class="line">            sidebarTitleText: <span class="string">'Header'</span>,</span><br><span class="line">            sidebarMenuItems: &#123;</span><br><span class="line">                Items: [</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 1 (github.com)"</span>, <span class="attr">href</span>: <span class="string">"http://github.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-carwash"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 2 (google.com)"</span>, <span class="attr">href</span>: <span class="string">"http://google.com"</span>, <span class="attr">icon</span>: <span class="string">"icon-cloudy"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 1"</span>, <span class="attr">onclick</span>: <span class="string">"alert('button 1 clicked !')"</span>, <span class="attr">icon</span>: <span class="string">"icon-potrait"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"button"</span>, <span class="attr">name</span>: <span class="string">"Button 2"</span>, <span class="attr">onclick</span>: <span class="string">"button2_click();"</span>, <span class="attr">icon</span>: <span class="string">"icon-local-dining"</span> &#125;,</span><br><span class="line">                    &#123; <span class="attr">type</span>: <span class="string">"link"</span>, <span class="attr">name</span>: <span class="string">"Link 3 (stackoverflow.com)"</span>, <span class="attr">href</span>: <span class="string">'http://stackoverflow.com'</span>, <span class="attr">icon</span>: <span class="string">"icon-bike"</span> &#125;,</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        control._searchfunctionCallBack = <span class="function"><span class="keyword">function</span> (<span class="params">searchkeywords</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!searchkeywords) &#123;</span><br><span class="line">                searchkeywords = <span class="string">"The search call back is clicked !!"</span></span><br><span class="line">            &#125;</span><br><span class="line">            alert(searchkeywords);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mymap.addControl(control);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">button2_click</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        alert(<span class="string">'button 2 clicked !!!'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   这里的搜索框提供了一个模板，可根据自己需求修改函数、按钮等</p><h1 id="功能十一：搜索框的自动补全"><a href="#功能十一：搜索框的自动补全" class="headerlink" title="功能十一：搜索框的自动补全"></a>功能十一：搜索框的自动补全</h1><p>采用jquery的input框自动补全组件<br>依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索框补全功能jquery --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script type="text/javascript"  src="http://code.jquery.com/jquery-1.8.3.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jqueryui/1.10.3/jquery-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这里用jquery组件来绑定searchboxinput（上一个谷歌搜索框）,导入的数据采用数组形式即可。<br>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------------------------------------------搜索框自动补全 jquery----------------------</span></span><br><span class="line"><span class="keyword">var</span> cityData = []</span><br><span class="line"><span class="comment">//自动填充1</span></span><br><span class="line">              $( <span class="string">"#searchboxinput"</span> ).autocomplete(&#123;</span><br><span class="line">               source: cityData,</span><br><span class="line">                    messages: &#123;</span><br><span class="line">              noResults: <span class="string">''</span>,</span><br><span class="line">              results: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;);</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20201002210623866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> leaflet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于leaflet的离线瓦片发布方式总结</title>
      <link href="2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/02/%E5%9F%BA%E4%BA%8Eleaflet%E7%9A%84%E7%A6%BB%E7%BA%BF%E7%93%A6%E7%89%87%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="离线瓦片发布"><a href="#离线瓦片发布" class="headerlink" title="离线瓦片发布"></a>离线瓦片发布</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leaflet是webgis中相对成熟的开源地图组件库，包含了几乎大部分开发者的基本需求，对于一般用户而言，联网状态下采用在线的瓦片服务即可，但也有一些需要必须离线的场景，本篇博客将讲述两种离线瓦片发布的方式，其一：采用Springboot后端发布；其二：直接将瓦片资源放在文件路径下访问。</p><h2 id="瓦片发布前的准备"><a href="#瓦片发布前的准备" class="headerlink" title="瓦片发布前的准备"></a>瓦片发布前的准备</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在发布瓦片服务前，先要根据框定的经纬度爬取地图瓦片图片，这里采用已经开源的”全能地图下载器3.0”，选择好需要爬取的地图级别（级别越大，相当于放大程度Zoom越大）所以越大耗费的存储空间越大。<br><img src="https://img-blog.csdnimg.cn/20201002161850125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="Springboot瓦片发布"><a href="#Springboot瓦片发布" class="headerlink" title="Springboot瓦片发布"></a>Springboot瓦片发布</h2><p>参考<br><img src="https://img-blog.csdnimg.cn/20201002162401637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>controller下新建PublicData.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/xyz"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublicData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;DATA_PATH&#125;"</span>)</span><br><span class="line">    String dataPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;name&#125;/&#123;level&#125;/&#123;col&#125;/&#123;rowExtention:.+&#125;"</span>,method= RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xyz</span><span class="params">(@PathVariable String name, @PathVariable <span class="keyword">int</span> level, @PathVariable <span class="keyword">int</span> col, @PathVariable String rowExtention, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        String[] rowParts=rowExtention.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> row=Integer.parseInt(rowParts[<span class="number">0</span>]);</span><br><span class="line">            String extension=rowParts[<span class="number">1</span>];</span><br><span class="line">            String path = dataPath+<span class="string">"/"</span>+name+<span class="string">"/"</span>+level+<span class="string">"/"</span>+col+<span class="string">"/"</span>+rowExtention;</span><br><span class="line"><span class="comment">//            InputStream inputStream = SqliteUtil.readTile(dataPath,name,level,col,row);</span></span><br><span class="line">            InputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            <span class="keyword">if</span>(inputStream==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedImage br = ImageIO.read(inputStream);</span><br><span class="line">            ImageIO.write(br, extension, response.getOutputStream());</span><br><span class="line">            br.flush();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(String.format(<span class="string">"%s/%d/%d/%s请求出错!"</span> ,name,level,col,rowExtention));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CorsFilter.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.public_data.public_data.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;web.CorsFilter&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> corsFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (corsFilter) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,PUT,DELETE,OPTIONS"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,Content-Length,Authorization,Accept,X-Requested-With"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置图片路径，在application.properties中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#瓦片存放的本地路径</span><br><span class="line">DATA_PATH = /Users/apple/xxx/xxx</span><br><span class="line">#DATA_PATH = E:/newtask</span><br><span class="line">#设置允许跨域（jar包设置为true，war包设置为false）</span><br><span class="line">web.CorsFilter = true</span><br></pre></td></tr></table></figure><p>地图前端的url：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = 'http://localhost:8080/xyz/roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png';</span><br></pre></td></tr></table></figure><h2 id="本地路径访问"><a href="#本地路径访问" class="headerlink" title="本地路径访问"></a>本地路径访问</h2><p>把url地址写对即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var url = './roadmap/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png'</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> leaflet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地图 </tag>
            
            <tag> gis </tag>
            
            <tag> Springboot </tag>
            
            <tag> 离线地图 </tag>
            
            <tag> leaflet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hugegraph实战总结</title>
      <link href="2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/02/hugegraph%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="hugegraph安装"><a href="#hugegraph安装" class="headerlink" title="hugegraph安装"></a>hugegraph安装</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hugegraph安装比较麻烦，必须版本一致：<br><img src="https://img-blog.csdnimg.cn/20201002152742770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ul><li>hugegraph server是发布图数据的核心服务</li><li>loader用于导入数据</li><li>studio是hugegraph官方的图谱前端，依赖于serve</li></ul><h1 id="本地hugegraph启动"><a href="#本地hugegraph启动" class="headerlink" title="本地hugegraph启动"></a>本地hugegraph启动</h1><h2 id="启动hugegraph-serve："><a href="#启动hugegraph-serve：" class="headerlink" title="启动hugegraph serve："></a>启动hugegraph serve：</h2><pre><code>hugegraph-0.10.4:   默认是8080与8182端口相关配置：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 。。省略</span><br><span class="line">backend=rocksdb</span><br><span class="line">serializer=binary</span><br><span class="line">rocksdb.data_path=.</span><br><span class="line">rocksdb.wal_path=.</span><br><span class="line"></span><br><span class="line">store=hugegraph</span><br><span class="line"></span><br><span class="line">search.text_analyzer=jieba</span><br><span class="line">search.text_analyzer_mode=INDEX</span><br><span class="line"></span><br><span class="line"># rocksdb backend config</span><br><span class="line">#rocksdb.data_path=/path/to/disk</span><br><span class="line">#rocksdb.wal_path=/path/to/disk</span><br></pre></td></tr></table></figure><p>初始化本地的rockdb以及启动serve服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/init-store.sh        </span><br><span class="line">bin/start-hugegraph.sh</span><br></pre></td></tr></table></figure><h2 id="导入数据："><a href="#导入数据：" class="headerlink" title="导入数据："></a>导入数据：</h2><p>在hugegraph-loader-0.10.0下：<br>具体数据格式参考官方的example/file文件，struct.json和schema.groovy</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy</span><br></pre></td></tr></table></figure><h2 id="启动前端："><a href="#启动前端：" class="headerlink" title="启动前端："></a>启动前端：</h2><p>在hugegraph-studio-0.10.0下：   默认值：8088端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-studio.sh</span><br></pre></td></tr></table></figure><p>PS: 一定记得 如果更改了数据， 一定要清空db再导入！！否则前后属性如果不一致会报错！<br>使用tools的清空命令：</p><p>在hugegraph-tools-1.4.0下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph graph-clear -c "I'm sure to delete all data"</span><br></pre></td></tr></table></figure><p>前端更改：增加节点图片：改index.js里面：</p><p><img src="https://img-blog.csdnimg.cn/20201002152536570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h1 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h1><p>服务器上部署会略有不同！<br><a href="https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html" target="_blank" rel="noopener">https://hugegraph.github.io/hugegraph-doc/quickstart/hugegraph-tools.html</a></p><p>导入的命令和本地不同，需要加上ip和端口号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hugegraph-loader -g hugegraph -f example/file/struct.json -s example/file/schema.groovy -h 17x.xx.xx.xx -p 8080</span><br></pre></td></tr></table></figure><p>clear数据库：</p><p>修改hugegraph-tools下面的bin/hugegraph 指定ip和端口即可</p><p>重新导入数据时，需要clear，服务器上需要指定</p><p><img src="https://img-blog.csdnimg.cn/20201002154409198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br>效果图：<br><img src="https://img-blog.csdnimg.cn/20201002154501720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Hugegraph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 知识图谱 </tag>
            
            <tag> hugegraph </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch(下)</title>
      <link href="2020/10/01/elasticsearch-%E4%B8%8B-1/"/>
      <url>2020/10/01/elasticsearch-%E4%B8%8B-1/</url>
      
        <content type="html"><![CDATA[<h2 id="JD商城实战"><a href="#JD商城实战" class="headerlink" title="JD商城实战"></a>JD商城实战</h2><p>新建Springboot initializr项目</p><p>导入es、fastjson等pom下的依赖</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>数据问题？数据库获取，消息队列中获取，都可以成为数据源，或者爬虫</p><p>爬取数据：（获取请求返回的页面信息，筛选出我们想要的数据就可以了）</p><p>jsoup包:用于解析网页，不能爬电影</p><p>新建一个utils包放网页解析的工具类</p><p><img src="https://img-blog.csdnimg.cn/20200902210018737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>本质的请求是：</p><p><a href="https://search.jd.com/Search?keyword=java" target="_blank" rel="noopener">https://search.jd.com/Search?keyword=java</a></p><p><img src="https://img-blog.csdnimg.cn/2020090221003863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>所有在Js中的方法这里都可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword=java"</span>;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line">        System.out.println(element.html());</span><br><span class="line">          <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==============================="</span>);</span><br><span class="line">            System.out.println(img);</span><br><span class="line">            System.out.println(price);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902210114208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210129877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902210152928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>输出结果</p><p><img src="https://img-blog.csdnimg.cn/20200902210209190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>注意：</p><p>在图片较多的网站中，图片往往是延迟加载的，注意看图片的属性：</p><p><img src="https://img-blog.csdnimg.cn/20200902210224973.png#pic_center" alt="在这里插入图片描述"></p><p>将获取到的元素 封装成对象，新建pojo，Content.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String img;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="comment">//可以自己添加属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次封装工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//丢进Springboot中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlParseUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlParseUtil().parseJD(<span class="string">"java"</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Content&gt; <span class="title">parseJD</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求 https://search.jd.com/Search?keyword=java</span></span><br><span class="line">        String url = <span class="string">"https://search.jd.com/Search?keyword="</span> + keywords;</span><br><span class="line">        <span class="comment">//解析网页 Jsoup返回的就是浏览器Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> URL(url), <span class="number">30000</span>);</span><br><span class="line">        <span class="comment">//所有你在js中可以使用的方法，这里都可以使用</span></span><br><span class="line">        Element element = document.getElementById(<span class="string">"J_goodsList"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(element.html());</span></span><br><span class="line">        <span class="comment">//获取所有的li元素/标签</span></span><br><span class="line">        Elements elements = element.getElementsByTag(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        ArrayList&lt;Content&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;Content&gt;();</span><br><span class="line">        <span class="comment">//获取元素中的内容  eq获取当前第一个元素，获取src属性</span></span><br><span class="line">        <span class="keyword">for</span> (Element el : elements) &#123;</span><br><span class="line">            <span class="comment">//关于这种图片特别多的网站，所有的图片都是延迟加载的！</span></span><br><span class="line">            String img = el.getElementsByTag(<span class="string">"img"</span>).eq(<span class="number">0</span>).attr(<span class="string">"src"</span>);</span><br><span class="line">            String price = el.getElementsByClass(<span class="string">"p-price"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line">            String title = el.getElementsByClass(<span class="string">"p-name"</span>).eq(<span class="number">0</span>).text();</span><br><span class="line"></span><br><span class="line">            Content content = <span class="keyword">new</span> Content();</span><br><span class="line">            content.setImg(img);</span><br><span class="line">            content.setPrice(price);</span><br><span class="line">            content.setTitle(title);</span><br><span class="line">            goodsList.add(content);</span><br><span class="line"><span class="comment">//            System.out.println("===============================");</span></span><br><span class="line"><span class="comment">//            System.out.println(img);</span></span><br><span class="line"><span class="comment">//            System.out.println(price);</span></span><br><span class="line"><span class="comment">//            System.out.println(title);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> goodsList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写业务层service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.Content;</span><br><span class="line"><span class="keyword">import</span> com.kun.utils.HtmlParseUtil;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.bulk.BulkResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.xcontent.XContentType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//业务编写</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.解析数据放入es索引中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">parseContent</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Content&gt; contents = <span class="keyword">new</span> HtmlParseUtil().parseJD(keywords);</span><br><span class="line">        <span class="comment">//把查询的数据放入我们的es中</span></span><br><span class="line">        BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">        bulkRequest.timeout(<span class="string">"2m"</span>);</span><br><span class="line"><span class="comment">//批量插入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contents.size(); i++) &#123;</span><br><span class="line">            bulkRequest.add(</span><br><span class="line">                    <span class="keyword">new</span> IndexRequest(<span class="string">"jd_goods"</span>)</span><br><span class="line">                            .source(JSON.toJSONString(contents.get(i)), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BulkResponse bulk = restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> !bulk.hasFailures();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：由于这个文件中又Autowire，所以就算建了主函数psvm，也不能测，必须启动服务；</p><p>直接用controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.service.ContentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ContentService contentService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Boolean <span class="title">parse</span><span class="params">(@PathVariable(<span class="string">"keyword"</span>)</span> String keywords) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>  contentService.parseContent(keywords);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在业务层中实现搜索功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 获取数据实现搜索功能</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPage(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span>(pageNo&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        pageNo = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件搜索</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    sourceBuilder.from(pageNo);</span><br><span class="line">    sourceBuilder.size(pageSize);</span><br><span class="line">    <span class="comment">//精准匹配</span></span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"title"</span>, keyword);</span><br><span class="line">    sourceBuilder.query(termQueryBuilder);</span><br><span class="line">    sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//解析结果</span></span><br><span class="line">    ArrayList&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">        list.add(documentFields.getSourceAsMap());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Controller来测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/parse/&#123;keyword&#125;/&#123;pageNo&#125;/&#123;pageSize&#125;"</span>)</span><br><span class="line">  <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; search(<span class="meta">@PathVariable</span>(<span class="string">"keyword"</span>) String keyword,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageNo"</span>)<span class="keyword">int</span> pageNo,</span><br><span class="line">                                         <span class="meta">@PathVariable</span>(<span class="string">"pageSize"</span>) <span class="keyword">int</span> pageSize) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="keyword">return</span> contentService.searchPage(keyword, pageNo, pageSize);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>先在一个任意包下<code>npm install vue</code>生成vue文件，将内部一些js包导入Springboot项目中；axios.min.js;vue.min.js</p><p><img src="https://img-blog.csdnimg.cn/2020090221025572.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200902210315359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>在前端每个商品中得到result值</p><p><img src="https://img-blog.csdnimg.cn/20200902210337955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="搜索高亮"><a href="#搜索高亮" class="headerlink" title="搜索高亮"></a>搜索高亮</h3><p>修改业务层ContentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//3. 新增高亮功能</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; searchPageHighlightBuilder(String keyword,<span class="keyword">int</span> pageNo,<span class="keyword">int</span> pageSize) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        parseContent(keyword);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pageNo &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            pageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//条件搜索</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">"jd_goods"</span>);</span><br><span class="line">        SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        sourceBuilder.from(pageNo);</span><br><span class="line">        sourceBuilder.size(pageSize);</span><br><span class="line">        <span class="comment">//精准匹配</span></span><br><span class="line"><span class="comment">//        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery("title", keyword);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.query(termQueryBuilder);</span></span><br><span class="line"><span class="comment">//        sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//match匹配 可以支持中文搜索</span></span><br><span class="line">        MatchQueryBuilder matchQueryBuilder = <span class="keyword">new</span> MatchQueryBuilder(<span class="string">"title"</span>, keyword);</span><br><span class="line">        sourceBuilder.query(matchQueryBuilder);</span><br><span class="line">        sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));<span class="comment">//超时</span></span><br><span class="line">        <span class="comment">//高亮</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">"title"</span>); <span class="comment">//高亮的字段</span></span><br><span class="line">        highlightBuilder.requireFieldMatch(<span class="keyword">false</span>);<span class="comment">//如果一句里面有多个关键词高亮，则只显示第一个</span></span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;span style='color:red'&gt;"</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">"&lt;/span&gt;"</span>);</span><br><span class="line">        sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">        <span class="comment">//执行搜索</span></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line">        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//解析结果</span></span><br><span class="line">        ArrayList&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;</span><br><span class="line"></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields(); <span class="comment">//获取到高亮字段</span></span><br><span class="line">            HighlightField title = highlightFields.get(<span class="string">"title"</span>);</span><br><span class="line">            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap(); <span class="comment">//原来的结果！要在结果里面将高亮置换一下</span></span><br><span class="line">            <span class="comment">//解析高亮的字段 将原来的字段换为我们高亮的字段即可</span></span><br><span class="line">            <span class="keyword">if</span> (title != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Text[] fragments = title.fragments();</span><br><span class="line">                String n_title = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (Text text : fragments) &#123;</span><br><span class="line">                    n_title += text;</span><br><span class="line">                &#125;</span><br><span class="line">                sourceAsMap.put(<span class="string">"title"</span>, n_title);<span class="comment">//高亮字段替换掉原来的内容即可！</span></span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sourceAsMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20200902210811692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch(中)</title>
      <link href="2020/09/02/elasticsearch-%E4%B8%AD/"/>
      <url>2020/09/02/elasticsearch-%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="关于文档的基本操作（重点）："><a href="#关于文档的基本操作（重点）：" class="headerlink" title="关于文档的基本操作（重点）："></a>关于文档的基本操作（重点）：</h2><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204531474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204542249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新数据，将小明改成小红"><a href="#更新数据，将小明改成小红" class="headerlink" title="更新数据，将小明改成小红"></a>更新数据，将小明改成小红</h4><p><img src="https://img-blog.csdnimg.cn/20200902204557115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="PUT更新数据"><a href="#PUT更新数据" class="headerlink" title="PUT更新数据"></a>PUT更新数据</h4><p><img src="https://img-blog.csdnimg.cn/20200902204609525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>version代表被改变的次数</p><p>Post,_update自由度更高，PUT必须一次性修改一个个体的全部内容，但是Post可以选择部分修改！</p><p><img src="https://img-blog.csdnimg.cn/20200902204624164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>这个和PUT无异，要在后加_update</p><p><img src="https://img-blog.csdnimg.cn/20200902204637593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220465930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="简单的搜索："><a href="#简单的搜索：" class="headerlink" title="简单的搜索："></a>简单的搜索：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET Kuangshen&#x2F;user&#x2F;_search?q&#x3D;name:狂神说</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204720262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>简单的条件查询，可以根据默认的映射规则，产生基本的查询！</p><p><img src="https://img-blog.csdnimg.cn/20200902204750491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>复杂操作搜索 select（排序，分页，高亮，模糊查询，精准查询）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;张三&quot;,</span><br><span class="line">          &quot;age&quot; : 3,</span><br><span class="line">          &quot;desc&quot; : &quot;法外狂徒&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;交友&quot;,</span><br><span class="line">            &quot;旅游&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;李四&quot;,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;desc&quot; : &quot;不知道如何形容&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;篮球&quot;,</span><br><span class="line">            &quot;IT&quot;,</span><br><span class="line">            &quot;型男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;王五&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个屌丝&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;羽毛球&quot;,</span><br><span class="line">            &quot;钢琴&quot;,</span><br><span class="line">            &quot;渣男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 9,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.9034984,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.9034984,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说&quot;,</span><br><span class="line">          &quot;age&quot; : 23,</span><br><span class="line">          &quot;desc&quot; : &quot;一顿操作猛如虎，一看工资2500&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;技术宅&quot;,</span><br><span class="line">            &quot;温暖&quot;,</span><br><span class="line">            &quot;直男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;kuangshen&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;user&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.6534033,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;狂神说Java8&quot;,</span><br><span class="line">          &quot;age&quot; : 34,</span><br><span class="line">          &quot;desc&quot; : &quot;就是一个大帅哥&quot;,</span><br><span class="line">          &quot;tags&quot; : [</span><br><span class="line">            &quot;围棋&quot;,</span><br><span class="line">            &quot;小提琴&quot;,</span><br><span class="line">            &quot;暖男&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hit: 索引和文档信息</p><p>查询的结果总数</p><p>然后就是查询出来的具体文档</p><p>数据中的东西都可以遍历出来</p><p>分数：通过score判断谁更加符合结果</p><h4 id="指定字段查询："><a href="#指定字段查询：" class="headerlink" title="指定字段查询："></a>指定字段查询：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: [&quot;name&quot;,&quot;desc&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后使用java操作es，所有的方法和对象就是这里面的key！</p><h3 id="复杂操作："><a href="#复杂操作：" class="headerlink" title="复杂操作："></a>复杂操作：</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>order中的desc降序、asc升序;按照age</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,&quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From:从第几个数据开始，返回多少条数据（单页面的数据）</p><p>数据下标还是从0开始的，和学的所有数据结构是一样的</p><p>/search/{current}/{pagesize}</p><h4 id="布尔值查询"><a href="#布尔值查询" class="headerlink" title="布尔值查询"></a>布尔值查询</h4><p>通过布尔值进行更加精确的查询：多条件精确查询</p><p>must命令（相当于mysql的and），即所有条件要同时符合；如果将must改为should（相当于or），则只要满足其一即可；</p><p>类似的  must not 查询不是。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 23</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤器（filter）"><a href="#过滤器（filter）" class="headerlink" title="过滤器（filter）"></a>过滤器（filter）</h4><p>筛选age范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;狂神&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 10,</span><br><span class="line">              &quot;lte&quot;: 40</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gt 大于</li><li>gte 大于等于</li><li>lt 小于</li><li>lte 小于等于</li></ul><h4 id="匹配多个条件"><a href="#匹配多个条件" class="headerlink" title="匹配多个条件"></a>匹配多个条件</h4><p>匹配出tags里面只要包含有男的，同时按照上到下分值高到低排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;tags&quot;: &quot;男 技术&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204843612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>多个条件使用空格隔开</p><p>只要满足其中一个结果即可以被查出</p><p>这个时候可以通过分值基本的判断</p><h4 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h4><p>term查询是直接通过待排索引指定的词条进行精确的查找的！</p><p>关于分词：</p><p>term，直接查询精确的</p><p>match：会使用分词器解析！（先分析文档，然后再通过分析的文档进行查询！）</p><h4 id="两个字段类型text-keyword"><a href="#两个字段类型text-keyword" class="headerlink" title="两个字段类型text keyword"></a>两个字段类型text keyword</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#新建db</span><br><span class="line">PUT testdb</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">       &quot;desc&quot;:&#123;</span><br><span class="line">         &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">       &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#插入两条数据</span><br><span class="line">PUT testdb&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> PUT testdb&#x2F;_doc&#x2F;2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;狂神说Java name&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;狂神说Java name2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204916616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;狂神说Java name&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/202009022050161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205033299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于desc的type是keyword，当做整体去搜索了</p><p>总结：<strong>keyword字段类型不会被分词器解析！</strong></p><h4 id="多个值匹配的精确查询"><a href="#多个值匹配的精确查询" class="headerlink" title="多个值匹配的精确查询"></a>多个值匹配的精确查询</h4><p>精确查询多个值</p><p><img src="https://img-blog.csdnimg.cn/20200902205051762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET kuangshen&#x2F;user&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;狂神说&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: &quot;&lt;p class&#x3D;&#39;key&#39; style&#x3D;&#39;color:red&#39;&gt;&quot;, </span><br><span class="line">    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;, </span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认是<code>&lt;em&gt;</code>标签</p><p><img src="https://img-blog.csdnimg.cn/20200902205112655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>也可以是自定义标签：设置pre_tags、post_tags</p><p><img src="https://img-blog.csdnimg.cn/20200902205134748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>匹配</li><li>按照条件匹配</li><li>精确匹配</li><li>区间范围匹配</li><li>匹配字段过滤</li><li>多条件查询</li><li>高亮查询</li></ul><h2 id="集成Springboot"><a href="#集成Springboot" class="headerlink" title="集成Springboot"></a>集成Springboot</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/index.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200902205202942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="找原生依赖"><a href="#找原生依赖" class="headerlink" title="找原生依赖"></a>找原生依赖</h4><p><img src="https://img-blog.csdnimg.cn/20200902205225827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p><img src="https://img-blog.csdnimg.cn/20200902205249274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>新建一个empty project ，再创建普通模块</p><p><img src="https://img-blog.csdnimg.cn/2020090220533562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>创建Springboot 模块：</p><p><img src="https://img-blog.csdnimg.cn/20200902205358941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>勾上依赖：</p><p><img src="https://img-blog.csdnimg.cn/20200902205446302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>由于刚刚建的空project，故要陪JDK环境</p><p><img src="https://img-blog.csdnimg.cn/20200902205503601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205545193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205617604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220563956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>问题：一定要保证我们的导入依赖和我们的es版本一致</p><p>默认的导入依赖和我们本地的版本不一致！</p><p>可以自定义版本依赖，保证一致</p><p>新建config、ElasticSearchConfig.java`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狂神的spring两步骤：</span></span><br><span class="line"><span class="comment">//1.找对象</span></span><br><span class="line"><span class="comment">//2.放到spring中用</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(</span><br><span class="line">                RestClient.builder(</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)));</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码</p><p><img src="https://img-blog.csdnimg.cn/20200902205659550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="具体测试es-api："><a href="#具体测试es-api：" class="headerlink" title="具体测试es api："></a>具体测试es api：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es 高级客户端测试API</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuangshenEsApiApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="comment">//面向对象来操作</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"restHighLevelClient"</span>)  <span class="comment">//这里的qualifier用来指定下面的client为原始的restHighLevelClient</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试索引的创建 Request</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建索引请求 相当于kibana中的PUT</span></span><br><span class="line">CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="comment">// 2.执行创建请求IndicesClient ,请求后获得响应</span></span><br><span class="line">CreateIndexResponse createIndexResponse =</span><br><span class="line">client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(createIndexResponse);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//测试获取索引   判断是否存在某索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testExistIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"><span class="keyword">boolean</span> exists = client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(exists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span>  <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">"testdb2"</span>);</span><br><span class="line">AcknowledgedResponse delete = client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(delete.isAcknowledged());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来应该是private RestHighLevelClient restHighLevelClient;这里为了简便，所以用Qualifier来限定client为restHighLevelClient；</p><p><img src="https://img-blog.csdnimg.cn/20200902205728393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205815265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902205829872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>创建索引</li><li>判断索引是否存在</li><li>删除索引</li><li>创建文档</li><li>crud文档</li></ul><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><p>新建一个pojo，放入User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于要将我们的数据放入请求 json，故在pom中导入阿里巴巴fastjson</p><p>这里是将对象编写为Json，再放入es的request中</p><p>编写test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testAddDocument</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说"</span>,<span class="number">3</span>);</span><br><span class="line">IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规则 put /kuang_index/_doc/1</span></span><br><span class="line">request.id(<span class="string">"1"</span>);</span><br><span class="line">request.timeout(TimeValue.timeValueSeconds(<span class="number">1</span>));</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将我们的数据放入请求 json</span></span><br><span class="line">request.source(JSON.toJSONString(user), XContentType.JSON);</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端发送请求</span></span><br><span class="line">IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(indexResponse.toString());<span class="comment">//</span></span><br><span class="line">System.out.println(indexResponse.status());<span class="comment">//对应我们命令返回的状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205848762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="获取文档"><a href="#获取文档" class="headerlink" title="获取文档"></a>获取文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(getResponse.getSourceAsString());<span class="comment">//打印文档的内容</span></span><br><span class="line">System.out.println(getResponse);<span class="comment">//返回的全部内容和命令是一样的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205903708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="更新文档信息"><a href="#更新文档信息" class="headerlink" title="更新文档信息"></a>更新文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新文档的信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testUpdateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"kuang_index"</span>,<span class="string">"1"</span>);</span><br><span class="line">updateRequest.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"狂神说Java"</span>, <span class="number">18</span>);</span><br><span class="line">updateRequest.doc(JSON.toJSONString(user),XContentType.JSON);</span><br><span class="line"></span><br><span class="line">UpdateResponse updateResponse = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(updateResponse.status());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205926881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="删除文档信息"><a href="#删除文档信息" class="headerlink" title="删除文档信息"></a>删除文档信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文档记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testDeleteRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteRequest request = <span class="keyword">new</span> DeleteRequest(<span class="string">"kuang_index"</span>, <span class="string">"1"</span>);</span><br><span class="line">request.timeout(<span class="string">"1s"</span>);</span><br><span class="line"></span><br><span class="line">DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">bulkRequest.timeout(<span class="string">"10s"</span>);<span class="comment">//数据量大的时候，秒数可以增加</span></span><br><span class="line"></span><br><span class="line">ArrayList&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz"</span>,<span class="number">11</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz2"</span>,<span class="number">12</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz3"</span>,<span class="number">13</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz4"</span>,<span class="number">14</span>));</span><br><span class="line">userList.add(<span class="keyword">new</span> User(<span class="string">"psz5"</span>,<span class="number">15</span>));</span><br><span class="line"><span class="comment">//批处理请求</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">bulkRequest.add(</span><br><span class="line"><span class="keyword">new</span> IndexRequest(<span class="string">"kuang_index"</span>)</span><br><span class="line">.id(<span class="string">""</span>+(i+<span class="number">1</span>))</span><br><span class="line">.source(JSON.toJSONString(userList.get(i)),XContentType.JSON));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求+获得响应</span></span><br><span class="line">BulkResponse bulkResponse = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println(bulkResponse.hasFailures());<span class="comment">//返回false：成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902205948550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>小技巧：</p><p>一般企业中，会把index名存在utils里面的ESconst.java文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESconst</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ES_INDEX = <span class="string">"kuang_index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">// SearchRequest 搜索请求</span></span><br><span class="line"><span class="comment">// SearchSourceBuilder 条件构造</span></span><br><span class="line"><span class="comment">// HighlightBuilder 构建高亮</span></span><br><span class="line"><span class="comment">// TermQueryBuilder 精确查询</span></span><br><span class="line"><span class="comment">// MatchAllQueryBuilder</span></span><br><span class="line"><span class="comment">// xxx QueryBuilder 对应我们刚才看到的命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(ESconst.ES_INDEX);</span><br><span class="line"><span class="comment">// 构建搜索的条件</span></span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件,可以使用querybuilders工具类实现</span></span><br><span class="line"><span class="comment">// QueryBuilders.termQuery精确匹配</span></span><br><span class="line"><span class="comment">// QueryBuilders.matchAllQuery匹配所有</span></span><br><span class="line">TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"name"</span>, <span class="string">"qinjiang1"</span>);</span><br><span class="line"><span class="comment">//MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span></span><br><span class="line">sourceBuilder.query(termQueryBuilder);</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="comment">//sourceBuilder.from();</span></span><br><span class="line"><span class="comment">//sourceBuilder.size();</span></span><br><span class="line"><span class="comment">// 设置查询的时间 希望在60s内查出</span></span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">searchRequest.source(sourceBuilder);</span><br><span class="line">SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">System.out.println(JSON.toJSONString(searchResponse.getHits()));</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line"><span class="keyword">for</span> (SearchHit documentFields : searchResponse.getHits().getHits()) &#123;</span><br><span class="line">System.out.println(documentFields.getSourceAsMap());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探ElasticSearch+JD商城仿站实战(上)</title>
      <link href="2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/"/>
      <url>2020/09/02/%E5%88%9D%E6%8E%A2ElasticSearch-JD%E5%95%86%E5%9F%8E%E4%BB%BF%E7%AB%99%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="安装elasticsearch"><a href="#安装elasticsearch" class="headerlink" title="安装elasticsearch"></a>安装elasticsearch</h2><p>官网:elastic.co</p><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>官网下载巨慢，翻墙下载</p><p>目录</p><p><img src="https://img-blog.csdnimg.cn/20200902202036128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>启动，访问9200：<br><img src="https://img-blog.csdnimg.cn/20200902202356416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902202418408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>访问9200接口：<br> <img src="https://img-blog.csdnimg.cn/20200902202445139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装elasticsearch-head："><a href="#安装elasticsearch-head：" class="headerlink" title="安装elasticsearch-head："></a>安装elasticsearch-head：</h2><p>git clone git://github.com/mobz/elasticsearch-head.git</p><p>cd elasticsearch-head</p><p>npm install</p><p>npm run start</p><p>open <a href="http://localhost:9100/" target="_blank" rel="noopener">http://localhost:9100/</a></p><p>存在一个9200和9100的跨域问题！</p><p>点击链接，报跨域的错！</p><p><img src="https://img-blog.csdnimg.cn/20200902202606182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改elasticsearch中config下的yaml配置文件，修改：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202629294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启，连接成功：</p><p> <img src="https://img-blog.csdnimg.cn/20200902202646249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>把索引当做一个数据库！可以建立索引（库），文档（库中的数据！）</p><p><img src="https://img-blog.csdnimg.cn/20200902202740368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>后面所有的查询，查询功能在<strong>Kibana</strong>中做！</p><h2 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a>了解ELK</h2><p> <img src="https://img-blog.csdnimg.cn/20200902202848351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p><img src="https://img-blog.csdnimg.cn/20200902202904980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>好处：ELK基本上都是拆箱即用</p><p>启动测试：点bin下的kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902202930697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>默认的kibana端口为5601</p><p>PS：<strong>注意elasticsearch和kibana的版本必须一致</strong> 否则出错！</p><p>开发工具：（Post curl head 谷歌浏览器插件测试）</p><p>汉化，修改kibana yaml中配置 重启，</p><h2 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h2><ol><li>索引</li><li>字段类型（mapping）</li><li>文档（documents）</li></ol><p>概述：</p><p>集群、节点、索引、类型、文档、分片、映射是什么?</p><p>elasticsearch是面向文档，关系型数据库和elasticsearch 客观的对比如下，一切都是JSON！</p><p><img src="https://img-blog.csdnimg.cn/20200902203224509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020090220333641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>类型示例：</p><p><img src="https://img-blog.csdnimg.cn/20200902203401778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200902203433671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203518682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"> </p><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p><img src="https://img-blog.csdnimg.cn/20200902203602334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>安装<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>放在elasticsearch的plugin（插件）下</p><p>重启观察ES</p><p><img src="https://img-blog.csdnimg.cn/20200902203708754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>关于elasticsearch中的命令 如elasticsearch-plugin：</p><p>命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch-plugin list</span><br></pre></td></tr></table></figure><p>在kibana中测分词器：</p><p><img src="https://img-blog.csdnimg.cn/20200902203744169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>我们输入 超级喜欢狂神或java</p><p>发现问题：狂神说被拆开了！</p><p>这种自己需要的词，需要自己加到我们的分词器字典中！</p><p>向ik分词器增加自己的配置</p><p><img src="https://img-blog.csdnimg.cn/2020090220382014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203835726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>重启es、kibana</p><p><img src="https://img-blog.csdnimg.cn/20200902203858320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>再次测试一下狂神说，看下效果！ik_max_word最细粒度划分</p><p><img src="https://img-blog.csdnimg.cn/20200902203920309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902203939488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>以后自定义dic、导入即可！</p><p>索引引擎里面最重要的首先就是分词</p><h2 id="Rest风格说明"><a href="#Rest风格说明" class="headerlink" title="Rest风格说明"></a>Rest风格说明</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制！</p><p><img src="https://img-blog.csdnimg.cn/20200902204000238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>基础测试</p><ol><li>创建一个索引！也是在kibana终端中试用版PUT命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test1&#x2F;type1&#x2F;1&#123;  </span><br><span class="line">&quot;name&quot;: &quot;狂神说&quot;, </span><br><span class="line">&quot;age&quot;: &quot;3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200902204049169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>完成了自动增加索引！数据也成功的添加了，这就是可以当做数据库看的原因。。</p><ol start="2"><li><p>那么name字段用不用指定类型呢？毕竟我们关系型数据库 是需要指定类型的啊！</p><ul><li>字符串类型 text、keyword</li><li>数值类型 long、integer、short、byte、double、float、scaled float</li><li>日期类型date</li><li>te布尔值类型boolean</li><li>二进制类型binary</li><li>等等。。。</li></ul></li><li><p>指定字段的类型——创建规则</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200902204112495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/2020090220423579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "></p><p>GET命令得到库的信息：</p><p><img src="https://img-blog.csdnimg.cn/20200902204250447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200902204308198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><ol start="4"><li>查看默认的信息</li></ol><p>通过命令get _cat/可以获得es当前的很多信息！<br><img src="https://img-blog.csdnimg.cn/20200902204407775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200902204421616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>修改 提交还是使用PUT即可！然后覆盖！最新办法</p><p>曾经的办法：</p><p><img src="https://img-blog.csdnimg.cn/20200902204437570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>现在的方法 使用POST：</p><p><img src="https://img-blog.csdnimg.cn/20200902204448548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>删除索引——DELETE<br><img src="https://img-blog.csdnimg.cn/20200902204500303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>通过DELETE命令实现删除、根据你的请求来判断是删除索引还是删除文档记录！</p><p>使用RESTFUL风格是我们ES推荐大家使用的！</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> 京东商城实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术笔记ch5</title>
      <link href="2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/"/>
      <url>2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0ch5/</url>
      
        <content type="html"><![CDATA[<h3 id="静态工厂方法"><a href="#静态工厂方法" class="headerlink" title="静态工厂方法"></a>静态工厂方法</h3><p>类似LocalDate和NumberFormat的类使用静态工厂方法来构造对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();</span><br><span class="line">NumberFormat percentFormatter = NumberFormat.gatPercentInstance();</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">System.out.println(currencyFormatter.format(x));  <span class="comment">//0.1</span></span><br><span class="line">System.out.println(percentFormatter.format(x));   <span class="comment">//10%</span></span><br></pre></td></tr></table></figure><p>这里的NumberFormat类不使用构造器来完成，有两个原因：</p><ul><li>无法命名构造器。构造器名字必须与类相同，这里希望有两个不同名字，分别得到货币实例和百分比实例。</li><li>使用构造器时，无法改变所构造对象的类型，而工厂方法实际上将返回DecimalFormat类的对象，是NumberFormat的子类</li></ul><h3 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h3><p>main方法也是一种静态方法。main方法不对任何对象进行操作，事实上，启动程序时还没有任何对象。静态的main方法将执行并构造程序所需要的对象。</p><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>按值调用——表示方法接受的是调用者提供的值；</p><p>按引用调用——表示方法接收的是调用者提供的变量地址。</p><p>Java总是按值调用的。方法得到的是所有参数值的一个副本。也就是说，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">harry.raiseSalary(percent);</span><br></pre></td></tr></table></figure><p>无论方法如何实现，在这个方法调用后，percent值还是10。</p><p>但是对于对象引用则不同！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line"></span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体为：</p><ol><li>x初始化为harry值的一个副本，这里就是一个对象引用。</li><li>raiseSalary方法应用于这个对象引用。x和salary同时引用的那个Employee对象的工资提高了200%。</li><li>方法结束后x不再使用，对象变量harry继续引用那个工资增至3倍的员工对象</li></ol><h3 id="总结Java方法参数"><a href="#总结Java方法参数" class="headerlink" title="总结Java方法参数"></a>总结Java方法参数</h3><ul><li>方法不能修改基本数据类型的参数</li><li>方法可以改变对象参数的状态</li><li>方法参数不能让一个对象参数引用一个新的对象</li></ul><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><p>重载——同方法、不同参数</p><p>默认字段初始化：如果构造器中没有显示地为字段设置初值，则会被自动的赋为默认值！数值为0、布尔值为false、对象引用为null</p><p>无参构造器：如果编写一个类没有无参构造，就会为你提供一个无参数的构造器，如果已经只定义了有参，再调无参则不合法。</p><h4 id="参数名的定义："><a href="#参数名的定义：" class="headerlink" title="参数名的定义："></a>参数名的定义：</h4><p>习惯将参数名和实例字段保持一致，通过<strong>this</strong>来区分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.salary = salary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this的另一用法："><a href="#this的另一用法：" class="headerlink" title="this的另一用法："></a>this的另一用法：</h4><p>this除了可以指示一个方法的隐式参数外，还可以调用同一个类的另一个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="string">"Employee #"</span> + nextId,s);</span><br><span class="line">   nextId ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用new Employee(6000)，Employee(double)构造器会调用Employee(String,double)构造器。</p><h4 id="初始化块："><a href="#初始化块：" class="headerlink" title="初始化块："></a>初始化块：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//初始化块</span></span><br><span class="line">  &#123;</span><br><span class="line">    id = nextId;</span><br><span class="line">    nextId ++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = n;</span><br><span class="line">    salary = s;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String n,<span class="keyword">double</span> s)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    name = <span class="string">""</span>;</span><br><span class="line">    salary = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前有两种初始化数据字段的方法：</p><ul><li>构造器中赋值</li><li>声明中赋值</li></ul><p>另一个则是设置一个初始化块，只要构造这个类的对象，初始化块就会被执行——首先运行初始化快，然后才运行构造器的主体部分。</p><p>但是这不是必需的，通常将<strong>初始化代码放在构造器中</strong></p><p>区分于静态字段对应的静态代码块：如果类的静态字段需要很复杂的初始化代码，那么可以使用静态的初始化块</p><p>区分初始化块和静态初始化块：</p><ul><li><strong>静态初始化块</strong>:使用static定义,当类装载到系统时执行一次.若在静态初始化块中想初始化变量,那仅能初始化类变量,即static修饰的数据成员.</li><li><strong>非静态初始化块</strong>:在每个对象生成时都会被执行一次,可以初始化类的实例变量.</li></ul><h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><ul><li>保证数据私有</li><li>一定要对数据进行初始化</li><li>不要在类中使用过多的基本类型</li><li>不是所有字段都需要单独的字段访问器和字段更改器</li><li>分解有过多职责的类</li><li>类名和方法名要足够体现它们的职责</li><li>优先使用不可变的类</li></ul><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1><p>继承的基本思想：基于已有的类创建新的类。就是复用已有类的方法，并且可以增加一些新的方法和字段</p><h2 id="类、超类和子类"><a href="#类、超类和子类" class="headerlink" title="类、超类和子类"></a>类、超类和子类</h2><p>已存在的类——超类、基类、父类；新类——子类、派生类、孩子类</p><p>如Employee中的经理和和员工在薪资待遇上面存在一些差异，但也存在很多相同的地方。他们之间存在一个明显的“is-a”关系，每一个经理都是一个员工：<strong>“is-a”</strong>关系是继承的明显特征</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//added methods and fields</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> bonus;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setBonus不是在Employee中定义的，所以Employee不能使用它。经理继承了name、salary、hireDay三个字段，并且新增了bonus字段。</p><p>覆盖方法：</p><p>如果要返回经理的奖金</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> salary + bonus <span class="comment">//不成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为salary是父类的私有字段，子类Manager的getSalary方法不能直接访问到！</p><p>如果我们想调用父类Employee的getSalary方法，而不是当前类的这个方法，可以用super.getSalary()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">double</span> baseSalary = <span class="keyword">super</span>.getSalary();</span><br><span class="line">  <span class="keyword">return</span> baseSalary + bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的super和this不能等同于一类，因为super不是一个对象的引用，例如，不能将值super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。</p><p>注意：</p><ul><li>子类可以增加字段、增加方法或覆盖超类的方法，继承绝不会删除任何字段或方法<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="深入理解父子类继承（子类构造器）"><a href="#深入理解父子类继承（子类构造器）" class="headerlink" title="深入理解父子类继承（子类构造器）"></a>深入理解父子类继承（子类构造器）</h2></li></ul><p>有关子类是否继承了父类的私有字段（再理解）</p><p>如，Student类继承了Person类</p><p><strong>Student对象里，本身就装着一个Person对象</strong>。Student对象没有继承Person对象的name字段，所以Student对象没有一个叫name的字段。但Student内部封装的Person对象还是有name字段的。</p><img src="https://img-blog.csdnimg.cn/20200827225928570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student没有name字段，但它内部的Person对象有，而且还可以打出来看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// ERROR: name has private access in Person</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而且注意，我要直接打印Student的name字段 “s.name” ，报错说的是：<strong>Person类的name字段为私有，你不可以访问。而不是没有name字段。</strong></p><p>大胆一点的话，我们还可以给Student类再加一个name字段。这时候的Student对象本身有一个name字段，内部的基类Person对象还有一个name对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String personName, String studentName, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(personName);</span><br><span class="line">       <span class="keyword">this</span>.name = studentName;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"bitch"</span>,<span class="string">"whore"</span>,<span class="number">99</span>);</span><br><span class="line">        System.out.println(s.getName()); <span class="comment">// BITCH</span></span><br><span class="line">        System.out.println(s.name); <span class="comment">// WHORE</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>使用super调用构造器，必须是子类构造器的第一条语句</li><li>子类构造器如果没有显式地调用超类的构造器，将自动地调用超类的无参数构造器，所以必须要求父类有无参构造，否则报错</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(<span class="string">"Carl Cracker"</span>,<span class="number">8000</span>,<span class="number">1987</span>,<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">boss.setBonus(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br><span class="line">staff[<span class="number">1</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">staff[<span class="number">2</span>] = <span class="keyword">new</span> Employee(<span class="string">"Tony"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Employee e:staff)</span><br><span class="line">  System.out.println(e.getName() + <span class="string">" "</span> + e.getSalary());</span><br></pre></td></tr></table></figure><p>对于e来说，既可以是Manager也可以是Employee，像这种的，一个对象变量可以指示多种实际类型的现象称为多态，在运行时可以自动地选择适当的方法，称为<strong>动态绑定</strong></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = <span class="keyword">new</span> Manager(...);</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">staff[<span class="number">0</span>] = boss;</span><br></pre></td></tr></table></figure><p>这里面采用了多态，虽然staff[0]和boss引用同一个对象，但是编译器只将staff[0]看成是一个Employee对象，这意味着，可以这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boss.setBonus(<span class="number">5000</span>); <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>但不能这么调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>].setBonus(<span class="number">5000</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>这是因为staff[0]的声明类型是Employee，而setBonus不是Employee的方法。setBonus是Manager特有的方法，而不是覆盖重写父类的方法</p><p>多态——当声明变量为某一种形态的变量时，编译器就将它看成某种形态。</p><p>注意</p><ul><li>不能将超类的引用赋值给子类变量，如下非法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager m = staff[i]; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>原因很清楚：不是所有的员工都是经理，如果赋值成功，m有可能引用了一个不是经理的Employee对象，而在后面有可能会调用m.setBonus，这就会发生错误。</p><h3 id="警告："><a href="#警告：" class="headerlink" title="警告："></a>警告：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manager[] managers = <span class="keyword">new</span> Manager[<span class="number">10</span>];</span><br><span class="line">Employee[] staff = managers; <span class="comment">//OK</span></span><br></pre></td></tr></table></figure><p>这样是没有问题的，因为manger[i]是一个Manager就一定是一个Employee！一定要切记：这里的staff和mangers引用的是同一个数组，就是一开始new的长度为10的数组！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">staff[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>);</span><br></pre></td></tr></table></figure><p>如果这么去赋值，编译器是可以接受的！但是！！staff[0]和managers[0]是相同的引用，我们把一个普通的员工Harry擅自归入到经理行列（数组）里面去了！！后面如果调用manager[0].setBonus(1000)的时候，将会试图调用一个根本不存在的实例字段，进而搅乱相邻存储空间的内容</p><p>牢记：所有数组要牢记创建时候的元素类型，并负责监督仅将类型兼容的引用存储到数组中！例如，使用new managers[10]创建数组是一个经理数组如果试图存储一个Employee类型的引用就会引发ArrayStoreException异常 </p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ol><li><p>编译器查看对象的声明类型和方法名。</p></li><li><p>确定方法调用中提供的参数类型。</p></li><li><p>如果是private、static、final或者构造器，那么编译器将可以准确地知道应该调用哪个方法。——静态绑定；</p><p>动态绑定——如果调用的方法依赖于隐式参数的实际类型，则必须在运行的时候使用动态绑定。</p></li></ol><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>对于对象：</p><p>由于在员工列表中，一部分是纯员工，有一部分是经理（子类），在创建数组的时候申明的是Employee对象，而Employee对象无法读取到其Manager字段或方法等属性（多态），那么在实际用Manager这个对象的时候，要先强制转换成Manager类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Manager boss = (Manager)staff[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>将其复原为Manager对象，以便于访问其额外的字段，如bonus奖金。当然，前提是0号确实是Manager，如果“谎报”，则会报错ClassCastException，为了确保不会谎报，可以先判断一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (staff[<span class="number">0</span>] <span class="keyword">instanceof</span> Manager)</span><br><span class="line">&#123;</span><br><span class="line">  boss = (Manager)staff[<span class="number">1</span>];</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="受保护字段protected"><a href="#受保护字段protected" class="headerlink" title="受保护字段protected"></a>受保护字段protected</h2><p>一般来说，声明为private私有，对其他类都是不可见的，即，子类不能访问超类的私有字段。不过有时候希望限制<strong>超类中的某个方法只允许子类访问</strong>，或者<strong>希望子类的方法访问超类的某个字段</strong>。</p><p>例如，将Employee中的hireDay字段设为protected，而不是private，则Manager方法就可以访问到这个字段。</p><p>注意：</p><ul><li>要谨慎使用，如果你的代码被别的程序员访问了受保护字段，那么后期维护时候，修改自身类则会影响到别人！</li><li>受保护的方法更具有实际意义，表明子类得到了信任，可以正确的使用这个方法，而其他类则不行</li></ul><h2 id="泛型类数组列表"><a href="#泛型类数组列表" class="headerlink" title="泛型类数组列表"></a>泛型类数组列表</h2><p>ArrayList是一个有类型参数的<strong>泛型类</strong>。尖括号里面填写保存的元素对象类型，如<code>ArrayList&lt;Employee&gt;</code></p><p>声明一个保存Employee对象的数组列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> staff = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br></pre></td></tr></table></figure><p>也可以省略右边括号里面的类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h2><p>每个基本类型都有与之对应的类Integer、Long、Float、Double、Short、Byte、Character、Boolean；</p><p><strong>&lt;&gt;尖括号中的类型参数不允许是基本类型</strong></p><p>由于每个值分别包装在对象中，所以<code>ArrayList&lt;Integer&gt;</code>效率远远低于int[]</p><p>自动装箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;()</span><br><span class="line">list.add(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>此时，进行了自动装箱过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(Integer.valueOf(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>自动拆箱：此时拿到的n应该是<code>&lt;Integer&gt;</code>类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i)</span><br></pre></td></tr></table></figure><p>转换成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = list.get(i).intValue();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心技术读书笔记ch4</title>
      <link href="2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/"/>
      <url>2020/08/15/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B04-5%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java核心技术-读书笔记："><a href="#Java核心技术-读书笔记：" class="headerlink" title="Java核心技术 读书笔记："></a>Java核心技术 读书笔记：</h1><h1 id="第四章-对象与类"><a href="#第四章-对象与类" class="headerlink" title="第四章 对象与类"></a>第四章 对象与类</h1><h2 id="对象的理解："><a href="#对象的理解：" class="headerlink" title="对象的理解："></a>对象的理解：</h2><p>每个对象包含对用户公开的特定功能部分和隐藏的实现部分。从根本上来说，只要对象能够满足要求，就不必关心其功能到底如何实现！</p><p>此外，每个对象都保存着描述当前状况的信息——对象的状态。对象状态的改变必须通过调用方法实现（如果不经过调用就可以改变对象状态，只能说明<strong>破坏了封装性！</strong>）</p><h3 id="对象引用："><a href="#对象引用：" class="headerlink" title="对象引用："></a>对象引用：</h3><p>对象的创建通过对象提前写好的构造函数（无参 有参），new+构造才能够创建出一个新的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date s = <span class="keyword">new</span> Date()</span><br><span class="line">Date s = k</span><br></pre></td></tr></table></figure><p>实际上，k和s引用的是同一对象（new的Date的对象），指向相同！</p><p>所有的Java对象都存储在<strong>堆</strong>中，当一个对象包含另一个对象变量时，它只是包含着另一个堆对象的指针！</p><h2 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h2><h3 id="三种关系："><a href="#三种关系：" class="headerlink" title="三种关系："></a>三种关系：</h3><ul><li>依赖（uses-a）如Order类使用Account类，是因为Order对象需要访问Account对象查看信用状态！——我们应该尽可能减少相互依赖：减少类之间的<strong>耦合！</strong></li><li>聚合（has-a）包含关系</li><li>继承（is-a）</li></ul><h3 id="公共类和非公共类（是否带public）"><a href="#公共类和非公共类（是否带public）" class="headerlink" title="公共类和非公共类（是否带public）"></a>公共类和非公共类（是否带public）</h3><ul><li>源文件名必须与public类的名字相匹配，在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类。</li><li>一般习惯将类单独命名为xxx.java</li></ul><h3 id="类中的public方法："><a href="#类中的public方法：" class="headerlink" title="类中的public方法："></a>类中的public方法：</h3><p>public意味着任何类的任何方法都可以调用这些方法（一共有<strong>4个级别</strong>，后面介绍）</p><h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><ul><li>与类同名</li><li>可以有一个以上的构造器</li><li>构造器可以有任意数目的参数</li><li>构造器没有返回值</li><li>总是伴随<strong>new</strong>一起调用！</li></ul><h3 id="var声明局部变量："><a href="#var声明局部变量：" class="headerlink" title="var声明局部变量："></a>var声明局部变量：</h3><p>Java10中，如果可以从变量的初始值推导出它们的类型，可用var关键字声明局部变量，无须指定类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> harry =  <span class="keyword">new</span> Employee(<span class="string">"Harry"</span>,<span class="number">5000</span>,<span class="number">1989</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>两者等效</p><p>隐式参数和显式参数：</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  salary += raise;</span><br><span class="line">&#125;</span><br><span class="line">number007.raiseSalary(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>其结果是将number007.salary字段新增5%（设置为了一个新值）</p><p>raiseSalary有两个参数，其一是前面的Employee类的对象，第二则是括号中的参数</p><p>关键词<strong>this</strong>指示隐式参数，可以改写：（强烈推荐）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> viod <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> raise = <span class="keyword">this</span>.salary * byPercent / <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">this</span>.salary += raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以将实例字段和局部变量明显区分出来</strong></p><h3 id="警告！（初探对象封装性）"><a href="#警告！（初探对象封装性）" class="headerlink" title="警告！（初探对象封装性）"></a>警告！（初探对象封装性）</h3><p>不要编写返回可变对象引用的访问器方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hireDay   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的Date类有更改器方法setTime，也就是说Date对象是可变的，这就破坏了封装性！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee harry = ...;</span><br><span class="line">Date d = harry.getHireDay();</span><br><span class="line"><span class="keyword">double</span> tenYearsInNilliseconds = <span class="number">10</span> * <span class="number">365.25</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">d.setTime(d.getTime() - (<span class="keyword">long</span>)tenYearMilliseconds);</span><br></pre></td></tr></table></figure><p>d和harry.hareDay引用的是同一个对象，对d调用更改器方法就可以自动地改变这个Employee对象的私有状态！</p><img src="https://img-blog.csdnimg.cn/20200827225837425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><p>如果要返回一个可变对象的引用，首先应该对它进行克隆！对象克隆指放在另一个新位置上的对象副本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Date hireDay;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getHireDay</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Date)hireDay.clone(<span class="number">0</span>)   <span class="comment">//Bad</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="谈谈私有方法和公共方法"><a href="#谈谈私有方法和公共方法" class="headerlink" title="谈谈私有方法和公共方法"></a>谈谈私有方法和公共方法</h3><p>由于公共数据非常危险，应该将数据字段设置为私有的字段（很好理解），对于方法来说，尽管大部分都是公共的，但有些情况下用私有会更好：如，数据的表示发生了变化，这个方法可能会变得难以实现，或者不再需要，这并不重要，重要的是，只要它是私有方法，类的设计者就可以确信它不会在别处使用没所以可以将其删去，如果一个方法是公共的，就不能简单的删除，因为有可能在别处依赖！</p><h3 id="final实例字段"><a href="#final实例字段" class="headerlink" title="final实例字段"></a>final实例字段</h3><ul><li><p>一旦设置，以后就不再修改这个字段，如Employee类中的name字段设置为final，因为在对象构造后，值不会改变，即没有setName方法。</p></li><li><p>对于基本类型或者不可变类的字段尤其有用：</p><p>对于可变的类，可能混乱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StringBuilder evaluations;</span><br></pre></td></tr></table></figure><p>它在Employee中初始化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evaluations = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>final关键字只是表示存储在evaluations变量中的<strong>对象引用</strong>不会再指向另一个不同的StringBuilder对象。不过这个对象依旧是可以更改的！！也就是地址不变而已</p></li></ul><h3 id="静态字段与静态方法"><a href="#静态字段与静态方法" class="headerlink" title="静态字段与静态方法"></a>静态字段与静态方法</h3><p>静态字段：属于类，不属于对象！例如，要给每个员工一个唯一的标识码，这里给Employee类添加一个实例字段id和一个静态字段nextId；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  id = nextId;</span><br><span class="line">  nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当新增员工时，其id是在整个员工nextId基础之上的！也就是说，这个nextId是公共调用的！</p><p>静态常量用的更多，比如Math类下的PI值</p><p>以下两种情况下可以使用静态方法：</p><ul><li>方法不需要访问对象的状态，因为它需要的所有参数都通过显式参数提供，如Math.pow</li><li>方法只需要访问类的静态字，如Employee.getNextId</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构Java描述整理</title>
      <link href="2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/"/>
      <url>2020/07/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84Java%E6%8F%8F%E8%BF%B0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h1><h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2. 线性表"></a>2. 线性表</h1><p>​    线性表是一种最常用、最简单，也是一种最基本的数据结构，它是学习其他数据结构的基础。</p><p><strong>线性表</strong>在计算机中可以用$\begin{cases}顺序存储 \\ 链式存储\end{cases}$两种存储结构来表示，其中，顺序存储的线性表成为顺序表，链式存储的线性表成为链表，<strong>链表</strong>又分为：$\begin{cases} 单链表 \\ 双向链表 \\ 循环链表\end{cases}$。</p><p>特点：</p><ul><li><p>对于同一个线性表，其每一个数据元素的值虽然不同，但必须具有相同的数据类型</p></li><li><p>数据元素之间具有一种线性的或“一对一”的逻辑关系：开始结点没有前驱，末尾结点没有后继，除开始和末尾结点外，其余数据元素有且仅有一个前驱和一个后继</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```:将已存在的线性表置为空表</span><br><span class="line"></span><br><span class="line">```isEmpty()```:判空</span><br><span class="line"></span><br><span class="line">```length()```:求线性表长度，即，元素个数</span><br><span class="line"></span><br><span class="line">```get(i)```:读取线性表中第i个数据元素的值。$<span class="number">0</span> \leqslant i \leqslant length-<span class="number">1</span>$</span><br><span class="line"></span><br><span class="line">```insert(i,x)```:在线性表的第i个数据元素之前插入一个值为x的数据元素。</span><br><span class="line"></span><br><span class="line">```remove(i)```:删除并返回线性表中第i个数据元素</span><br><span class="line"></span><br><span class="line"> ```indexOf(x)```:返回线性表中首次出现指定数据元素的位序号，若不包含次数据元素，则返回-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"> ```desplay(<span class="number">0</span>)```:输出线性表中的各个数据元素的值</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-1-顺序表"><a href="#2-1-顺序表" class="headerlink" title="2.1 顺序表"></a>2.1 顺序表</h2><p><strong>定义：</strong></p><p>顺序表是用一组<strong>地址连续</strong>的存储单元依次存放线性表中各个数据元素的存储结构。<br><img src="https://img-blog.csdnimg.cn/20200827222236887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x300"  style="zoom:50%;" /></p><p><strong>特点：</strong></p><ul><li>在线性表中逻辑相邻的数据元素，在物理存储元素上也是相邻的</li><li>存储密度高，但需要预先分配“足够应用的存储空间，这可能将会造成存储空间的浪费，其中，$存储密度=\frac{数据元素本身值所需的存储空间}{该数据元素实际所占用的空间}$</li><li>便于随机存取</li><li>不便于插入和删除操作没这事因为在顺序表上进行插入和删除操作会引起大量数据元素的移动</li></ul><p>顺序表的<strong>局限性</strong>：</p><ul><li>若要为顺序表扩充存储空间，则需要重新创建一个地址连续的更大存储空间，并把原有的数据元素都复制到新的存储空间中</li><li>因为顺序表存储要求逻辑上相邻的数据元素，在物理存储位置上也是相邻的，这就使得增删数据元素则会引起平均约一半的数据元素的移动</li></ul><p><strong>总结</strong>——查询快、增删慢！</p><h3 id="顺序表代码实现："><a href="#顺序表代码实现：" class="headerlink" title="顺序表代码实现："></a>顺序表代码实现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] listElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> curlen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的线性表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqList</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span>; <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">        listElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//给顺序表分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//置空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        curlen = <span class="number">0</span> ;  <span class="comment">//置顺序表的当前长度为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求线性表中数据元素个数，返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curlen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取到线性表第i个元素并返回其值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt; curlen-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        <span class="keyword">return</span> listElem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第i个元素之前插入一个值为x的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(curlen == listElem.length) <span class="comment">//判断顺序表是否已经满</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"顺序表已满"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = curlen; j &lt; i ; j--)  <span class="comment">//插入后的元素向后移一个存储单位</span></span><br><span class="line">            listElem[j] = listElem[j-<span class="number">1</span>];</span><br><span class="line">        listElem[i] = x;</span><br><span class="line">        curlen++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除并返回线性表中第i个数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;curlen -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除位置不合法"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; curlen -<span class="number">1</span> ; j++)</span><br><span class="line">            listElem[j] = listElem[j+<span class="number">1</span>];<span class="comment">//删除元素后的元素向前移一个单位</span></span><br><span class="line">        curlen--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回线性表中首次出现指定的数据元素的位序号，若线性表中不包含此数据元素，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;curlen &amp;&amp; !listElem[j].equals(x))</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;curlen)</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出线性表中的数据元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; curlen; j++) &#123;</span><br><span class="line">            System.out.println(listElem[j] + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqList L = <span class="keyword">new</span> SqList(<span class="number">10</span>);</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="string">"a"</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="string">"z"</span>);</span><br><span class="line">        L.insert(<span class="number">2</span>,<span class="string">"d"</span>);</span><br><span class="line">        L.insert(<span class="number">3</span>,<span class="string">"z"</span>);</span><br><span class="line">        System.out.println(<span class="string">"此顺序表为："</span>);</span><br><span class="line">        L.display();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> order = L.indexOf(<span class="string">"z"</span>);</span><br><span class="line">        <span class="keyword">if</span>(order !=-<span class="number">1</span>)</span><br><span class="line">            System.out.println(<span class="string">"顺序表中第一次出现的值为'z'的数据元素位置为："</span>+order);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"此顺序表中不包含值为z的属于元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h2><p><strong>定义：</strong></p><p>顺序表适合表示静态线性表，一旦形成以后，就很少进行插入和删除操作，对于需要频繁插入和删除的动态线性表，通常采用<strong>链式存储结构</strong>。</p><p><strong>特点：</strong></p><ul><li>链式结构不要求逻辑上相邻的数据元素在物理上也相邻，它是用一组地址任意的存储单元来存放数据元素的值，故它没有顺序结构某些操作上的局限性，但却失去了随机存取的特点，在链式结构上只能进行顺序存取</li></ul><h3 id="单链表代码实现："><a href="#单链表代码实现：" class="headerlink" title="单链表代码实现："></a><strong>单链表代码实现：</strong></h3><p><strong>Node类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkList类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node head;  <span class="comment">//单链表的头指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();<span class="comment">//初始化头结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造一个长度为n的单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkList</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">boolean</span> Order)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">//初始化头结点，相当于无参构造</span></span><br><span class="line">        <span class="keyword">if</span>(Order)</span><br><span class="line">            create1(n); <span class="comment">//用尾插法顺序建立单链表</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            create2(n); <span class="comment">//用头插法逆位序建立单链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用尾插法顺序建立单链表，其中n为单链表的结点个数  先要编写insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(length(),sc.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用头插法逆位序建立单链表，其中n为单链表的结点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//构造输入对象</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            insert(<span class="number">0</span>,sc.next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个已经存在的带头结点单链表置成空表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        head.data = <span class="keyword">null</span>;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断带头结点的单链表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求带头结点的单链表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//新建一个p指针指向head</span></span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++ length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求取带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针指向head，利用其遍历</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"get的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中的第i个结点之前插入一个值为x的新结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head; <span class="comment">//定义一个p指针先指向head，利用它遍历到i-1处</span></span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j&lt; i-<span class="number">1</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;i-<span class="number">1</span> || p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"插入位置不合法hh"</span>);</span><br><span class="line"></span><br><span class="line">        Node s = <span class="keyword">new</span> Node(x);</span><br><span class="line">        s.next = p.next;</span><br><span class="line">        p.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除带头结点的单链表中的第i个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; j &lt;i)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断i是否合法</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span> || p ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除的第"</span> + i + <span class="string">"个元素不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在带头结点的单链表中查找值为x的结点，返回位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Node p = head;</span><br><span class="line">        <span class="keyword">int</span> j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span> &amp;&amp; !p.data.equals(x))&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否含有x这个值</span></span><br><span class="line">        <span class="keyword">if</span>(p==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"不存在值为"</span> + x + <span class="string">"的结点"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出单链表中的所有结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node node = head.next;  <span class="comment">//取出带头结点的单链表中的首结点 node作为指针来遍历</span></span><br><span class="line">        <span class="keyword">while</span>(node!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(node.data + <span class="string">""</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();  <span class="comment">//换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        LinkList L = <span class="keyword">new</span> LinkList();</span><br><span class="line">        L.display();</span><br><span class="line">        L.insert(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        L.insert(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        L.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L.length());</span><br><span class="line">        LinkList L2 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">false</span>);<span class="comment">//头插法</span></span><br><span class="line">        L2.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L2.length());</span><br><span class="line">        LinkList L3 = <span class="keyword">new</span> LinkList(<span class="number">3</span>,<span class="keyword">true</span>);<span class="comment">//尾插法</span></span><br><span class="line">        L3.display();</span><br><span class="line">        System.out.println(<span class="string">"链表长度为"</span>+ L3.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200827222413646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /></p><h2 id="2-3-链表VS顺序表"><a href="#2-3-链表VS顺序表" class="headerlink" title="2.3 链表VS顺序表"></a>2.3 链表VS顺序表</h2><ul><li>与顺序表相比较,链表比灵活，它既不要求在预先分配的一块连续的存储空间中存储<br>线性表的所有数据元素,也不要求按其逻辑顺序来分配存储单元,可根据需要进行存储空间<br>的动态分配!因此,当线性表的长度变化较大或长度难以估计时,用链表。但在线性表的<br>长度基本可预计且变化较小的情况下,宜用顺序表,因为链表的存储密度较顺序表的低,且<br>顺序表具有随机存取的优势!</li><li>在顺序表中按序号访问第i个数据元素时的时间复杂度为O(1),而在链表中做同样操<br>作的时间复杂度为O(n)所以若要经常对线性表按序号访问数据元素时,顺序表要优先<br>链表;但在顺序表上做插入和删除操作时,需要平均移动一半的数据元素,而在链表上做插<br>入和删除操作,不需要移动任何数据元素,虽然也要查找插入或删除数据元素的位置,但由<br>于主要是比较操作,所以从这个角度考虑,链表要优先于顺序表</li><li>总之,链表比较<strong>灵活,**</strong>插入和删除操作的效率较高,但链表的空间利用率较低,适合于实<br>现<strong>动态的线性表</strong>;顺序表实现比较简单,因为任何高级程序语言中都有数组类型,并且空间<br>利用率也较高,可高效地进行随机存取,但顺序表不易扩充,插入和删除操作的效率较低,适<br>合于实现相对“稳定”的静态线性表。两种存储结构各有所长,各种实现方法也不是一成不<br>变的。在实际应用时,必须以这些基本方法和思想为基础,抓住两者各自的特点并结合具体<br>情况,加以创造性地灵活应用和改造,用最合适的方法来解决问题。</li></ul><h1 id="3-栈与队列"><a href="#3-栈与队列" class="headerlink" title="3.栈与队列"></a>3.栈与队列</h1><p>定义：</p><p>栈和队列可被看成是<strong>两种操作受限</strong>的特殊线性表，其特殊性体现在它们的插入和删除操作都是控制在线性表的一端或两端进行。</p><h2 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h2><img src="https://img-blog.csdnimg.cn/20200827222518643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x300"  style="zoom:50%;" /><p>栈是一种特殊的线性表，栈中的元素以及数据元素间的逻辑关系和线性表相同，区别在于：</p><ul><li>线性表的插入和删除操作可以在表的任意位置进行，而栈只允许在表的尾端进行</li></ul><p>特点：</p><ul><li><p>先进后出(First In Last Out)</p></li><li><p>几个基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```clear()```：置空</span><br><span class="line"></span><br><span class="line">```isEmpty()```：判空</span><br><span class="line"></span><br><span class="line">```length()```：返回栈中元素个数</span><br><span class="line"></span><br><span class="line">```peek()```：读取栈项元素并返回其值，若栈为空，则返回<span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">```push()```：入栈——将数据元素x压入栈顶</span><br><span class="line"></span><br><span class="line">```pop()```：出栈——删除并返回栈顶元素</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-1-1-顺序栈"><a href="#3-1-1-顺序栈" class="headerlink" title="3.1.1 顺序栈"></a>3.1.1 顺序栈</h3><p>类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] stackElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;<span class="comment">//在非空栈中，top始终指向栈顶元素的下一个存储位置，栈为空时，top=0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，构造一个存储空间容量为maxSize的空站</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">        stackElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为栈分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求栈中数据元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> stackElem[top-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top == stackElem.length)<span class="comment">//这里判断一下Object数组的长度和top是否相等，与sqStack的length()区别开</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈已满"</span>);<span class="comment">//跑出异常</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stackElem[top++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> stackElem[--top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出栈中所有数据元素，从栈顶元素到栈底</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.print(stackElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        SqStack sqStack = <span class="keyword">new</span> SqStack(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//循环压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sqStack.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        sqStack.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222612835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><h3 id="3-1-2-链栈"><a href="#3-1-2-链栈" class="headerlink" title="3.1.2 链栈"></a>3.1.2 链栈</h3><p>定义结点类，与之前一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储元素</span></span><br><span class="line">    <span class="keyword">public</span> Object data;   <span class="comment">//存放结点值</span></span><br><span class="line">    <span class="keyword">public</span> Node next;    <span class="comment">//后继结点的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有一个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有两个参数时的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data, Node next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义链栈类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node top; <span class="comment">//栈顶元素的引用</span></span><br><span class="line">    <span class="comment">//置空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        top = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素并返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">            <span class="keyword">return</span> top.data;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object x)</span> </span>&#123;</span><br><span class="line">        Node p = <span class="keyword">new</span> Node(x);</span><br><span class="line">        p.next = top;</span><br><span class="line">        top = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node p = top; <span class="comment">//p指向被删结点，引用p是因为要返回被删结点值</span></span><br><span class="line">            top = top.next;</span><br><span class="line">            <span class="keyword">return</span> p.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node p = top;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(p.data.toString() + <span class="string">" "</span>);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkStack LS = <span class="keyword">new</span> LinkStack();</span><br><span class="line">        <span class="comment">//批量压入栈</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            LS.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        LS.display();</span><br><span class="line">        System.out.println(<span class="string">"\n"</span> + <span class="string">"被删除元素为："</span> + LS.pop());</span><br><span class="line">        LS.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827222655641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x150"  style="zoom:50%;" /><h2 id="3-2-队列"><a href="#3-2-队列" class="headerlink" title="3.2 队列"></a>3.2 队列</h2><img src="https://img-blog.csdnimg.cn/20200827222740697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x150"  style="zoom:50%;" /><p><strong>定义：</strong></p><p>队列是另一种特殊的线性表，它的特殊性体现在队列只允许在表尾插入数据元素，在表头删除数据元素，所以队列也是一种操作受限的特殊线性表</p><p><strong>特点：</strong></p><ul><li><p>先进先出</p></li><li><p>几个基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;isEmpty()&#96;&#96;&#96;：置空</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;length()&#96;&#96;&#96;：求取队列数据元素个数</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;peek()&#96;&#96;&#96;：读取队首元素并返回其值。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;offer()&#96;&#96;&#96;：入队操作，将数据元素x插入到队列中使其成为新的队尾元素。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;poll()&#96;&#96;&#96;：出队操作，删除队首元素并返回其值，若队列为空，则返回null。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public interface IQueue &#123;</span><br><span class="line">  public void clear();</span><br><span class="line">  public boolean isEmpty();</span><br><span class="line">  public int length();</span><br><span class="line">  public Object peek();</span><br><span class="line">  public void offer(Object x) throws Exception;</span><br><span class="line">  public Object poll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-1-顺序队列"><a href="#3-2-1-顺序队列" class="headerlink" title="3.2.1 顺序队列"></a>3.2.1 顺序队列</h3><p>​    与顺序栈类似，在顺序队列的存储结构中，需要分配一块地址连续的存储区域来一次存放队列中从队首到队尾的所有元素。这样也可以用一维数组来表示，假设数组名为queueElem，数组最大容量为maxSize，由于队列的入队操作只能在当前队列的队尾进行，而出队操作只能在当前队列的队首进行，所以需加上变量front和rear来分别指示队首队尾元素在数组中的位置，其初始值都为0，在非空队列中，front指向队首元素，rear指向队尾元素的下一个存储位置 </p><img src="https://img-blog.csdnimg.cn/20200827222820890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x300"  style="zoom:50%;" /><p><strong>假溢出：</strong> </p><p>​    从图3.16(d)可以看出,若此时还需要将数据元素H入队,H应该存放于rear=6的位<br>置处,顺序队列则会因数组下标越界而引起“溢出”,但此时顺序队列的首部还空出了两个数<br>据元素的存储空间。因此,这时的“溢出”并不是由于数组空间不够而产生的溢出。这种因<br>顺序队列的多次人队和出队操作后出现有存储空间,但不能进行人队操作的溢出现象称为<br><strong>”假溢出”</strong>。<br>​    要解决“假溢出”问题,最好的办法就是把顺序队列所使用的存储空间看成是一个逻辑<br>上首尾相连的循环队列。当rear或 front到达 maxSize-1后,再加1就自动到0。这种转<br>换可利用Java语言中对整型数据求模(或取余)运算来实现,即令<strong>rear=(rear+1)%</strong><br><strong>maxSize</strong>。显然,当rear= maxSize-1时,rear加1后,rear的值就为0。这样,就不会出现<br>顺序队列数组的头部有空的存储空间,而队尾却因数组下标越界而引起的假溢出现象。</p><p><strong>循环顺序队列类：</strong></p><img src="https://img-blog.csdnimg.cn/20200827222849424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x200"  style="zoom:50%;" /><p>图中会发现一个问题：即循环顺序队列的判空和判满条件都是front==rear</p><p>解决循环顺序队列的队空和队满的判断问题常采用以下3种方法：</p><ol><li>少用一个存储单元</li></ol><img src="https://img-blog.csdnimg.cn/20200827222924816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /><ol start="2"><li><p>设置一个标志变量</p><p>​    在程序设计过程中引进一个标志变量fag,其初始值置为0,每当入队操作成功后就置<br>flag=1;每当出队操作成功后就置fag=0,则此时队空的判断条件为: <code>front==rear&amp;&amp;flag==0</code>,而队满的判断条件为:<code>front==rear&amp;&amp;flag==1</code>。</p></li><li><p>设置一个计数器</p><p>​    在程序设计过程中引进一个计数变量num,其初始值置为0,每当入队操作成功后就将<br>计数变量num的值加1;每当出队操作成功后就将计数变量num的值减1,则此时队空的<br>判断条件为:<code>num==0</code>,而队满的判断条件为:<code>num&gt;0&amp;&amp;front==rear</code></p></li></ol><p><strong>循环队列实现：</strong></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueimpl</span> <span class="keyword">implements</span> <span class="title">IQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] queueElem;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front,rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleSqQueueimpl</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>; <span class="comment">//队首、队尾初始化为0</span></span><br><span class="line">        queueElem = <span class="keyword">new</span> Object[maxSize];<span class="comment">//为队列分配maxSize个存储单元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear; <span class="comment">//判空采用第一种方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + queueElem.length) % queueElem.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front ==rear)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> queueElem[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offer</span><span class="params">(Object x)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear+<span class="number">1</span>) % queueElem.length == front) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"队列已满"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            queueElem[rear] = x;</span><br><span class="line">            rear = (rear+<span class="number">1</span>) % queueElem.length;<span class="comment">//以免假溢出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front == rear) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object t = queueElem[front];</span><br><span class="line">            front = (front + <span class="number">1</span>) % queueElem.length;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i != rear; i= (i+<span class="number">1</span>)%queueElem.length) &#123;</span><br><span class="line">                System.out.print(queueElem[i].toString() + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"此队列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.dataStructure.SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleSqQueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        CircleSqQueueimpl circleSQ= <span class="keyword">new</span> CircleSqQueueimpl(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"长度为："</span> + circleSQ.length() + <span class="string">"判空"</span> + circleSQ.isEmpty());</span><br><span class="line">        circleSQ.display();</span><br><span class="line">        <span class="comment">//批量导入数据元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            circleSQ.offer(i);</span><br><span class="line">        &#125;</span><br><span class="line">        circleSQ.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200827223222394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css+div布局总结</title>
      <link href="2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
      <url>2020/07/09/css-div%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 几个月前花了一周多学了点前端，但也只是浅尝辄止，实战中还是由于css底子不好导致了很多布局的问题，故沉下心来再次把css复习了一遍，理顺了实战中遇到的一些布局问题，包括多浏览器、不同尺寸屏幕的适配问题也更加清晰了许多，有关适配性的经验将会在另一博客中着重总结，此博客主要针对css的基础布局进行梳理，方便复查！期间，也发现了一个查前端文档的网站：MDN</p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><img src="https://img-blog.csdnimg.cn/20200709190629883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x300"  style="zoom:50%;" /><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>以当前为参照物移动指定的距离<br>注意：相对定位，被定位的元素会占据原有的物理位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            /*相对定位</span><br><span class="line">                以当前为参照物移动指定的距离</span><br><span class="line">                注意：相对定位，被定位的元素会占据原有的物理位置</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*移动定位元素*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*bottom*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;<span class="comment">/*right*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190735302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li><p>绝对定位的元素不会占据原有的物理位置</p></li><li><p>以其他元素作为参考物移动指定距离的定位方式</p></li></ul><p>  关于绝对定位的参考点：</p><ul><li><ol><li>如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</li></ol></li><li><ol start="2"><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ol></li><li><ol start="3"><li>如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line">            position: absolute; </span><br><span class="line">            /*top:200px;</span><br><span class="line">            left:200px;*/</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190817438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>加上</p><p>top:200px;</p><p>left:200px;</p><p>参考点为(0,0)绝对左上角，而不是红色框左上角<br><img src="https://img-blog.csdnimg.cn/20200709190850638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>如果外层元素没有定位，但是外外层（爷爷类）有定位，则有：</p><ul><li>如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</li></ul><p>子类参考点为外外层（爷爷类）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:green</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">green</span>;</span></span><br><span class="line">            /*绝对定位：</span><br><span class="line">                绝对定位的元素不会占据原有的物理位置</span><br><span class="line">                以其他元素作为参考物移动指定距离的定位方式</span><br><span class="line">                关于绝对定位的参考点：</span><br><span class="line">                1.如果元素的外层元素是非static（有了除默认值之外的定位设置）那么这个外层元素就成为该元素的定位参考点</span><br><span class="line">                2.如果元素的外层元素没有设置任何position的值，那么该元素将寻找距离自己最近的其他设定过position的外层元素作为参照物(必须为嵌套层)</span><br><span class="line">                3.如果该元素的外层元素没有任何一个元素采用position定位，那么此时定位参考元素变为body或者说页面</span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*position: absolute;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*top:200px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*left:200px;*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aquamarine;</span><br><span class="line"><span class="css">            <span class="comment">/*父类做一个定位*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position:relative;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:fuchsia</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;   <span class="comment">/*son的参考点是father，但前提是father这一层（外层）必须有定位*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box3</span>&#123;</span></span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709190932333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />如果son的father没有定位，box2也没定位，则其absolute参考点为body：<img src="https://img-blog.csdnimg.cn/20200709191013975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>垂直滚动条：</p><p>background:palevioletred;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>固定定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:palevioletred</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0px</span>;  <span class="comment">/*距离右边为0*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:300px</span>;  <span class="comment">/*距离顶部为0*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191035959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h2><img src="https://img-blog.csdnimg.cn/20200709191051684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>注意：只能支持<strong>定位元素</strong>！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>z-index设置定位元素z轴的距离(定位元素的显示顺序)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#two</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:999</span>; <span class="comment">/*这里设置1仍然是黄色盖住红色*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：z-index属性只支持定位元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200709191119163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>首先看代码先后顺序，渲染的是one在前，two在后，所以黄色会盖住红色，z-index可以提高层级别</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>回顾浮动：任意元素一旦浮动，display都会失效<br><img src="https://img-blog.csdnimg.cn/20200709191135936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h2 id="预备知识："><a href="#预备知识：" class="headerlink" title="预备知识："></a>预备知识：</h2><ul><li>div:默认为块状元素：具有宽高属性，并且独占一行</li><li>Span:默认为行内元素：没有宽高属性，不会独占一行</li></ul><h2 id="块状-amp-行内元素的互换："><a href="#块状-amp-行内元素的互换：" class="headerlink" title="块状&amp;行内元素的互换："></a>块状&amp;行内元素的互换：</h2><ul><li><ol><li>如果将div设置为行内元素<code>display: inline</code>，则会使得div无宽高属性，且不会独占一行！</li></ol></li><li><ol start="2"><li>也可以将span设置为块状元素:<code>display:block</code>，则可以有宽高属性，独占一行！</li></ol></li><li><ol start="3"><li>如果用了很多块状元素div，但是会独占一行，如果不想独占一行（想并列显示），则要将其改为 行内块元素：<code>display:inline-block</code>——既有宽高属性 且不会独占一行，但涉及图文混排，故此方式用的较少，浮动使用较多<img src="https://img-blog.csdnimg.cn/20200709191202408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ol></li></ul><ul><li>接着将div的display改为表格属性<code>display:table-cell</code>,变为单元格形式，<img src="https://img-blog.csdnimg.cn/20200709191220222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></li></ul><h2 id="隐藏元素："><a href="#隐藏元素：" class="headerlink" title="隐藏元素："></a>隐藏元素：</h2><ul><li><code>display:none</code>可以将div块进行隐藏，并且不会占用原物理空间（类似：<code>visibility:hidden</code>隐藏效果，但仍占用物理空间）</li><li>如果元素是使用visibility设置的隐藏方式，那么只能用<code>visibility：visible</code>的方式来让元素显示;对应的，<code>display:none</code>要用<code>display:block</code>来显示！</li><li>总结：visibility:设置元素是否显示<pre><code>visible 显示hidden隐藏</code></pre> 注意：<code>visibility</code>和<code>display:none</code>的区别：<code>visibility</code>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<code>display:none</code>的隐藏方式是彻底隐藏该元素的内容和位置。</li><li>应用：网页中鼠标未选中时隐藏，选中时显示 展开<img src="https://img-blog.csdnimg.cn/202007091913048.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =400x500"  style="zoom:50%;" /></li></ul><img src="https://img-blog.csdnimg.cn/20200709191407349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /><h2 id="设置透明度：opacity-0"><a href="#设置透明度：opacity-0" class="headerlink" title="设置透明度：opacity: 0;"></a>设置透明度：<code>opacity: 0;</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div,span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为行内元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*设置元素为行内块元素，具有宽高属性，并且不会独占一行*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: inline-block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: table-cell;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: none;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*隐藏元素，占据原有物理位置*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility: hidden;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*如果元素是使用visibility设置的隐藏方式，那么只能用visibility：visible的方式来让元素显示*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*visibility:visible;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                visibility:设置元素是否显示</span><br><span class="line">                    visible 显示</span><br><span class="line">                    hidden隐藏</span><br><span class="line"><span class="css">                   注意：<span class="selector-tag">visibility</span>和<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的区别：<span class="selector-tag">visibility</span>的隐藏方式仅隐藏了内容的显示，其占用的空间依旧占用，而<span class="selector-tag">display</span><span class="selector-pseudo">:none</span>的隐藏方式是</span></span><br><span class="line">                   测地隐藏该元素的内容和位置。</span><br><span class="line"></span><br><span class="line">            */</span><br><span class="line"><span class="css">            <span class="comment">/*设置元素透明度*/</span></span></span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="comment">/*设置为块状元素*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*display: block;*/</span></span></span><br><span class="line">            background: fuchsia;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--div:块状元素：具有宽高属性，并且独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div&gt;这是块状元素&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--行内元素：没有宽高属性，不会独占一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><img src="https://img-blog.csdnimg.cn/2020070919145770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h2 id="预备知识：-1"><a href="#预备知识：-1" class="headerlink" title="预备知识："></a>预备知识：</h2><p>盒子与盒子之间的距离——margin：外间距</p><p>盒子内部的content与边框的间距——padding：内边距</p><p>边框也有一个厚度：border：边框</p><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p><img src="https://img-blog.csdnimg.cn/20200709191516417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="快速设置："><a href="#快速设置：" class="headerlink" title="快速设置："></a>快速设置：</h3><img src="https://img-blog.csdnimg.cn/20200709191540300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>顺序：上右下左<code>margin:10px 10px 10px 10px</code><br>上下20px，左右都为10px<code>margin:20px 10px 20px</code><br>上下20px，左右为10px<code>margin:20px  10px</code></p><h3 id="居中显示："><a href="#居中显示：" class="headerlink" title="居中显示："></a>居中显示：</h3><p>如果想要div居中，可以<code>margin:10px auto;</code>实现<strong>块状元素</strong>居中显示，如果改为浮动，则<code>display</code>失效,无法居中<br><img src="https://img-blog.csdnimg.cn/20200709191629876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><h3 id="外边距合并："><a href="#外边距合并：" class="headerlink" title="外边距合并："></a>外边距合并：</h3><img src="https://img-blog.csdnimg.cn/20200709191648472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />几个特点：<ul><li><ol><li>块级元素的垂直相邻外边距会合并</li></ol></li><li><ol start="2"><li>行内元素实际上不占上下外边距，行内元素的的左右外边距不合并</li></ol></li><li><ol start="3"><li>浮动元素的外边距也不会合并</li></ol></li><li><ol start="4"><li>允许指定负的外边距值，不过使用时要小心</li></ol></li></ul><p>取两者最大值，而非之和！</p><p>合并只有上下</p><img src="https://img-blog.csdnimg.cn/20200709191716350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h3 id="子父类div："><a href="#子父类div：" class="headerlink" title="子父类div："></a>子父类div：</h3><p><img src="https://img-blog.csdnimg.cn/20200709191746352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="margin负值："><a href="#margin负值：" class="headerlink" title="margin负值："></a>margin负值：</h3><img src="https://img-blog.csdnimg.cn/20200709191806242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:620px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: green;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*当前元素与其他元素之间的距离 外间距*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-bottom:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:10px 10px 10px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: aqua;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: blueviolet;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#block</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1200px</span>;</span></span><br><span class="line">            background: blue;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="comment">/*实现让块状元素居中显示*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line">            margin-top: -100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            margin-bottom: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            background: yellow;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*加一像素红色 实线边框*/</span></span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            background: pink;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-top</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>顶部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>左侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"self"</span>&gt;</span>当前元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>右侧元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>底部元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以设置块状元素居中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包含式外间距合并--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框border</h2><p>设置为<code>border: 5px solid red</code></p><img src="https://img-blog.csdnimg.cn/20200709191835407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p>每条边分开设置：</p><p><img src="https://img-blog.csdnimg.cn/20200709191900114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>统一设置（大多数情况下）：</p><p><img src="https://img-blog.csdnimg.cn/20200709191920183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>双线注意：</p><p><img src="https://img-blog.csdnimg.cn/20200709191940246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p><img src="https://img-blog.csdnimg.cn/20200709191955894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><p>总结：</p><p>padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以在书写宽高时注意减掉内边距和边框(标准盒模型)</p><p>宽高指的是content的！回顾如图：<br><img src="https://img-blog.csdnimg.cn/20200709192010685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-top:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-left:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-right:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding-bottom: 10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding:10px 20px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*padding: 10px 20px 15px;*/</span></span></span><br><span class="line">            padding: 10px 20px 30px 40px;</span><br><span class="line">        &#125;</span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line">            clear: both;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line"><span class="css">            <span class="comment">/*margin:20px;*/</span></span></span><br><span class="line">            /*</span><br><span class="line">                padding的宽高要记录在盒子模型的宽高之内，于此相同的是border也要记录在盒子模型的宽高之内，但是margin并不算在宽高之内。所以各位在书写宽高时注意减掉内边距和边框(标准盒模型)</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="怪异盒模型："><a href="#怪异盒模型：" class="headerlink" title="怪异盒模型："></a>怪异盒模型：</h2><p><img src="https://img-blog.csdnimg.cn/20200709192048711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "><br><img src="https://img-blog.csdnimg.cn/20200709192108725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=" "></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>怪异盒<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">            background: red;</span><br><span class="line"><span class="css">            <span class="comment">/*设置怪异盒*/</span></span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="div-css布局注意事项"><a href="#div-css布局注意事项" class="headerlink" title="div+css布局注意事项"></a>div+css布局注意事项</h2><p><img src="https://img-blog.csdnimg.cn/20200709192124195.png" alt=" "></p><p>参考视频：<br>b站：<a href="https://www.bilibili.com/video/BV18J411S7tZ?p=1" target="_blank" rel="noopener">一天学会DIV+CSS布局</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 布局 </tag>
            
            <tag> 盒子模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convlstm时空预测经验之谈（本科毕设）</title>
      <link href="2020/05/16/Convlstm%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
      <url>2020/05/16/Convlstm%E6%97%B6%E7%A9%BA%E9%A2%84%E6%B5%8B%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Convlstm新手实战"><a href="#Convlstm新手实战" class="headerlink" title="Convlstm新手实战"></a>Convlstm新手实战</h1><p>&nbsp;&nbsp;&nbsp;毕设临近截止，故写一篇心得以供新手学习，理论在知乎上有很多介绍的不错的文章，这里强烈推荐微信公众号：AI蜗牛车，这位东南老哥写了时空预测系列文章，能够帮助了解时空领域模型的演变，同时也向他请教了一些训练技巧。<br/><br>&nbsp;&nbsp;&nbsp;我的本科毕设大概是这样的：先计算某个区域的风险，计算得到一段时间的风险矩阵，这里用的是自己的模型去计算的，数据如何生成，本文不做赘述，主要讲解如果通过每个时刻下的矩阵数据去预测未来的矩阵。</p><h2 id="回顾理论基础"><a href="#回顾理论基础" class="headerlink" title="回顾理论基础"></a>回顾理论基础</h2><p>&nbsp;&nbsp;&nbsp;在ConvLSTM中，网络用于捕获数据集中的时空依赖性。ConvLSTM和FC-LSTM之间的区别在于，ConvLSTM将LSTM的前馈方法从Hadamard乘积变为卷积，即input-to-gate和gate-to-gate两个方向的运算均做卷积,也就是之前W和h点乘改为卷积（*）。 ConvLSTM的主要公式如下所示：<br><img src="https://imgkr.cn-bj.ufileos.com/af144a73-cd4d-4734-bf2a-58e4774f3c32.png"  style="zoom:50%;" /></p><p>详细可参考：<a href="https://mp.weixin.qq.com/s?__biz=MzA4ODUxNjUzMQ==&mid=2247484743&idx=2&sn=10387417121b70ec27e311f9c5b0e493&scene=19#wechat_redirect" target="_blank" rel="noopener">【时空序列预测第二篇】Convolutional LSTM Network-paper reading</a></p><h2 id="官方keras案例"><a href="#官方keras案例" class="headerlink" title="官方keras案例"></a>官方keras案例</h2><p>&nbsp;&nbsp;&nbsp;实战过的朋友应该了解，关于Convlstm，可参考的案例非常少，基本上就集中在keras的官方案例（电影帧预测——视频预测<a href="https://keras.io/examples/conv_lstm/" target="_blank" rel="noopener">官方案例</a>）<a href="https://zhuanlan.zhihu.com/p/124106729" target="_blank" rel="noopener">知乎解说</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMzLnpoaW1nLmNvbS84MC92Mi1jNzZhYzNkMmViMjI3YmJjYmU4MmM3ZjcyNTc3NzJmMl8xNDQwdy5qcGc?x-oss-process=image/format,png#pic_center#pic_center =300x400"  style="zoom:50%;" /></p><p>官方模型核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional <span class="keyword">import</span> Conv3D</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional_recurrent <span class="keyword">import</span> ConvLSTM2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line">seq = Sequential()</span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   input_shape=(<span class="literal">None</span>, <span class="number">40</span>, <span class="number">40</span>, <span class="number">1</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">40</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"></span><br><span class="line">seq.add(Conv3D(filters=<span class="number">1</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">               activation=<span class="string">'sigmoid'</span>,</span><br><span class="line">               padding=<span class="string">'same'</span>, data_format=<span class="string">'channels_last'</span>))</span><br><span class="line">seq.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'adadelta'</span>)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;模型结构可以如官方一样：用前20个预测后20个，这里先解释一下官方模型结构的维度：<br><img src="https://img-blog.csdnimg.cn/20200516110841812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp; （如已熟悉，请跳过）对于新手来说，看上去似乎很复杂，其实弄清楚后会发现不过如此，请耐心听我讲完：先从第一个Convlstm说起，输入的是(None, 40, 40, 1)，输出的维度（None，None，40，40，40），这里的输入维度（<code>input_shape</code>）其实是每个时刻下的输入，如下图：比如这里用20个预测后20个，那么整理的第一个样本就是0至19个矩阵，label（标签）就是20至39个矩阵，每一个矩阵维度为（40，40，1）最后的这个1为通道数，如果是图片，那就对应多通道了，那么整理的样本X就应该是（样本个数,20，40，40，1），对应标签Y就是（样本个数，20，40，40，1）这样每个样本和标签才能一一对应，由于<code>reurn_sequence</code>为<code>true</code>，即每个时刻单元都有输出，也就是20个预测20个嘛，那么第一层的Convlstm输出的维度就是（None，None，40，40，40）这里第一个None是batchsize毫无疑问，第二个其实就是20，至于最后一个维度是40，和<code>filter</code>个数直接相关，（因为一个卷积核对样本做一次特征提取，40个就有40个特征提取）。<br/><br>&nbsp;&nbsp;&nbsp;接下来N层Convlstm均如此，最后为啥要接一个Conv3d，很好解释，因为你的label维度是（样本个数，20，40，40，1），这里的最后维度还得回归到1啊，所以Conv3d的<code>filter</code>这才设置为了1，以此类推，如果你的一个数据是三通道的图像，这里filter自然就是3了，一定要和label维度对应即可。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8yMmNiMTU0ZC05MTJmLTQwZWMtYjMxZS1kZjAyNjMxZGE4MGEucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /></p><h3 id="ConvLSTM参数介绍"><a href="#ConvLSTM参数介绍" class="headerlink" title="ConvLSTM参数介绍"></a>ConvLSTM参数介绍</h3><ul><li><strong>filters:</strong> 卷积核的数目</li><li><strong>kernel_size：</strong> 卷积核大小（1乘1的state-to-state kernel size很难抓住时空移动的特征，所以效果差很多，所以更大的size更能够获取时空的联系）</li><li><strong>strides：</strong> (1,1)为卷积的步长，即卷积核向右和向下一次移动几格，默认步长为1</li><li><strong>padding：</strong> 补0，为“valid”或 “same”。若要保证卷积核提取特征后前后维度一致，那就“same”</li><li><strong>data_format:</strong> 即红绿蓝三个通道(channel)是在前面还是在后面，channels_last (默认) （width, height, channel）或 channels_first (channel, width, height) 之一, 输入中维度的顺序</li><li><strong>activation：</strong> 激活函数，即下图中的RELU层，为预定义的激活函数名，如果不指定该参数，将不会使用任何激活函数（即使用线性激活函数：a(x)=x）</li></ul><h2 id="模型改造"><a href="#模型改造" class="headerlink" title="模型改造"></a>模型改造</h2><p>&nbsp;&nbsp;&nbsp;不过我由于数据量比较少，我把模型结构改造成了20个预测1个（样本数较少的童鞋可以参考），在convlstm最后一个层的<code>reurn_sequence</code>参数改为<code>flase</code>、Conv3d改2d即可。<br/><br>&nbsp;&nbsp;&nbsp;其实了解了<code>reurn_sequence</code>这个参数后，改造就顺理成章了，在最后一个Convlstm这里将<code>reurn_sequence</code>改为<code>false</code>，那么就只在最后一个单元有输出了，第二个None维度就没了，然后再把Conv3d改为2d即可，这样就要求整理数据集的时候，样本和标签分别整理成这样：(样本数，20，40，40，1) 和（样本数，40，40，1），也就是20个预测1个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional <span class="keyword">import</span> Conv3D ,Conv2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.convolutional_recurrent <span class="keyword">import</span> ConvLSTM2D</span><br><span class="line"><span class="keyword">from</span> keras.layers.normalization <span class="keyword">import</span> BatchNormalization</span><br><span class="line"><span class="keyword">from</span> keras_contrib.losses <span class="keyword">import</span> DSSIMObjective</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">seq = Sequential()</span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   input_shape=(<span class="literal">None</span>, <span class="number">60</span>, <span class="number">93</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">True</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(ConvLSTM2D(filters=<span class="number">30</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">                   padding=<span class="string">'same'</span>, return_sequences=<span class="literal">False</span>))</span><br><span class="line">seq.add(BatchNormalization())</span><br><span class="line"> </span><br><span class="line">seq.add(Conv2D(filters=<span class="number">3</span>, kernel_size=(<span class="number">3</span>, <span class="number">3</span>),</span><br><span class="line">               activation=<span class="string">'sigmoid'</span>,</span><br><span class="line">               padding=<span class="string">'same'</span>, data_format=<span class="string">'channels_last'</span>))</span><br><span class="line"></span><br><span class="line">seq.compile(loss= DSSIMObjective(kernel_sizesize=<span class="number">3</span>), optimizer=<span class="string">'adadelta'</span>)</span><br><span class="line">seq.summary()</span><br></pre></td></tr></table></figure><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8xZjcyYWE3Ny1jNTc0LTQ4YWUtODhjOC1iNzEyYzg2ZWY5YWIucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9kNGM3ODA4Mi02MmI5LTRlNGMtYTg2Yi05M2YzNWIwMzdiZDkucG5n?x-oss-process=image/format,png#pic_center =600x400"  style="zoom:50%;" /><h3 id="模型经验及调参"><a href="#模型经验及调参" class="headerlink" title="模型经验及调参"></a>模型经验及调参</h3><p>&nbsp;&nbsp;&nbsp;先看看结果图吧，随便抽一张示意一下，预测的点相对比较准确，但是模糊度还没解决掉，毕竟只训练了十几分钟，有这个效果也还算可以了：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9kYjE4NjhkYy05Zjg0LTQ5ZWQtOTA5NS0zYmJhZjU2NjJhMTUucG5n?x-oss-process=image/format,png#pic_center =600x800"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp; 整个模型看上去不算复杂，但是实际效果比较差，有以下几个要稍微注意的地方：</p><ul><li>1.矩阵数据是否过于稀疏，如果0太多，建议先转成图片再做训练，否则效果会奇差无比，原因可能是求梯度的时候网络出了问题，直接崩了。</li><li>2.如果输入是图片张量，需要提前做好归一化，我用的简单处理，直接元素除255.0，显示的时候再乘回来即可，可能有一丢丢颜色误差，但是不太影响。</li><li>3.预测图片出现模糊大概有以下几个原因：<br/><br>（1）网络结构不够优（继续调就完事了），往往这种情况下，得到的预测点也不会太准确。<br/><br>（2）由于是多个时刻下的数据去预测一个，那么必然存在信息叠加（融合），这样导致的模糊是不可避免的，如果数据量很大，那么可以采用20帧预测20帧这样的结构，应该会有效减缓一点模糊程度。<br/><br>（3）<strong>重要：</strong> 损失函数若使用MSE则会默认模糊，如果换成SSIM（结构相似性）则会明显改观（亲测有效）<br/><br>&nbsp;&nbsp;&nbsp;在模糊处理方面，我也想尝试改进，但是还没有找到比较好的方式，蜗牛车老哥建议调小学习率，训练时间长一点，亲测有效！反卷积也尝试了，但是效果不佳，后期准备使用TrajGRU来实战（预测解码模块采用了上采样层理论上应该会提高清晰度）。<br/></li></ul><p>&nbsp;&nbsp;&nbsp;模型调参的过程其实是最无聊也最艰辛的，无非就是改改层结构，多一层少一层，改一下filter、batchsize个数，时空预测这种图像的预测和别的领域有一点不同，文本的只要acc、f1-score上去了就行，所以可以用grid search来自动化调参，但是图像预测还必须得肉眼去看效果，否则结果真可能是千差万别，loss看上去已经很低了但是效果很差的情况比比皆是，尝试多换几种loss来实验，后面也还可以尝试自定义loss看效果，整个调参过程确实是不断试错的过程，两个字：”炼丹”!</p><p>————————下图为2020.6.1更新,毕设最新效果，采用trick—————————<br><img src="https://img-blog.csdnimg.cn/20200607163042368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x400"  style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Convlstm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Convlstm </tag>
            
            <tag> 时空预测 </tag>
            
            <tag> 时序 </tag>
            
            <tag> Lstm </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React项目迅速搭建+antd传文件+nginx反向代理</title>
      <link href="2020/05/16/React%E9%A1%B9%E7%9B%AE%E8%BF%85%E9%80%9F%E6%90%AD%E5%BB%BA-antd%E4%BC%A0%E6%96%87%E4%BB%B6-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>2020/05/16/React%E9%A1%B9%E7%9B%AE%E8%BF%85%E9%80%9F%E6%90%AD%E5%BB%BA-antd%E4%BC%A0%E6%96%87%E4%BB%B6-nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）"><a href="#React-入门-实战（antd上传文件接受返回-部署服务器Nginx反向代理）" class="headerlink" title="React 入门+实战（antd上传文件接受返回+部署服务器Nginx反向代理）"></a>React 入门+实战（antd上传文件接受返回+部署服务器Nginx反向代理）</h1><h2 id="React-项目迅速搭建"><a href="#React-项目迅速搭建" class="headerlink" title="React 项目迅速搭建"></a>React 项目迅速搭建</h2><h5 id="前期工作："><a href="#前期工作：" class="headerlink" title="前期工作："></a>前期工作：</h5><ul><li>1、必须安装nodejs      注意：安装nodejs稳定版本</li></ul><ul><li><p>2、安装cnpm：用cnpm替代npm</p><pre><code>安装cnpm:    npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre></li><li><p>3、用yarn替代npm</p></li></ul><pre><code>yarn的安装：    第一种方法：参考官方文档https://yarn.bootcss.com/    第二种方法：cnpm install -g yarn  或者 npm install -g yarn</code></pre><h5 id="搭建项目（初始化）："><a href="#搭建项目（初始化）：" class="headerlink" title="搭建项目（初始化）："></a>搭建项目（初始化）：</h5><p>搭建React开发环境的第一种方法（老-推荐）：</p><pre><code>https://reactjs.org/docs/create-a-new-react-app.html1. 再次提醒：必须要安装nodejs     注意：安装nodejs稳定版本     2. 安装脚手架工具   （单文件组件项目生成工具）   只需要安装一次    npm install -g create-react-app   /  cnpm install -g create-react-app3. 创建项目   （可能创建多次）    找到项目要创建的目录：    create-react-app reactdemo4. cd  到项目里面        cd  reactdemo    npm start          或者   yarn start运行项目    npm run build    或者     yarn build 生成项目（个人喜欢用yarn）</code></pre><h5 id="项目目录结构："><a href="#项目目录结构：" class="headerlink" title="项目目录结构："></a>项目目录结构：</h5><img src="https://img-blog.csdnimg.cn/20200515225213441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x400"  style="zoom:50%;" /><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一般更多需要关注的在于src文件，assets可以放css文件、图片等素材，component就是自定义的组件，比如这里我定义了Home和Result组件，这两个组件最终在src下的App.js根组件中挂载，这里的两个组件其实是我写的两个页面，并且在根组件App.js中实现路由跳转。</p><h5 id="组件结构："><a href="#组件结构：" class="headerlink" title="组件结构："></a>组件结构：</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; React有两种写组件的方式，一种用class extends..来写，另一种用函数式来写，本人较亲耐于函数式，简洁，并且没有this指向的问题，也就是React 后更新的hook特性，第一种写组件的方式中，初始化变量需要：this.setState()，而hook特性带来了useState（）,写法更加简洁，容易理解。</p><ul><li>hook：用const定义function方法来替换以往class定义的方式</li><li>useState()：初始化一个变量——<code>const [variable,setVariable] = useState(variable0)</code><br>后面变量赋值直接用:<code>setVarible(newVariable)</code>,即可改变变量状态</li><li>useEffect()——相当于是以往的生命周期函数： componentDidMount（）；当组件被挂载时，立即启动useEffect，而useEffect的参数是一个function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (    </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><h2 id="antd实战"><a href="#antd实战" class="headerlink" title="antd实战"></a>antd实战</h2><h5 id="upload传文件"><a href="#upload传文件" class="headerlink" title="upload传文件"></a>upload传文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Upload, message, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; UploadOutlined &#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> props = &#123;</span><br><span class="line">        name: <span class="string">'file'</span>,<span class="comment">//name得看接口需求，name与接口需要的name一致</span></span><br><span class="line">        action: <span class="string">'/test/upload/file'</span>,<span class="comment">//接口路径</span></span><br><span class="line">        data: &#123;file&#125; ,<span class="comment">//接口需要的参数，无参数可以不写</span></span><br><span class="line">        multiple: <span class="literal">false</span>,<span class="comment">//支持多个文件</span></span><br><span class="line">        showUploadList: <span class="literal">true</span>,<span class="comment">//展示文件列表</span></span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="comment">// "Content-Type": "multipart/form-data"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      ...</span><br><span class="line">            &lt;Upload &#123;...props&#125;</span><br><span class="line">              fileList=&#123;file&#125;</span><br><span class="line">              onChange=&#123;onChange&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;Button type=<span class="string">"Link"</span> shape=<span class="string">"round"</span> size=<span class="string">"large"</span>&gt;</span><br><span class="line">                &lt;UploadOutlined /&gt; Select file</span><br><span class="line">              &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Upload&gt;</span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure><p>upload传文件这里有几个坑：</p><ol><li><p>本地localhost地址要去调服务器下的接口，应该先解决跨域问题：<br>网上有不少直接在package.json中改，这个现在行不通了，亲测要安装<code>http-proxy-middleware</code><br>即：<code>npm install http-proxy-middleware --save</code>或<code>yarn add http-proxy-middleware --save</code><br>安装完后，在src下新建一个setupProxy.js，附上以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createProxyMiddleware&#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// proxy第一个参数为要代理的路由</span></span><br><span class="line">    <span class="comment">// 第二参数中target为代理后的请求网址，changeOrigin是否改变请求头，其他参数请看官网</span></span><br><span class="line">    app.use(createProxyMiddleware(<span class="string">'/test'</span>, &#123;  </span><br><span class="line">      target: 'http://xxx.xx.xxx.xxx...', # 这里就是你要跨到的服务器接口地址</span><br><span class="line">      changeOrigin: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里修改了之后，记得重启服务后，跨域设置才能生效（<code>yarn start 或 npm start</code>），接着在upload中action位置写上接口后面的地址，不能写全部地址了，得写相对地址，否则会报跨域错误：<br>错误如下：<br><img src="https://img-blog.csdnimg.cn/20200516092446956.png" alt="跨域报错"></p></li><li><p>再就是关于前后端请求头的问题，比较麻烦，每个人遇到的情况都不一定相同，我是传一个xml/pdf文件到后端，接受一个response返回，header里面，我如果像postman那样写<code>&quot;Content-Type&quot;: &quot;multipart/form-data&quot;</code>反而传不过去，但是注释掉后，能正常把文件传到后端，一段时间后在浏览器network里面可以接收到response：<br><img src="https://img-blog.csdnimg.cn/2020051609303713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="response"></p><h2 id="部署到win服务器"><a href="#部署到win服务器" class="headerlink" title="部署到win服务器"></a>部署到win服务器</h2><p>Nginx反向代理</p><h5 id="安装、启动Nginx"><a href="#安装、启动Nginx" class="headerlink" title="安装、启动Nginx"></a>安装、启动Nginx</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我演示的是win服务器的部署，其他的可能略有区别，首先安装Nginx，直接去官网下载安装即可，win下启动cmd</p><pre><code>(1)直接双击nginx.exe，双击后一个黑色的弹窗一闪而过(2)打开cmd命令窗口，切换到nginx解压目录下，输入命令 nginx.exe 或者 start nginx ，回车即可</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在服务器输入：<a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a> ，有Nginx界面则启动成成功。<br><img src="https://img-blog.csdnimg.cn/20200516093828642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="Nginx"></p><h5 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 配置之前，需要先把React项目打包，打包很简单，直接<code>yarn build</code>，会在项目目录生成一个build文件：</p></li></ol><img src="https://img-blog.csdnimg.cn/20200516094110706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =200x400"  style="zoom:50%;" />然后将项目复制到你的win服务器上，在Nginx安装目录下有一个Nginx的conf文件，主要改一下前端端口以及root地址（也就是build文件夹所在地址）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  smartcite;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   C:\samart_cite_fronted\project_pdf2xml\project_pdf2xml\build;</span><br><span class="line">            index  index.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><pre><code>listen  ：设置的端口号server_name  ：访问的名字root   ：你项目所放的地址index index.html  ：你的入口html文件因为是单页应用，所以，是根据路由跳转，为避免出现404，我们需要重写至index.html </code></pre><h5 id="Nginx常用命令："><a href="#Nginx常用命令：" class="headerlink" title="Nginx常用命令："></a>Nginx常用命令：</h5><pre><code>nginx开启命令：start nginxnginx停止命令：nginx -s quitnginx重启命令：nginx -s reload</code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>Nginx部署过程注意：<br>windows server部署react项目</p><ul><li>1.安装并启用nginx服务</li><li>2.在nginx.conf文件中,添加server配置,端口号改为自己想要设置的,然后热重载配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  localhost;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">root   C:\samart_cite_web;</span><br><span class="line">index  index.html;</span><br><span class="line">try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>3.安装Openssl<br>（ssh工具方便传文件，也可以用FileZilla（mac端）、filetransfer（win端））</li><li>4.windows防火墙添加入站规则 将80端口或上述设置的端口添加进去</li><li>5.踩坑：如果前后端在一个服务器上，但是端口不同，同样属于跨域，可以直接在接口地址action位置写全部的接口路径，但是要让后端在响应头里面加几句话允许跨域：<img src="https://imgkr.cn-bj.ufileos.com/bb7f2e5c-0d14-4472-aed8-12cffafb728f.png"  style="zoom:50%;" /></li></ul><h2 id="部署到linux服务器"><a href="#部署到linux服务器" class="headerlink" title="部署到linux服务器"></a>部署到linux服务器</h2><p>相比于Win部署，大差不差！没有win上的防火墙那一步，相对省心一些！</p><ul><li>1.在服务器上安装linux版本的nginx</li><li>2.在服务器上建立一个项目文件夹，例如：<code>/home/smartcite</code></li><li>3.将本地React项目的build包传到linux下的<code>/home/smartcite</code>,</li><li>4.修改linux服务器上的nignx配置：<br>找到default.conf文件，一般在<code>/etc/nginx/sites-available</code>里面，有的也可能在<code>/etc/nginx/conf.d</code>下<br>修改采用：vi default，修改里面对应的root地址(这个地址就是你的项目在linux服务器上的路径)<br>参考博客：<br><a href="https://blog.csdn.net/wly_er/article/details/82348593" target="_blank" rel="noopener">https://blog.csdn.net/wly_er/article/details/82348593</a><br><a href="https://www.jb51.net/article/152781.htm" target="_blank" rel="noopener">https://www.jb51.net/article/152781.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> antd </tag>
            
            <tag> nginx反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫&amp;正则表达式基础</title>
      <link href="2020/04/18/%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/04/18/%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫流程："><a href="#爬虫流程：" class="headerlink" title="爬虫流程："></a>爬虫流程：</h2><img src="https://img-blog.csdnimg.cn/20200418222723979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x400"  style="zoom:50%;" /><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><img src="https://img-blog.csdnimg.cn/20200418222819648.png#pic_center =300x20"  style="zoom:50%;" /><p>正则表达式由<strong>字符</strong>和<strong>操作符</strong>组成</p><p>常用操作符：</p><p><img src="https://img-blog.csdnimg.cn/20200418222925667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>举例：</strong><br><img src="https://img-blog.csdnimg.cn/2020041822295565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>经典正则表达式：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223008713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p>eg：<br><img src="https://img-blog.csdnimg.cn/20200418223031684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>Re库：</strong></p><p>re库可以采用raw string类型表示正则表达式，表示为： <code>r&#39;text&#39;</code>,  PS: raw string是不包含对转义符再次转义的字符串</p><p>例如：<code>r&#39;[1‐9]\d{5}&#39;</code><br>和<code>r&#39;\d{3}‐\d{8}|\d{4}‐\d{7}&#39;</code></p><p><strong>Re库主要函数：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223047511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><p><strong>re.search：</strong>  在整个字符串中搜索匹配<br><img src="https://img-blog.csdnimg.cn/20200418223104156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#100081</span></span><br></pre></td></tr></table></figure><p><strong>re.match:</strong>   与re.search类似，但是是从<strong>字符串开始位置</strong>起匹配表达式，返回match对象<br><img src="https://img-blog.csdnimg.cn/20200418223128432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">match = re.match(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line"><span class="comment">#报错，因为BIT未匹配到</span></span><br></pre></td></tr></table></figure><p><strong>re.findall:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223147180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ls = re.findall(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>)</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># ['10081','10084']</span></span><br></pre></td></tr></table></figure><p><strong>re.split:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223158785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x200"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>)</span><br><span class="line"><span class="comment">#['BIT','TSU','']</span></span><br><span class="line">re.split(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU10084'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#['BIT','TSU100084']</span></span><br></pre></td></tr></table></figure><p><strong>re.finditer:</strong><br><img src="https://img-blog.csdnimg.cn/20200418223212265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line"><span class="comment"># 100081</span></span><br><span class="line"><span class="comment"># 100084</span></span><br></pre></td></tr></table></figure><p><strong>re.sub:</strong><br><img src="https://img-blog.csdnimg.cn/2020041822322519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.sub(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">':zipcode'</span>,<span class="string">"BIT100081 TSU100084"</span>)</span><br><span class="line"><span class="comment"># 'BIT:zipcode TSU:zipcode'</span></span><br></pre></td></tr></table></figure><p><strong>re库的面向对象方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rst = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">"BIT 100081"</span>) <span class="comment">#对比——函数式：一次性操作</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pat = re.compile(<span class="string">r'[1-9]\d&#123;5&#125;'</span>)</span><br><span class="line">rst = pat.search(<span class="string">'BIT 100081'</span>)  <span class="comment">#面向对象用法</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020041822324862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" />**re库的match对象：**<p>match对象是一次匹配的结果，包含匹配的很多信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT 100081'</span>)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">  print(match.group(<span class="number">0</span>))</span><br><span class="line">type(match)</span><br><span class="line"><span class="comment"># &lt;class '_sre.SRE_Match'&gt;</span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200418223304921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">m =re.search(<span class="string">r'[1-9]\d&#123;5&#125;'</span>,<span class="string">'BIT100081 TSU100084'</span>)</span><br><span class="line">m.string</span><br><span class="line"><span class="comment">#"BIT100081 TSU100084"</span></span><br><span class="line">m.pos</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line">m.endpos</span><br><span class="line"><span class="comment"># 19</span></span><br><span class="line">m.group(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># '100081'</span></span><br><span class="line">m.start()</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">m.end()</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line">m.span()</span><br><span class="line"><span class="comment"># (3,9)</span></span><br></pre></td></tr></table></figure><p><strong>re库的贪婪匹配和最小匹配：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 贪婪匹配——默认采用贪婪匹配，即输出匹配最长的子串</span></span><br><span class="line">match = re.search(<span class="string">r'PY.*N'</span>,<span class="string">'PYANBNCNDN'</span>) <span class="comment"># *代表对前一个字符,也就是'.'的无限次或0次扩展，而'.'为任意</span></span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 'PYANBNCNDN'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最小匹配：加一个问号</span></span><br><span class="line">match = re.search(<span class="string">r'PY.*?N'</span>,<span class="string">'PYANBNCNDN'</span>)</span><br><span class="line">match.group(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/2020041822333165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><p><strong>总结：</strong><br><img src="https://img-blog.csdnimg.cn/20200418223712255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>参考：<br>b站视频：嵩天教授的Python网络爬虫与信息提取课程</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 文本处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本处理 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transformer 原理+源码分析总结(Tensorflow官方源码)</title>
      <link href="2020/04/11/Transformer-%E5%8E%9F%E7%90%86-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93-Tensorflow%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/"/>
      <url>2020/04/11/Transformer-%E5%8E%9F%E7%90%86-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93-Tensorflow%E5%AE%98%E6%96%B9%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Transformer理解"><a href="#Transformer理解" class="headerlink" title="Transformer理解"></a>Transformer理解</h2><p><strong>参考博客：</strong><br><a href="https://jalammar.github.io/illustrated-transformer/" target="_blank" rel="noopener">https://jalammar.github.io/illustrated-transformer/</a><br><a href="https://github.com/aespresso/a_journey_into_math_of_ml" target="_blank" rel="noopener">https://github.com/aespresso/a_journey_into_math_of_ml</a><br><a href="https://www.tensorflow.org/tutorials/text/transformer#encoder_and_decoder" target="_blank" rel="noopener">https://www.tensorflow.org/tutorials/text/transformer#encoder_and_decoder</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学了 TextCNN、LSTM后，谈起如今NLP最流行、最热的模型，当然是Transformer、bert，语言模型、命名实体识别、机器翻译等任务，很多都开始用Transformer，或者说是bert预训练模型来做，在机器阅读理解榜单中（SQuAD2.0），机器成绩已经超越人类表现！<br>这些天看了几个经典博客、视频，最后读了一遍源码，加深了对模型的理解，整体结构也基本上理顺了。</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <strong>transformer</strong>是谷歌大脑在2017年底发表的论文 attention is all you need中所提出的seq2seq模型。现在已经取得了大范围的应用和扩展,而BERT就是从 transformer中衍生出来的预训练语言模型。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中主要的应用的方式是2步——先进行预训练语言模型——然后把预训练的模型适配给下游任务（分类、生成、标记等）。其中：<strong>预训练模型</strong>非常重要,预训练的模型的性能直接影响下游任务。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>先上图吧：<br><img src="https://img-blog.csdnimg.cn/20200411142658336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x500"  style="zoom:30%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 整个Transformer结构分为：Encoding（编码器）和Decoding（解码器）两大部分；而编码器又有N个编码器层，解码器也有N个解码器层；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么先把一个编码器层搞清楚，串联N个就能理解了；理解好了编码器，解码器就快了。<br>一个编码器层包含五个组成部分：<br>$\begin{cases} 1. Positional Encoding\\2.Multi-Head Attention\\3. Add\&amp;Norm\\4.FeedForward\\5.Add\&amp;Norm\end{cases}$<br>看似很复杂，一个一个来就不怕：</p><h4 id="1-Positional-Encoding"><a href="#1-Positional-Encoding" class="headerlink" title="1.Positional Encoding"></a>1.Positional Encoding</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 首先得清楚<strong>为何Transformer用位置嵌入</strong>？在LSTM中我们用一个词一个词灌进去，从而学习了时序关系，但是transformer模型<strong>没有</strong>循环神经网络的迭代操作, 它是将所有词一起喂进去，并行操作的。所以我们必须提供每个字的<strong>位置信息</strong>给transformer, 才能识别出语言中的顺序关系。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 位置嵌入的定义其实就是作者自定义的一个函数，来做到区别每个词在句子中的位置，仅此而已。<br><strong>定义 ：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 位置嵌入的维度为$[max \ sequence \ length, \ embedding \ dimension]$, 嵌入的维度同词向量的维度, $max \ sequence \ length$属于超参数, 指的是限定的最大单个句长.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在transformer模型中,一般以字为单位，不需要分词了, 首先我们要初始化字向量为$[vocab \ size, \ embedding \ dimension]$, $vocab \ size$为总共的字库数量, $embedding \ dimension$为字向量的维度, 也是每个字的向量。（这里的理解和之前的TextCNN LSTM中的$Embedding$一致！）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在这里论文中使用了$sine$和$cosine$函数的线性变换来提供给模型位置信息:<br>$$PE_{(pos,2i)} = sin(pos / 10000^{2i/d_{\text{model}}}) \quad PE_{(pos,2i+1)} = cos(pos / 10000^{2i/d_{\text{model}}})$$<br>上式中$pos$指的是句中字的位置, 取值范围是$[0, \ max \ sequence \ length)$, $i$指的是词向量的维度, 取值范围是$[0, \ embedding \ dimension)$, 上面有$sin$和$cos$一组公式, 也就是对应着$embedding \ dimension$维度的一组奇数和偶数的序号的维度, 例如$0, 1$一组, $2, 3$一组, 分别用上面的$sin$和$cos$函数做处理, 从而产生不同的周期性变化。<br>看源码（就是对应的上面的公式）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_angles</span><span class="params">(pos, i, d_model)</span>:</span></span><br><span class="line">  angle_rates = <span class="number">1</span> / np.power(<span class="number">10000</span>, (<span class="number">2</span> * (i//<span class="number">2</span>)) / np.float32(d_model))</span><br><span class="line">  <span class="keyword">return</span> pos * angle_rates</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positional_encoding</span><span class="params">(position, d_model)</span>:</span></span><br><span class="line">  angle_rads = get_angles(np.arange(position)[:, np.newaxis],</span><br><span class="line">                          np.arange(d_model)[np.newaxis, :],</span><br><span class="line">                          d_model)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 将 sin 应用于数组中的偶数索引（indices）；2i</span></span><br><span class="line">  angle_rads[:, <span class="number">0</span>::<span class="number">2</span>] = np.sin(angle_rads[:, <span class="number">0</span>::<span class="number">2</span>])</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 将 cos 应用于数组中的奇数索引；2i+1</span></span><br><span class="line">  angle_rads[:, <span class="number">1</span>::<span class="number">2</span>] = np.cos(angle_rads[:, <span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">  pos_encoding = angle_rads[np.newaxis, ...]</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> tf.cast(pos_encoding, dtype=tf.float32)</span><br></pre></td></tr></table></figure><p>输出这个周期性的矩阵图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pos_encoding = positional_encoding(<span class="number">50</span>, <span class="number">512</span>)</span><br><span class="line"><span class="keyword">print</span> (pos_encoding.shape)</span><br><span class="line"></span><br><span class="line">plt.pcolormesh(pos_encoding[<span class="number">0</span>], cmap=<span class="string">'RdBu'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Depth'</span>)</span><br><span class="line">plt.xlim((<span class="number">0</span>, <span class="number">512</span>))</span><br><span class="line">plt.ylabel(<span class="string">'Position'</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411150113592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x300"  style="zoom:50%;" /><h4 id="2-Muti-Head-Attention"><a href="#2-Muti-Head-Attention" class="headerlink" title="2.Muti-Head Attention"></a>2.Muti-Head Attention</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在前面的基础上，我们已经有了词向量矩阵和位置嵌入了，例如有一些样本。维度是：$[batch size, \ sequence \ length]$,再在字典中找到对应的字向量，变为：$[batch size, \ sequence \ length, \ embedding \ dimension]$,同时我们再加上位置嵌入（位置嵌入维度一致，直接元素相加即可），相加后的维度还是$[batch size, \ sequence \ length, \ embedding \ dimension]$<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要了解Muti-Head Attention，首先要知道self-attention,Multi无非是在其基础上并行了多个头而已。</p><h5 id="2-1-self-Attention"><a href="#2-1-self-Attention" class="headerlink" title="2.1 self Attention"></a>2.1 self Attention</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Attention机制的创新点就在于这里，为了学到多重含义的表示，我们想让一个字的向量包含这句话所有字的一个相关程度（后面还会说），那么首先初始化三个权重矩阵$W_Q、W_K、W_V$，然后将$X_{embedding}$与这三个权重矩阵相乘，得到$Q、K、V$<br>也就是：<br>$$\begin{cases}Q=X_{embedding} W_Q \ K=X_{embedding} W_K \ V=X_{embedding} W_V\end{cases}$$<br>下面用图来理解更舒适！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9qYWxhbW1hci5naXRodWIuaW8vaW1hZ2VzL3QvdHJhbnNmb3JtZXJfc2VsZl9hdHRlbnRpb25fc2NvcmUucG5n?x-oss-process=image/format,png#pic_center =500x300"  style="zoom:50%;" /></p><p>得到了$Q、K、V$之后 那么我们用$q\times k$也就是对于一个字（中文是字，英文是词）它的score包含所有的自身$q$和别的字的$k$相乘,当然这里相乘肯定是和$k$的转置相乘哈！从而就可以得到一个注意力矩阵！(点积：两个向量越相似，点积则越大！)这里你会观察到，对角线上也就是每个字，自己对自己的相关程度，一行就是一个字中所有字与它的相关性。然后再对每一行做归一化（$softmax$），这样就保证对一个字来说，所有字与它的相关程度概率和为1！<br><img src="https://img-blog.csdnimg.cn/20200411153038943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =300x200"  style="zoom:50%;" /><br>然后论文中又除了一个$\sqrt{d_k}$,是为了把注意力矩阵变成标准正态分布，使得softmax归一化后的结果更加稳定，以便于反向传播时候获取平衡的梯度，最后将注意力矩阵给$V$加权，为啥要给$V$加权，其实就是因为注意力矩阵维度是$[batch \ size, \ sequence \ length, \ sequence \ length]$，而$V$维度是$[batch \ size ,\ sequence \ length, \ embedding \ dimension]$为了使得维度保持不变，则乘以$V$后为: $[batch \ size ,\ sequence \ length, \ embedding \ dimension]$,从而再次和$X_{embedding}$的维度相同了，是不是很妙！<br>$${Attention(Q, K, V) = softmax_k(\frac{QK^T}{\sqrt{d_k}}) V} $$<br>下图是论文中对$d_k$的解释：<br><img src="https://img-blog.csdnimg.cn/20200411155134175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="论文"></p><h6 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h6><p>包含$Q，K$相乘，注意到相乘的时候有个转置操作，以及后面对$V$加权，和我们给出的公式其实是一致的，这里的mask语句后面会讲。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaled_dot_product_attention</span><span class="params">(q, k, v, mask)</span>:</span></span><br><span class="line">  <span class="string">"""计算注意力权重。</span></span><br><span class="line"><span class="string">  q, k, v 必须具有匹配的前置维度。</span></span><br><span class="line"><span class="string">  k, v 必须有匹配的倒数第二个维度，例如：seq_len_k = seq_len_v。</span></span><br><span class="line"><span class="string">  虽然 mask 根据其类型（填充或前瞻）有不同的形状，</span></span><br><span class="line"><span class="string">  但是 mask 必须能进行广播转换以便求和。</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  参数:</span></span><br><span class="line"><span class="string">    q: 请求的形状 == (..., seq_len_q, depth)</span></span><br><span class="line"><span class="string">    k: 主键的形状 == (..., seq_len_k, depth)</span></span><br><span class="line"><span class="string">    v: 数值的形状 == (..., seq_len_v, depth_v)</span></span><br><span class="line"><span class="string">    mask: Float 张量，其形状能转换成</span></span><br><span class="line"><span class="string">          (..., seq_len_q, seq_len_k)。默认为None。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  返回值:</span></span><br><span class="line"><span class="string">    输出，注意力权重</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">  matmul_qk = tf.matmul(q, k, transpose_b=<span class="literal">True</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 缩放 matmul_qk</span></span><br><span class="line">  dk = tf.cast(tf.shape(k)[<span class="number">-1</span>], tf.float32)</span><br><span class="line">  scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将 mask 加入到缩放的张量上。</span></span><br><span class="line">  <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    scaled_attention_logits += (mask * <span class="number">-1e9</span>)  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># softmax 在最后一个轴（seq_len_k）上归一化，因此分数   （对注意力矩阵每一行归一化，则每个字的注意力向量一行，就是与其余字的相关程度，和为1）</span></span><br><span class="line">  <span class="comment"># 相加等于1。</span></span><br><span class="line">  attention_weights = tf.nn.softmax(scaled_attention_logits, axis=<span class="number">-1</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)  注意力矩阵</span></span><br><span class="line"></span><br><span class="line">  output = tf.matmul(attention_weights, v)  <span class="comment"># (..., seq_len_q, depth_v)  再把注意力矩阵乘V</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h5 id="2-2-Multi-Head-Attention"><a href="#2-2-Multi-Head-Attention" class="headerlink" title="2.2 Multi-Head Attention"></a>2.2 Multi-Head Attention</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 那么对于多头其实是一样的，只是在开始的时候将$embedding \ dimension$分割成了$h$份（头的个数）,这里每个头权重都不同，多头训练效果理论上肯定更好（反正想着就是这样，至于为什么，也不好解释）<br>，最后再把它及联拼接。大佬的图展现的很好：<br><img src="https://jalammar.github.io/images/t/transformer_multi-headed_self-attention-recap.png" zoom="100%" alt="多头级联"></p><h6 id="源码分析：-1"><a href="#源码分析：-1" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiHeadAttention</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads)</span>:</span></span><br><span class="line">    super(MultiHeadAttention, self).__init__()</span><br><span class="line">    self.num_heads = num_heads</span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> d_model % self.num_heads == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    self.depth = d_model // self.num_heads   <span class="comment">#本来QKV维度：【batch size，seq.length,embed dim】,拆分后就是【batch size，seq length，h，embed dim/h】</span></span><br><span class="line">                                            <span class="comment"># depth 就是用embed dim 除头的个数</span></span><br><span class="line">    </span><br><span class="line">    self.wq = tf.keras.layers.Dense(d_model)  <span class="comment">#初始化qkv矩阵</span></span><br><span class="line">    self.wk = tf.keras.layers.Dense(d_model)</span><br><span class="line">    self.wv = tf.keras.layers.Dense(d_model)</span><br><span class="line">    </span><br><span class="line">    self.dense = tf.keras.layers.Dense(d_model)</span><br><span class="line">        </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">split_heads</span><span class="params">(self, x, batch_size)</span>:</span> </span><br><span class="line">    <span class="string">"""拆分embedding dimension维度到 (num_heads, depth)，</span></span><br><span class="line"><span class="string">    这里的 depth=embed dim/h</span></span><br><span class="line"><span class="string">    转置结果使得形状为 (batch_size, num_heads, seq_len, depth)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    x = tf.reshape(x, (batch_size, <span class="number">-1</span>, self.num_heads, self.depth))</span><br><span class="line">    <span class="keyword">return</span> tf.transpose(x, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, v, k, q, mask)</span>:</span></span><br><span class="line">    batch_size = tf.shape(q)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    q = self.wq(q)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    k = self.wk(k)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    v = self.wv(v)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    q = self.split_heads(q, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_q, depth)</span></span><br><span class="line">    k = self.split_heads(k, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_k, depth)</span></span><br><span class="line">    v = self.split_heads(v, batch_size)  <span class="comment"># (batch_size, num_heads, seq_len_v, depth)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># scaled_attention.shape == (batch_size, num_heads, seq_len_q, depth)   之前没有分头的时候是：【batch size,seq</span></span><br><span class="line">     <span class="comment">#length,embed dim】</span></span><br><span class="line">    <span class="comment"># attention_weights.shape == (batch_size, num_heads, seq_len_q, seq_len_k)</span></span><br><span class="line">    scaled_attention, attention_weights = scaled_dot_product_attention(</span><br><span class="line">        q, k, v, mask)</span><br><span class="line">    </span><br><span class="line">    scaled_attention = tf.transpose(scaled_attention, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])  <span class="comment"># (batch_size, seq_len_q, num_heads, depth)  转置操作</span></span><br><span class="line"></span><br><span class="line">    concat_attention = tf.reshape(scaled_attention, </span><br><span class="line">                                  (batch_size, <span class="number">-1</span>, self.d_model))  <span class="comment"># (batch_size, seq_len_q, d_model) 级联操作 看下图</span></span><br><span class="line"></span><br><span class="line">    output = self.dense(concat_attention)  <span class="comment"># (batch_size, seq_len_q, d_model)</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h5 id="2-3-Mask"><a href="#2-3-Mask" class="headerlink" title="2.3 Mask"></a>2.3 Mask</h5><p>有两个mask：$\begin{cases}1.padding \  mask  \\2.lookahead mask（翻译任务中预测文本时(decoder部分))\end{cases}$</p><h6 id="2-3-1-padding-mask"><a href="#2-3-1-padding-mask" class="headerlink" title="2.3.1 padding mask"></a>2.3.1 padding mask</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当我们在确定$Max \  length$时候，对于不够长的句子肯定要做$padding$但是对于为0的那一部分在$softmax$时候会变为1：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 回顾$softmax$函数:</p><p>$$<br>\sigma (\mathbf {z} )_{i}= \frac {e^{z_i} } {\sum _{j=1} ^ {K} e^ {z_j} }<br>$$</p><p>$$ $$</p><p>$e^0$是1, 是有值的, 这样的话 $softmax$ 中被 $padding$ 的部分就参与了运算, 就等于是让无效的部分参与了运算,这样肯定不对, 这时就需要做一个$mask$让这些无效区域不参与运算, 我们一般给无效区域加一个很大的负数的偏置, 也就是:</p><p>$$z_{illegal}=z_{illegal}+bias_{illegal}$$<br>$$bias_{illegal}\to-\infty$$<br>$$e^{z_{illegal}}\to0$$</p><h6 id="源码分析：-2"><a href="#源码分析：-2" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_padding_mask</span><span class="params">(seq)</span>:</span></span><br><span class="line">  seq = tf.cast(tf.math.equal(seq, <span class="number">0</span>), tf.float32)</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 添加额外的维度来将填充加到</span></span><br><span class="line">  <span class="comment"># 注意力对数（logits）。</span></span><br><span class="line">  <span class="keyword">return</span> seq[:, tf.newaxis, tf.newaxis, :]  <span class="comment"># (batch_size, 1, 1, seq_len)</span></span><br></pre></td></tr></table></figure><p>输出效果(把原本为0的地方变成了1)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = tf.constant([[<span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line">create_padding_mask(x)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411161219194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x150"  style="zoom:50%;" />最后再在一句代码中体现，如果mask不是None，则在此处乘以负无穷：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scaled_dot_product_attention</span><span class="params">(q, k, v, mask)</span>:</span></span><br><span class="line">  <span class="string">"""计算注意力权重。</span></span><br><span class="line"><span class="string">  q, k, v 必须具有匹配的前置维度。</span></span><br><span class="line"><span class="string">  k, v 必须有匹配的倒数第二个维度，例如：seq_len_k = seq_len_v。</span></span><br><span class="line"><span class="string">  虽然 mask 根据其类型（填充或前瞻）有不同的形状，</span></span><br><span class="line"><span class="string">  但是 mask 必须能进行广播转换以便求和。</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  参数:</span></span><br><span class="line"><span class="string">    q: 请求的形状 == (..., seq_len_q, depth)</span></span><br><span class="line"><span class="string">    k: 主键的形状 == (..., seq_len_k, depth)</span></span><br><span class="line"><span class="string">    v: 数值的形状 == (..., seq_len_v, depth_v)</span></span><br><span class="line"><span class="string">    mask: Float 张量，其形状能转换成</span></span><br><span class="line"><span class="string">          (..., seq_len_q, seq_len_k)。默认为None。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  返回值:</span></span><br><span class="line"><span class="string">    输出，注意力权重</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line"></span><br><span class="line">  matmul_qk = tf.matmul(q, k, transpose_b=<span class="literal">True</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 缩放 matmul_qk</span></span><br><span class="line">  dk = tf.cast(tf.shape(k)[<span class="number">-1</span>], tf.float32)</span><br><span class="line">  scaled_attention_logits = matmul_qk / tf.math.sqrt(dk)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将 mask 加入到缩放的张量上。</span></span><br><span class="line">  <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    scaled_attention_logits += (mask * <span class="number">-1e9</span>)  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># softmax 在最后一个轴（seq_len_k）上归一化，因此分数   （对注意力矩阵每一行归一化，则每个字的注意力向量一行，就是与其余字的相关程度，和为1）</span></span><br><span class="line">  <span class="comment"># 相加等于1。</span></span><br><span class="line">  attention_weights = tf.nn.softmax(scaled_attention_logits, axis=<span class="number">-1</span>)  <span class="comment"># (..., seq_len_q, seq_len_k)  注意力矩阵</span></span><br><span class="line"></span><br><span class="line">  output = tf.matmul(attention_weights, v)  <span class="comment"># (..., seq_len_q, depth_v)  再把注意力矩阵乘V</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> output, attention_weights</span><br></pre></td></tr></table></figure><h6 id="2-3-2-Lookahead-mask"><a href="#2-3-2-Lookahead-mask" class="headerlink" title="2.3.2 Lookahead mask"></a>2.3.2 Lookahead mask</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里我也不知道咋翻译（前瞻遮罩？）这个mask操作就是在翻译的时候，要预测第三个词，将仅使用第一个和第二个词，与此类似，预测第四个词，仅使用第一个，第二个和第三个词，依此类推。</p><h6 id="源码分析：-3"><a href="#源码分析：-3" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_look_ahead_mask</span><span class="params">(size)</span>:</span></span><br><span class="line">  mask = <span class="number">1</span> - tf.linalg.band_part(tf.ones((size, size)), <span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> mask  <span class="comment"># (seq_len, seq_len)</span></span><br></pre></td></tr></table></figure><p>  <strong>输出结果：</strong><br>  (每一行是一个时刻，第一个时刻，遮盖了后两个（遮盖操作后也就是变为了1）)，用第一个字预测第二个字；第二个时刻，遮盖了第三个字，用第1、2个字预测第三个字；第三个时刻，则是用前三个字去预测结束符……当然这里其实每次预测的时候解码器还加上了编码器输出的embedding向量，这一点后面会详细说！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = tf.random.uniform((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">temp = create_look_ahead_mask(x.shape[<span class="number">1</span>])</span><br><span class="line">print(x)</span><br><span class="line">temp</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200411162211193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /><h4 id="3-Add-amp-Norm"><a href="#3-Add-amp-Norm" class="headerlink" title="3.Add&amp;Norm"></a>3.Add&amp;Norm</h4><h5 id="3-1残差连接"><a href="#3-1残差连接" class="headerlink" title="3.1残差连接"></a>3.1残差连接</h5><p><strong>归纳：模型太深，需要避免梯度消失</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们在上一步得到了经过注意力矩阵加权之后的$V$, 也就是$Attention(Q, \ K, \ V)$, 我们对它进行一下转置, 使其和$X_{embedding}$的维度一致, 也就是$[batch \ size, \ sequence \ length, \ embedding \ dimension]$, 然后把他们加起来做残差连接, 直接进行元素相加, 因为他们的维度一致:<br>$$X_{embedding} + Attention(Q, \ K, \ V)$$<br>在之后的运算里, 每经过一个模块的运算, 都要把运算之前的值和运算之后的值相加, 从而得到残差连接, 训练的时候可以使梯度直接走捷径反传到最初始层:<br>$$X + SubLayer(X) $$</p><h5 id="3-2-LayerNorm"><a href="#3-2-LayerNorm" class="headerlink" title="3.2 $LayerNorm$:"></a>3.2 $LayerNorm$:</h5><p><strong>归纳：加速收敛</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $Layer Normalization$的作用是把神经网络中隐藏层归一为标准正态分布, 也就是$i.i.d$独立同分布, 以起到加快训练速度, 加速收敛的作用:<br>$$ \mu_i=\frac {1} {m}\sum^{m} _ { i=1 } x _ {ij} $$<br>上式中以矩阵的行$(row)$为单位求均值;<br>$$\sigma^{2} _ { j } =\frac { 1 } { m } \sum^ { m } _ { i=1 } (x _ { ij } -\mu_ { j } )^ { 2 } $$<br>上式中以矩阵的行$(row)$为单位求方差;<br>$$LayerNorm(x)=\alpha \odot \frac{x_{ij}-\mu_{i}}<br>{\sqrt{\sigma^{2}_{i}+\epsilon}} + \beta \tag{eq.6}$$<br>然后用<strong>每一行</strong>的<strong>每一个元素</strong>减去<strong>这行的均值</strong>, 再除以<strong>这行的标准差</strong>, 从而得到归一化后的数值, $\epsilon$是为了防止除$0$;<br>之后引入两个可训练参数$\alpha, \ \beta$来弥补归一化的过程中损失掉的信息, 注意$\odot$表示元素相乘而不是点积, 我们一般初始化$\alpha$为全$1$, 而$\beta$为全$0$.</p><h6 id="源码分析：-4"><a href="#源码分析：-4" class="headerlink" title="源码分析："></a>源码分析：</h6><p>在源码中就是一个加号代表了一切！<code>out1 = self.layernorm1(x + attn_output)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncoderLayer</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads, dff, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(EncoderLayer, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.mha = MultiHeadAttention(d_model, num_heads)   </span><br><span class="line">    self.ffn = point_wise_feed_forward_network(d_model, dff)  <span class="comment"># 前向传播</span></span><br><span class="line"></span><br><span class="line">    self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    </span><br><span class="line">    self.dropout1 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout2 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    attn_output, _ = self.mha(x, x, x, mask)  <span class="comment"># (batch_size, input_seq_len, d_model)  三个x代表上一层的输出，N个encoder是串联的</span></span><br><span class="line">    attn_output = self.dropout1(attn_output, training=training)</span><br><span class="line">    out1 = self.layernorm1(x + attn_output)  <span class="comment"># (batch_size, input_seq_len, d_model) 残差连接</span></span><br><span class="line">    </span><br><span class="line">    ffn_output = self.ffn(out1)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    ffn_output = self.dropout2(ffn_output, training=training)</span><br><span class="line">    out2 = self.layernorm2(out1 + ffn_output)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> out2</span><br></pre></td></tr></table></figure><h4 id="4-FeedForward"><a href="#4-FeedForward" class="headerlink" title="4.FeedForward"></a>4.FeedForward</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前向传播层，就是一个全连接，<code>dff</code>设置了内部全连接层数，和以往的没什么区别，不多说了。</p><h5 id="源码分析：-5"><a href="#源码分析：-5" class="headerlink" title="源码分析："></a>源码分析：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point_wise_feed_forward_network</span><span class="params">(d_model, dff)</span>:</span> <span class="comment"># dff内部层维数</span></span><br><span class="line">  <span class="keyword">return</span> tf.keras.Sequential([</span><br><span class="line">      tf.keras.layers.Dense(dff, activation=<span class="string">'relu'</span>),  <span class="comment"># (batch_size, seq_len, dff)</span></span><br><span class="line">      tf.keras.layers.Dense(d_model)  <span class="comment"># (batch_size, seq_len, d_model)</span></span><br><span class="line">  ])</span><br></pre></td></tr></table></figure><h4 id="Transformer-encoder整体结构"><a href="#Transformer-encoder整体结构" class="headerlink" title="Transformer encoder整体结构"></a>Transformer encoder整体结构</h4><p>1). 字向量与位置编码:<br>$$X = EmbeddingLookup(X) + PositionalEncoding $$<br>$$X \in \mathbb{R}^{batch \ size  \ * \  seq. \ len. \  * \  embed. \ dim.} $$<br>2). 自注意力机制:<br>$$Q = Linear(X) = XW_{Q}$$<br>$$K = Linear(X) = XW_{K} $$<br>$$V = Linear(X) = XW_{V}$$<br>$$X_{attention} = SelfAttention(Q, \ K, \ V) $$<br>3). 残差连接与$Layer \ Normalization$<br>$$X_{attention} = X + X_{attention} $$<br>$$X_{attention} = LayerNorm(X_{attention}) $$<br>4). $FeedForward$, 其实就是两层线性映射并用激活函数激活, 比如说$ReLU$:<br>$$X_{hidden} = Activate(Linear(Linear(X_{attention})))$$<br>5). 重复3).:<br>$$X_{hidden} = X_{attention} + X_{hidden}$$<br>$$X_{hidden} = LayerNorm(X_{hidden})$$<br>$$X_{hidden} \in \mathbb{R}^{batch \ size  \ * \  seq. \ len. \  * \  embed. \ dim.} $$</p><h4 id="Transformer-decoder部分"><a href="#Transformer-decoder部分" class="headerlink" title="Transformer decoder部分"></a>Transformer decoder部分</h4><img src="https://img-blog.csdnimg.cn/20200411142658336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =500x500"  style="zoom:30%;" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 还是这个图最直观，注意观察编码器和解码器的差异，最下面的一块其实差不多，只是解码器加了一个Mask，这个mask当然是Lookahead mask，因为翻译任务里面，我们是在解码器中输入一个词，解码器拿着编码器最终隐藏层输出的向量来预测下一个词，所以需要去遮盖后面的词：**解码器预测过程：**第1时刻——输入'I，解码器拿着编码器输出的embedding向量去预测'am'。第2时刻——输入'am'，解码器拿着embedding向量 + 'I' 去预测 'a'第3时刻——输入'a',编码器拿着embedding向量 + 'I' + 'a' 去预测 'student'...<img src="https://img-blog.csdnimg.cn/20200411171038906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center =600x300"  style="zoom:30%;" /><h6 id="源码分析：-6"><a href="#源码分析：-6" class="headerlink" title="源码分析："></a>源码分析：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoderLayer</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d_model, num_heads, dff, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(DecoderLayer, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.mha1 = MultiHeadAttention(d_model, num_heads)  <span class="comment">#decoder中有两个MultiHeadAttention，最下面一个有Lookahead mask，上面一个有padding mask</span></span><br><span class="line">    self.mha2 = MultiHeadAttention(d_model, num_heads)</span><br><span class="line"></span><br><span class="line">    self.ffn = point_wise_feed_forward_network(d_model, dff)</span><br><span class="line"> </span><br><span class="line">    self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=<span class="number">1e-6</span>)</span><br><span class="line">    </span><br><span class="line">    self.dropout1 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout2 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    self.dropout3 = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, enc_output, training, </span></span></span><br><span class="line"><span class="function"><span class="params">           look_ahead_mask, padding_mask)</span>:</span></span><br><span class="line">    <span class="comment"># enc_output.shape == (batch_size, input_seq_len, d_model)</span></span><br><span class="line"></span><br><span class="line">    attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)  <span class="comment"># (batch_size, target_seq_len, d_model)下面一个，这里的输入和encoder一样 也是三个x</span></span><br><span class="line">    attn1 = self.dropout1(attn1, training=training)</span><br><span class="line">    out1 = self.layernorm1(attn1 + x)</span><br><span class="line">    </span><br><span class="line">    attn2, attn_weights_block2 = self.mha2(</span><br><span class="line">        enc_output, enc_output, out1, padding_mask)  <span class="comment"># (batch_size, target_seq_len, d_model) 上面一个，这里的输入不同，要注意：是两个encoder输出和一个decoder输出；但是维数都是一样的</span></span><br><span class="line">    attn2 = self.dropout2(attn2, training=training)</span><br><span class="line">    out2 = self.layernorm2(attn2 + out1)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    ffn_output = self.ffn(out2)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    ffn_output = self.dropout3(ffn_output, training=training)</span><br><span class="line">    out3 = self.layernorm3(ffn_output + out2)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> out3, attn_weights_block1, attn_weights_block2      <span class="comment"># 再有N个decoder串联</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里的<code>self.mha1</code>和<code>self.mha2</code>就是图中解码器层定义的两个Multi-Head Attention，这里上面的Multi-Head Attention也就是<code>self.mha2</code>，它是只做了padding mask的，这个和编码器的一致，但是下面的这个Multi-Head Attention（<code>self.mha1</code>）就不一样了，它的mask自然是Lookahead mask，用于遮盖后面的词，现在基本上前后就可以串起来了！<br>注意看两个的输入：</p><figure class="highlight plain"><figcaption><span>x, x, look_ahead_mask)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;self.mha2(enc_output, enc_output, out1, padding_mask)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于下面的Multi-Head Attention<code>self.mha1</code>，它和编码器层那里的代码一致，都是接收三个相同的x（也就是q、k、v）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但是对于上面的Multi-Head Attention<code>self.mha2</code>，它的输入是不同的，它是用的编码器的输出和解码器下面的Multi-Head Attention<code>self.mha1</code>的输出<code>out1</code>来共同输出<code>out3</code>，之前不理解为什么编码器那里要写三个x，写一个不也可以吗？反正都是一样，现在明白了，是为了和解码器这里的输入做到格式一致！！！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码器层、解码器层都理解完了，最后编码器串联N个，解码器串联N个就OK啦！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 一个图说明了一切：<br><img src="https://img-blog.csdnimg.cn/20200411173424382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70"  style="zoom:50%;" /></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 之前不理解为什么画了这么多的线，一根线不行吗？还真不行，因为每次的解码器在预测的时候需要拿编码器输出的embedding向量呀！！</p><h6 id="源码分析：-7"><a href="#源码分析：-7" class="headerlink" title="源码分析："></a>源码分析：</h6><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 编码器和解码器无非就是做了N个编码器层和解码器层，然后这里的<code>training</code>代表的是否训练，因为训练的时候和预测的时候不一样。<br><strong>编码器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encoder</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_layers, d_model, num_heads, dff, input_vocab_size,</span></span></span><br><span class="line"><span class="function"><span class="params">               maximum_position_encoding, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(Encoder, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    self.num_layers = num_layers</span><br><span class="line">    </span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)</span><br><span class="line">    self.pos_encoding = positional_encoding(maximum_position_encoding, </span><br><span class="line">                                            self.d_model)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) </span><br><span class="line">                       <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_layers)]</span><br><span class="line">  </span><br><span class="line">    self.dropout = tf.keras.layers.Dropout(rate)</span><br><span class="line">        </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, training, mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    seq_len = tf.shape(x)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将嵌入和位置编码相加。</span></span><br><span class="line">    x = self.embedding(x)  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br><span class="line">    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))</span><br><span class="line">    x += self.pos_encoding[:, :seq_len, :]</span><br><span class="line"></span><br><span class="line">    x = self.dropout(x, training=training)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_layers):</span><br><span class="line">      x = self.enc_layers[i](x, training, mask)   <span class="comment">#上一层的输出是下一层的输入 体现在这里</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x  <span class="comment"># (batch_size, input_seq_len, d_model)</span></span><br></pre></td></tr></table></figure><p><strong>解码器：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decoder</span><span class="params">(tf.keras.layers.Layer)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_layers, d_model, num_heads, dff, target_vocab_size,</span></span></span><br><span class="line"><span class="function"><span class="params">               maximum_position_encoding, rate=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    super(Decoder, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.d_model = d_model</span><br><span class="line">    self.num_layers = num_layers</span><br><span class="line">    </span><br><span class="line">    self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)</span><br><span class="line">    self.pos_encoding = positional_encoding(maximum_position_encoding, d_model)</span><br><span class="line">    </span><br><span class="line">    self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) </span><br><span class="line">                       <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_layers)]</span><br><span class="line">    self.dropout = tf.keras.layers.Dropout(rate)</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(self, x, enc_output, training, </span></span></span><br><span class="line"><span class="function"><span class="params">           look_ahead_mask, padding_mask)</span>:</span></span><br><span class="line"></span><br><span class="line">    seq_len = tf.shape(x)[<span class="number">1</span>]</span><br><span class="line">    attention_weights = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    x = self.embedding(x)  <span class="comment"># (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))</span><br><span class="line">    x += self.pos_encoding[:, :seq_len, :]</span><br><span class="line">    </span><br><span class="line">    x = self.dropout(x, training=training)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_layers):</span><br><span class="line">      x, block1, block2 = self.dec_layers[i](x, enc_output, training,</span><br><span class="line">                                             look_ahead_mask, padding_mask)</span><br><span class="line">      </span><br><span class="line">      attention_weights[<span class="string">'decoder_layer&#123;&#125;_block1'</span>.format(i+<span class="number">1</span>)] = block1</span><br><span class="line">      attention_weights[<span class="string">'decoder_layer&#123;&#125;_block2'</span>.format(i+<span class="number">1</span>)] = block2</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># x.shape == (batch_size, target_seq_len, d_model)</span></span><br><span class="line">    <span class="keyword">return</span> x, attention_weights</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Transformer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理 </tag>
            
            <tag> Transformer </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端命令及Colab白嫖必备</title>
      <link href="2020/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%8F%8AColab%E7%99%BD%E5%AB%96%E5%BF%85%E5%A4%87/"/>
      <url>2020/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E5%8F%8AColab%E7%99%BD%E5%AB%96%E5%BF%85%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="下载、解压命令（colab常用）："><a href="#下载、解压命令（colab常用）：" class="headerlink" title="下载、解压命令（colab常用）："></a>下载、解压命令（colab常用）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget + url</span><br><span class="line">unzip + filename</span><br></pre></td></tr></table></figure><h3 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ls----------------------显示当前文件夹所有文件</span><br><span class="line">ls -l ------------------显示当前文件夹所有文件及文件夹的详细信息(包含隐藏文件，就是文件名前带点的文件)</span><br><span class="line">pwd --------------------显示当前的path</span><br><span class="line">cd + path --------------表示到某一路径下</span><br><span class="line">cd …/ ------------------表示切换到上一层路径。</span><br><span class="line">sudo su ----------------改为root权限</span><br><span class="line">mkdir /data/path -------新增文件夹</span><br><span class="line">vim path ---------------查看某一文件</span><br><span class="line">：wq--------------------保存退出（查看或者修改某文件后）</span><br><span class="line">rm -rf path ------------删除path</span><br><span class="line">rm test.txt ------------删除test.txt</span><br><span class="line">control + c ------------退出当前对话</span><br><span class="line">cp &lt;文件&gt;&lt;目标文件&gt;或者----cp是copy 的缩写。用于复制文件或文件夹</span><br><span class="line">cp -r&lt;文件夹&gt;&lt;目标文件夹&gt;--cp是copy 的缩写。用于复制文件或文件夹</span><br><span class="line">touch test.txt----------创建一个文本文件</span><br><span class="line">用树结构查看文件夹</span><br><span class="line">先输入brew install tree 安装一个软件tree</span><br><span class="line">命令格式：tree 文件夹</span><br></pre></td></tr></table></figure><p><strong>树结构图：</strong><br><img src="https://img-blog.csdnimg.cn/20200410192110723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Colab-命令："><a href="#Colab-命令：" class="headerlink" title="Colab 命令："></a>Colab 命令：</h2><h3 id="初始化：（每次都需要）"><a href="#初始化：（每次都需要）" class="headerlink" title="初始化：（每次都需要）"></a>初始化：（每次都需要）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用GPU代码（必须）</span></span><br><span class="line">!pip install tensorflow-gpu==<span class="number">1.15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变工作文件夹----一定要到谷歌云盘中（必须，否则数据会丢失）</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"/content/drive/My Drive"</span></span><br><span class="line">os.chdir(path)</span><br><span class="line">os.listdir(path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#看一下GPU情况</span></span><br><span class="line">!nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="Colab不掉线："><a href="#Colab不掉线：" class="headerlink" title="Colab不掉线："></a>Colab不掉线：</h3><p>在Colab网页，右键检查，控制台console中输入一下代码回车，能够时不时点击页面，保证Colab不掉线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClickConnect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Working"</span>); </span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .querySelector(<span class="string">"#top-toolbar &gt; colab-connect-button"</span>)</span><br><span class="line">    .shadowRoot</span><br><span class="line">    .querySelector(<span class="string">"#connect"</span>)</span><br><span class="line">    .click()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">setInterval(ClickConnect,<span class="number">60000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> Mac </tag>
            
            <tag> Linux </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研经验总结</title>
      <link href="2020/04/09/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>2020/04/09/%E4%BF%9D%E7%A0%94%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="保研经验分享"><a href="#保研经验分享" class="headerlink" title="保研经验分享"></a>保研经验分享</h1><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1594314594872&di=8d703ca2046d484997db024f93d04388&imgtype=0&src=http%3A%2F%2Fimg.pconline.com.cn%2Fimages%2Fphotoblog%2F5%2F6%2F3%2F0%2F563061%2F20083%2F24%2F1206373412367.jpg"  style="zoom: 100%;" /></p><h2 id="个人背景："><a href="#个人背景：" class="headerlink" title="个人背景："></a>个人背景：</h2><p>​    本人武汉理工大学航海技术专业，专业绩点排名：3/230,保研综合排名：1/230，四级：545，六级：496，一作EI会议论文一篇，国家大学生创新项目负责人，武汉理工大学自主创新项目负责人，获得多年奖学金、华中赛等小奖。</p><p>参加面试的学校：上交海洋，浙大海洋，武大水利，武大信管</p><p>最终去向：<strong>武大信管情报学</strong></p><h2 id="保研前期准备："><a href="#保研前期准备：" class="headerlink" title="保研前期准备："></a>保研前期准备：</h2><p>​    面对2019年暑期的夏令营，早在寒假就开始搜集大量学校的信息，当时还不知道有类似保研通、保研岛这种保研信息平台，走了些弯路。<strong>寒假</strong>我做了几件事：</p><h3 id="1-简单梳理报名时间点："><a href="#1-简单梳理报名时间点：" class="headerlink" title="1.简单梳理报名时间点："></a>1.简单梳理报名时间点：</h3><p>​    将所要报夏令营学校的历年时间点大致梳理，比如像金融专业，有的学校的夏令营早在<strong>3、4月份</strong>就开始报名了，所以一定<strong>提前了解报名时间段</strong>，错过时间段这种低级错误千万不能犯，身边也确实有同学因为拖到最后一天报名，<strong>网崩了没报上</strong>的！</p><p>​    建议用表格排列好相关学校，因为夏令营竞争相对比较激烈，各路大神都出来秀肌肉，对于本科学校一般、排名一般、科研寥寥无几的同学可能会比较被动，学校如果报高了，会有被刷的风险，在不确定自己会不会被刷的情况下，一定得<strong>多报一些学校</strong>，同一档次的学校报几个，不要瞧不起某些学校，最后说不定就是你的保底学校要了你，每年情况都不一样，结果瞬息万变，不要一味的相信自己专业学长学姐的经验，我们宿舍当时都过分依赖去年学长的经验，下意识认为今年武大水利也会要三四个我们专业的，结果只要了俩，一切以<strong>稳</strong>为前提！！</p><table><thead><tr><th align="center">心仪学校</th><th align="center">学院网址</th><th align="center">时间点</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">武汉大学</td><td align="center">xxx</td><td align="center">6月</td><td align="center">xxx</td></tr><tr><td align="center">上海交大</td><td align="center">xxx</td><td align="center">7月</td><td align="center">xxx</td></tr></tbody></table><h3 id="2-完成一份得体的简历、个人陈述："><a href="#2-完成一份得体的简历、个人陈述：" class="headerlink" title="2.完成一份得体的简历、个人陈述："></a>2.完成一份得体的简历、个人陈述：</h3><p>​    一份得体的简历在面试过程中尤为重要，寒假时间较多，可以抽时间做好一份‘完美’的简历，我印象中，面试的老师有对我简历有表示满意的，有位老师事后基本上就看我的简历跟我对话，面试过程中也不会去详细的看你的材料。</p><p>​    简历不需要太浮夸，过于注重美观也没必要，但是一定要<strong>简洁、调理清晰！</strong> 当时我觉得自己找的那种什么模板大礼包之类的好丑好丑，幸亏女友给我了一个她用的，清新好看又五脏俱全！页数最多不超过两页，期初我做了两页，后来删了一页，感觉一页更加精华和简约，把一页纸尽量塞满你的大学成就，低含金量的就不要放上去了，比如一个院唱歌、拔河比赛之类的，尽量放和学习相关的内容，我的简历大致分为以下几个板块：</p><img src="https://pic2.zhimg.com/80/v2-665f964a29f7389edccee185683736dd_1440w.jpg" alt="简历" style="zoom: 33%;" /><p>简历中几个注意的点：</p><ol><li><p>登记照一定去好一点的照相馆照，一般也就不到100块吧，但是可以把你修的还阔以的！</p></li><li><p>基本信息中的<strong>邮箱地址</strong>，一定要用学校邮箱，这样显得更加正式，千万别用qq邮箱，后缀显得没有识别度，老师喜欢用xxx.edu.cn来识别你的学校，起码不会把你当成垃圾邮件忽略！</p></li><li><p>本科如果做了科研，可以在基本信息中加上本科研究方向，尽可能与你申请的学校相近！如果差别太大就别写了。</p></li><li><p>软件掌握情况，可以简要写几个<strong>硬实力</strong>一点的，office能不写就不写，论文排版方面，如果做过数学建模的同学，应该知道latex，有的老师面试时候特意问是不是用latex排的版，可能老师比较喜欢用吧，会用的可以写上去！编程等工科的软件就不用说了，会的越多越好！</p></li><li><p>论文、软著、专利这些学术成果尽量用引用的格式来写，这样一目了然，论文中把自己的名字突出即可！（仿照老师网上的论文展示）</p></li></ol><p><strong>总结一下</strong>：整份简历要尽量<strong>匹配</strong>你所报的学校方向和老师，突出对方想看到的信息（可以加红），所以不同学校简历侧重点一定有所不同，需要小改动，建议后期直接用pdf编辑器完成，对于小改动效率比较高！</p><p>​    个人陈述需要根据每个学校的要求来写，字数要求不一，通过查阅去年该学校学院的通知来获知，额，我的文采很差很差，很感谢我的女友，个人陈述写了初稿之后给了女友和阿姨帮忙修改，反复修改之后，一份满意的个人陈述就大功告成了，前期我也看过一些网上的，但是写的太差太差了，可能真正用心写的别人也不会放在网上吧，所以不要期望于把别人的拿过来改改就行，每个人的经历都是独一无二的，别人不能替代你的想法！自己用心好好写，好好改就好了！</p><h3 id="3-提前准备好相关证明材料："><a href="#3-提前准备好相关证明材料：" class="headerlink" title="3.提前准备好相关证明材料："></a>3.提前准备好相关证明材料：</h3><p>​    由于大三下学期会超级无敌忙，建议在寒假准备好相关的证明材料，把奖状、证书、前五个学期的排名、成绩单都准备好、开学直接去学院盖章就行了，不要拖到最后！！避免扎堆，每份证明做好pdf电子版本，后期每个学校都需要打印很多材料！</p><h3 id="4-主攻笔试、面试："><a href="#4-主攻笔试、面试：" class="headerlink" title="4.主攻笔试、面试："></a>4.主攻笔试、面试：</h3><p>​    通过了层层筛选，很荣幸你通过了学校初审，剩下的重中之重当当然是笔试和面试，但是如果真正等到暑假再准备，对于跨专业的同学来说就不太够了，如果准备跨专业，寒假就可以开始准备相关课程的学习了，同时一定得找到去年去了该校夏令营的学长学姐问清楚笔试面试的题目，这个很重要！我当时就是有学长给了我英语面试的题库，面试过程还算比较满意，只要做足了准备，就不会怕！</p><p>​    <strong>注意了！！</strong>有论文的同学，一定把自己写的论文弄熟练，虽然是自己写的，时间长了难免会忘记一些细节，有论文在面试过程中很占优势，去了几个学校能感觉到本科手握一两篇论文的相对比较少（顶尖学校顶尖专业除外）所以一定要把这个优势发挥好，能够和面试老师对答如流，其实有些老师真的不一定对你的研究很感兴趣，就是问问你的思路啊，其中某个模型的优劣？或者让你总体概括一下你的论文，武大水利曾有一位老师就是问我”<strong>你来几句话介绍一下你的论文，考察一下你的概括能力</strong>“</p><h2 id="夏令营和预推免的区别"><a href="#夏令营和预推免的区别" class="headerlink" title="夏令营和预推免的区别"></a>夏令营和预推免的区别</h2><p>​    夏令营的竞争压力要远大于九月的预推免，因为夏令营很多都是一个大佬报了N个学校，最后隔了N-1的，很多学校面临被割的风险，所以在九月预推免中还会在招一波，实质上两者是一样的，只是考核方式大多学校预推免简单一点。</p><p>​    不要以为夏令营他没要你，预推免就一定不会要你，很多时候学校他也怕被割，预推免需要招一波学生，又比如我们宿舍，夏令营时候看见北航交通A+学科很难进，结果九月我们宿舍不敢报，保研边缘的同学报了被顺利录取，这种案例还真不少，认得的双非的同学最后去的学校都很好，关键在于你敢不敢报！！很多时候不是学校不要你，是你压根没给他机会选你啊！</p><p>​    综上，对自己有个相对客观的定位后，尽可能多报一些学校，千万不要只报两三个学校，虽然报名过程很麻烦，但是挺一挺就过去了，身边当时嫌麻烦没报名的同学最后基本上都后悔了，保研就这一次，在有限时间内做出自己最优的决策，去到自己最理想的学校，学自己喜欢的专业，尽量不要给自己留下遗憾！</p>]]></content>
      
      
      <categories>
          
          <category> 升学就业 </category>
          
          <category> 保研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 保研 </tag>
            
            <tag> 经验 </tag>
            
            <tag> 升学，读研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装gensim踩坑</title>
      <link href="2020/04/08/Mac%E5%AE%89%E8%A3%85gensim%E8%B8%A9%E5%9D%91/"/>
      <url>2020/04/08/Mac%E5%AE%89%E8%A3%85gensim%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="mac环境pip-install-gensim报错"><a href="#mac环境pip-install-gensim报错" class="headerlink" title="mac环境pip install gensim报错"></a>mac环境pip install gensim报错</h1><p>用pip安装gensim包时，显示：<br>ERROR: Exception:<br>Traceback (most recent call last):</p><p>用了多种方式未果，采用镜像安装成功！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install   gensim  -i  https://pypi.doubanio.com/simple</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装cnpm踩坑</title>
      <link href="2020/04/08/mac%E5%AE%89%E8%A3%85cnpm%E8%B8%A9%E5%9D%91/"/>
      <url>2020/04/08/mac%E5%AE%89%E8%A3%85cnpm%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="mac安装cnpm报错"><a href="#mac安装cnpm报错" class="headerlink" title="mac安装cnpm报错"></a>mac安装cnpm报错</h1><p>错误如图：<br><img src="https://img-blog.csdnimg.cn/20200225104733764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>报错原因：npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules<br>此报错原因是由于没有权限，加上sudo即可解决！<br>sudo npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>大功告成：<br><img src="https://img-blog.csdnimg.cn/20200225104918642.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keras模型可视化利器</title>
      <link href="2020/04/08/keras%E6%A8%A1%E5%9E%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%A9%E5%99%A8/"/>
      <url>2020/04/08/keras%E6%A8%A1%E5%9E%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装graphviz"><a href="#安装graphviz" class="headerlink" title="安装graphviz"></a>安装graphviz</h2><p>使用Mac的brew安装即可，命令行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install graphviz</span><br></pre></td></tr></table></figure><h2 id="查看graphviz安装到的路径"><a href="#查看graphviz安装到的路径" class="headerlink" title="查看graphviz安装到的路径"></a>查看graphviz安装到的路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list graphviz</span><br></pre></td></tr></table></figure><p>出现下图：<br><img src="https://img-blog.csdnimg.cn/20200306094841115.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" /></p><h2 id="添加环境变量到路径"><a href="#添加环境变量到路径" class="headerlink" title="添加环境变量到路径"></a>添加环境变量到路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">"PATH"</span>] += os.pathsep + <span class="string">'/usr/local/Cellar/graphviz'</span></span><br></pre></td></tr></table></figure><h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><p>运行绘制模型plot_model代码之前，预先定义好一个model，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> keras.layers.embeddings <span class="keyword">import</span> Embedding </span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv1D, MaxPooling1D, Flatten, Dropout, Dense, Input, Lambda,BatchNormalization  </span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Embedding(<span class="number">100001</span>, <span class="number">300</span>, input_length=<span class="number">50</span>)) <span class="comment">#使用Embeeding层将每个词编码转换为词向量</span></span><br><span class="line">model.add(Conv1D(<span class="number">256</span>, <span class="number">5</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">model.add(MaxPooling1D(<span class="number">3</span>, <span class="number">3</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">model.add(Conv1D(<span class="number">128</span>, <span class="number">5</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">model.add(MaxPooling1D(<span class="number">3</span>, <span class="number">3</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">model.add(Conv1D(<span class="number">64</span>, <span class="number">3</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">model.add(Flatten())</span><br><span class="line">model.add(Dropout(<span class="number">0.1</span>))</span><br><span class="line">model.add(BatchNormalization())  <span class="comment"># (批)规范化层</span></span><br><span class="line">model.add(Dense(<span class="number">256</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dropout(<span class="number">0.1</span>))</span><br><span class="line">model.add(Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br></pre></td></tr></table></figure><p>绘制模型图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">import</span> pydot</span><br><span class="line">plot_model(model,to_file=<span class="string">'CNNmodel.png'</span>,show_shapes=<span class="literal">True</span>,show_layer_names=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200306095818107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" />此处再补充一个: model.summary函数，可以也可以输出图形结构:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.summary()</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200306095950441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 模型可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本处理中常见的Str/list转换</title>
      <link href="2020/04/08/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Str-list%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/04/08/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Str-list%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h1><p>在文本处理的nlp领域，经常需要将大量文本格式进行不断的转换进而达到模型输入的需求，每次转换我总在尝试，也觉得很费时间，但其实每次用到的函数大同小异，不希望经常做重复的工作，遂总结一些常见类型转换，方便以后随时调用。<br>常用的函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">split: </span><br><span class="line">str.split(str&#x3D;&quot;&quot;, num&#x3D;string.count(str))</span><br><span class="line">split() 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</span><br><span class="line">replace:</span><br><span class="line">replace(rgExp, replaceText, max)：可以替换任意指定的字符</span><br><span class="line">join:</span><br><span class="line">&quot;str&quot;.join(),连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串</span><br><span class="line">strip(str)：</span><br><span class="line">可以去除头尾指定字符，参数为空时，默认去除字符串中头尾的空格字符（常用来去掉读取txt后的换行符）</span><br></pre></td></tr></table></figure><h3 id="1-形式1：脱去一层list"><a href="#1-形式1：脱去一层list" class="headerlink" title="1.形式1：脱去一层list"></a>1.形式1：脱去一层list</h3><p><img src="https://img-blog.csdnimg.cn/20200229100525972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="">)<img src="https://img-blog.csdnimg.cn/20200229100713779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all_words2 = []</span><br><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> all_words:</span><br><span class="line">    all_words2.append(<span class="string">""</span>.join(sentence))</span><br><span class="line">print(all_words2)</span><br></pre></td></tr></table></figure><h3 id="2-形式2：将每个list里面的字符串合并成一个字符串（以适用onehot、tfidf向量的输入）"><a href="#2-形式2：将每个list里面的字符串合并成一个字符串（以适用onehot、tfidf向量的输入）" class="headerlink" title="2.形式2：将每个list里面的字符串合并成一个字符串（以适用onehot、tfidf向量的输入）"></a>2.形式2：将每个list里面的字符串合并成一个字符串（以适用onehot、tfidf向量的输入）</h3><img src="https://img-blog.csdnimg.cn/2020022910130235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" /><p><img src="https://img-blog.csdnimg.cn/20200229101846823.png#pic_center" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将list of list转换为list 以适合CountVectorizer函数的格式</span></span><br><span class="line">all_data_str = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(all_data)):</span><br><span class="line">    sentence= <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(all_data[i])): </span><br><span class="line">        word = all_data[i][j]</span><br><span class="line">        <span class="keyword">if</span> j&gt;<span class="number">0</span>:</span><br><span class="line">            sentence = sentence+<span class="string">' '</span>+word</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sentence = sentence + word</span><br><span class="line">    all_data_str.append(sentence)</span><br><span class="line">print(all_data_str[:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="3-复杂的形式：保存pd-DataFrame后，再读取有时候会出现"><a href="#3-复杂的形式：保存pd-DataFrame后，再读取有时候会出现" class="headerlink" title="3.复杂的形式：保存pd.DataFrame后，再读取有时候会出现"></a>3.复杂的形式：保存pd.DataFrame后，再读取有时候会出现</h3><p><img src="https://img-blog.csdnimg.cn/20200229102225968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200229100525972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200229100713779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>第一步转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">B = A[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">all_words = []</span><br><span class="line">sentence = <span class="string">""</span></span><br><span class="line">words=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(B)):</span><br><span class="line">    sentence = B[i].strip(<span class="string">"[]"</span>).replace(<span class="string">"\'"</span>,<span class="string">""</span>).replace(<span class="string">","</span>,<span class="string">""</span>).split(<span class="string">"\n"</span>)</span><br><span class="line">    cur_words = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sentence:       </span><br><span class="line">        cur_words.append(word)</span><br><span class="line">    all_words.append(cur_words)</span><br><span class="line">print(all_words)</span><br></pre></td></tr></table></figure><p>第二步转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all_words2 = []</span><br><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> all_words:</span><br><span class="line">    all_words2.append(<span class="string">""</span>.join(sentence))</span><br><span class="line">print(all_words2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 文本处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本处理 </tag>
            
            <tag> 预处理 </tag>
            
            <tag> 格式化文本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯理论</title>
      <link href="2020/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%90%86%E8%AE%BA/"/>
      <url>2020/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="（三）朴素贝叶斯"><a href="#（三）朴素贝叶斯" class="headerlink" title="（三）朴素贝叶斯"></a>（三）朴素贝叶斯</h1><h2 id="定义-："><a href="#定义-：" class="headerlink" title="定义 ："></a>定义 ：</h2><p>朴素贝叶斯是基于贝叶斯定理和特征条件独立假设的分类方法。<br>首先学习输入/输出的联合概率分布,然后基于此模型,对给定的输入$x$,利用贝叶斯定理求出后验概率最大的输出$y$。<br></p><p>模型:<br>首先学习<strong>先验概率</strong>分布：$P(Y=c_k),k=1,2,…,K$ ,  $c_k$代表某一类，也就是计算该类别的概率（在样本中我们已知）<br>然后学习条件概率分布：$P(X=x|Y=c_k)=P(X^{1}=x^{1},…,X^{n}=x^{n}|Y=c_k)$，给定一个类别$c_k$，计算该样本各个特征的概率,比如该样本第一个特征为<br>朴素贝叶斯法对条件概率分布作了<strong>条件独立性</strong>的假设：$$P(X^{(1)}=x^{(1)}|Y=c_k)P(X^{(2)}=x^{(2)}|Y=c_k)…P(X^{(j)}=x^{(j)}|Y=c_k)$$<br>上式变成:$$\prod_{j=1}^{n}P(X^{(j)}=x^{(j)}|Y=c_k)$$<br>在分类时,通过学习到的模型计算后验概率分布,由贝叶斯定理得到:<br>$$P(Y=c_k|X=x)=\frac{P(X=x|Y=c_k)P(Y=c_k)}{\sum_{k}P(X=x|Y=c_k)P(Y=c_k)}$$<br>将条件独立性假设得到的等式代入,并且注意到分母都是相同的,所以得到朴素贝叶斯分类器:<br>$$y=argmax_{c_k}P(Y=c_k)\prod_{j=1}P(X^{(j)}=x^{(j)}|Y=c_k)$$</p><p>算法:使用<strong>极大似然估计法</strong>估计相应的先验概率率:$$P(Y=c_k)=\frac{\sum_{i=1}^{N}I(y_i=c_k)}{N},k=1,2,…,K$$<br>以及条件概率：<br>$$P(X^{(j)}=a_{jl}|Y=c_k)=\frac{\sum_{i=1}^{N}I(x_{i}^{(j)}=a_{jl},y_i=c_k)}{\sum_{i=1}^{N}I(y_{i}=c_k)}$$<br>计算条件独立性假设下的实例各个取值的可能性,选取其中的最大值作为输出。</p><p>使用贝叶斯估计虽然保证了所有连乘项的概率都大于0，不会再出现某一项为0结果为0的情况。但若一个样本数据时高维的，比如说100维（100其实并不高），连乘项都是0-1之间的，那100个0-1之间的数相乘，最后的数一定是非常非常小了，可能无限接近于0。对于程序而言过于接近0的数可能会造成下<strong>溢出</strong>，也就是精度不够表达了。所以我们会给整个连乘项<strong>取对数</strong>，这样哪怕所有连乘最后结果无限接近0，那取完log以后数也会变得很大（虽然是负的很大），计算机就可以表示了。同样，多项连乘取对数，对数的连乘可以表示成对数的相加，在计算上也简便了。所以在实际运用中，不光需要使用贝叶斯估计（保证概率不为0），同时也要取对数（保证连乘结果不下溢出）。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p><a href="https://www.pkudodo.com" target="_blank" rel="noopener">参考代码:</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># Author:Dodo</span></span><br><span class="line"><span class="comment"># Date:2018-11-17</span></span><br><span class="line"><span class="comment"># Email:lvtengchao@pku.edu.cn</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据集：Mnist</span></span><br><span class="line"><span class="string">训练集数量：60000</span></span><br><span class="line"><span class="string">测试集数量：10000</span></span><br><span class="line"><span class="string">------------------------------</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">    正确率：84.3%</span></span><br><span class="line"><span class="string">    运行时长：103s</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载文件</span></span><br><span class="line"><span class="string">    :param fileName:要加载的文件路径</span></span><br><span class="line"><span class="string">    :return: 数据集和标签集</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#存放数据及标记</span></span><br><span class="line">    dataArr = []; labelArr = []</span><br><span class="line">    <span class="comment">#读取文件</span></span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="comment">#遍历文件中的每一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        <span class="comment">#获取当前行，并按“，”切割成字段放入列表中</span></span><br><span class="line">        <span class="comment">#strip：去掉每行字符串首尾指定的字符（默认空格或换行符）</span></span><br><span class="line">        <span class="comment">#split：按照指定的字符将字符串切割成每个字段，返回列表形式</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment">#将每行中除标记外的数据放入数据集中（curLine[0]为标记信息）</span></span><br><span class="line">        <span class="comment">#在放入的同时将原先字符串形式的数据转换为整型</span></span><br><span class="line">        <span class="comment">#此外将数据进行了二值化处理，大于128的转换成1，小于的转换成0，方便后续计算</span></span><br><span class="line">        dataArr.append([int(int(num) &gt; <span class="number">128</span>) <span class="keyword">for</span> num <span class="keyword">in</span> curLine[<span class="number">1</span>:]])</span><br><span class="line">        <span class="comment">#将标记信息放入标记集中</span></span><br><span class="line">        <span class="comment">#放入的同时将标记转换为整型</span></span><br><span class="line">        labelArr.append(int(curLine[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#返回数据集和标记</span></span><br><span class="line">    <span class="keyword">return</span> dataArr, labelArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NaiveBayes</span><span class="params">(Py, Px_y, x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    通过朴素贝叶斯进行概率估计</span></span><br><span class="line"><span class="string">    :param Py: 先验概率分布</span></span><br><span class="line"><span class="string">    :param Px_y: 条件概率分布</span></span><br><span class="line"><span class="string">    :param x: 要估计的样本x</span></span><br><span class="line"><span class="string">    :return: 返回所有label的估计概率</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#设置特征数目</span></span><br><span class="line">    featrueNum = <span class="number">784</span></span><br><span class="line">    <span class="comment">#设置类别数目</span></span><br><span class="line">    classNum = <span class="number">10</span></span><br><span class="line">    <span class="comment">#建立存放所有标记的估计概率数组</span></span><br><span class="line">    P = [<span class="number">0</span>] * classNum</span><br><span class="line">    <span class="comment">#对于每一个类别，单独估计其概率</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(classNum):</span><br><span class="line">        <span class="comment">#初始化sum为0，sum为求和项。</span></span><br><span class="line">        <span class="comment">#在训练过程中对概率进行了log处理，所以这里原先应当是连乘所有概率，最后比较哪个概率最大</span></span><br><span class="line">        <span class="comment">#但是当使用log处理时，连乘变成了累加，所以使用sum</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="comment">#获取每一个条件概率值，进行累加</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(featrueNum):</span><br><span class="line">            sum += Px_y[i][j][x[j]]</span><br><span class="line">        <span class="comment">#最后再和先验概率相加（也就是式4.7中的先验概率乘以后头那些东西，乘法因为log全变成了加法）</span></span><br><span class="line">        P[i] = sum + Py[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#max(P)：找到概率最大值</span></span><br><span class="line">    <span class="comment">#P.index(max(P))：找到该概率最大值对应的所有（索引值和标签值相等）</span></span><br><span class="line">    <span class="keyword">return</span> P.index(max(P))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(Py, Px_y, testDataArr, testLabelArr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    对测试集进行测试</span></span><br><span class="line"><span class="string">    :param Py: 先验概率分布</span></span><br><span class="line"><span class="string">    :param Px_y: 条件概率分布</span></span><br><span class="line"><span class="string">    :param testDataArr: 测试集数据</span></span><br><span class="line"><span class="string">    :param testLabelArr: 测试集标记</span></span><br><span class="line"><span class="string">    :return: 准确率</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#错误值计数</span></span><br><span class="line">    errorCnt = <span class="number">0</span></span><br><span class="line">    <span class="comment">#循环遍历测试集中的每一个样本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(testDataArr)):</span><br><span class="line">        <span class="comment">#获取预测值</span></span><br><span class="line">        presict = NaiveBayes(Py, Px_y, testDataArr[i])</span><br><span class="line">        <span class="comment">#与答案进行比较</span></span><br><span class="line">        <span class="keyword">if</span> presict != testLabelArr[i]:</span><br><span class="line">            <span class="comment">#若错误  错误值计数加1</span></span><br><span class="line">            errorCnt += <span class="number">1</span></span><br><span class="line">    <span class="comment">#返回准确率</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - (errorCnt / len(testDataArr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllProbability</span><span class="params">(trainDataArr, trainLabelArr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    通过训练集计算先验概率分布和条件概率分布</span></span><br><span class="line"><span class="string">    :param trainDataArr: 训练数据集</span></span><br><span class="line"><span class="string">    :param trainLabelArr: 训练标记集</span></span><br><span class="line"><span class="string">    :return: 先验概率分布和条件概率分布</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#设置样本特诊数目，数据集中手写图片为28*28，转换为向量是784维。</span></span><br><span class="line">    <span class="comment"># （我们的数据集已经从图像转换成784维的形式了，CSV格式内就是）</span></span><br><span class="line">    featureNum = <span class="number">784</span></span><br><span class="line">    <span class="comment">#设置类别数目，0-9共十个类别</span></span><br><span class="line">    classNum = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化先验概率分布存放数组，后续计算得到的P(Y = 0)放在Py[0]中，以此类推</span></span><br><span class="line">    <span class="comment">#数据长度为10行1列</span></span><br><span class="line">    Py = np.zeros((classNum, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">#对每个类别进行一次循环，分别计算它们的先验概率分布</span></span><br><span class="line">    <span class="comment">#计算公式为书中"4.2节 朴素贝叶斯法的参数估计 公式4.8"</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(classNum):</span><br><span class="line">        <span class="comment">#下方式子拆开分析</span></span><br><span class="line">        <span class="comment">#np.mat(trainLabelArr) == i：将标签转换为矩阵形式，里面的每一位与i比较，若相等，该位变为Ture，反之False</span></span><br><span class="line">        <span class="comment">#np.sum(np.mat(trainLabelArr) == i):计算上一步得到的矩阵中Ture的个数，进行求和(直观上就是找所有label中有多少个</span></span><br><span class="line">        <span class="comment">#为i的标记，求得4.8式P（Y = Ck）中的分子)</span></span><br><span class="line">        <span class="comment">#np.sum(np.mat(trainLabelArr) == i)) + 1：参考“4.2.3节 贝叶斯估计”，例如若数据集总不存在y=1的标记，也就是说</span></span><br><span class="line">        <span class="comment">#手写数据集中没有1这张图，那么如果不加1，由于没有y=1，所以分子就会变成0，那么在最后求后验概率时这一项就变成了0，再</span></span><br><span class="line">        <span class="comment">#和条件概率乘，结果同样为0，不允许存在这种情况，所以分子加1，分母加上K（K为标签可取的值数量，这里有10个数，取值为10）</span></span><br><span class="line">        <span class="comment">#参考公式4.11</span></span><br><span class="line">        <span class="comment">#(len(trainLabelArr) + 10)：标签集的总长度+10.</span></span><br><span class="line">        <span class="comment">#((np.sum(np.mat(trainLabelArr) == i)) + 1) / (len(trainLabelArr) + 10)：最后求得的先验概率</span></span><br><span class="line">        Py[i] = ((np.sum(np.mat(trainLabelArr) == i)) + <span class="number">1</span>) / (len(trainLabelArr) + <span class="number">10</span>)</span><br><span class="line">    <span class="comment">#转换为log对数形式</span></span><br><span class="line">    <span class="comment">#log书中没有写到，但是实际中需要考虑到，原因是这样：</span></span><br><span class="line">    <span class="comment">#最后求后验概率估计的时候，形式是各项的相乘（“4.1 朴素贝叶斯法的学习” 式4.7），这里存在两个问题：1.某一项为0时，结果为0.</span></span><br><span class="line">    <span class="comment">#这个问题通过分子和分母加上一个相应的数可以排除，前面已经做好了处理。2.如果特诊特别多（例如在这里，需要连乘的项目有784个特征</span></span><br><span class="line">    <span class="comment">#加一个先验概率分布一共795项相乘，所有数都是0-1之间，结果一定是一个很小的接近0的数。）理论上可以通过结果的大小值判断， 但在</span></span><br><span class="line">    <span class="comment">#程序运行中很可能会向下溢出无法比较，因为值太小了。所以人为把值进行log处理。log在定义域内是一个递增函数，也就是说log（x）中，</span></span><br><span class="line">    <span class="comment">#x越大，log也就越大，单调性和原数据保持一致。所以加上log对结果没有影响。此外连乘项通过log以后，可以变成各项累加，简化了计算。</span></span><br><span class="line">    <span class="comment">#在似然函数中通常会使用log的方式进行处理</span></span><br><span class="line">    Py = np.log(Py)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算条件概率 Px_y=P（X=x|Y = y）</span></span><br><span class="line">    <span class="comment">#计算条件概率分成了两个步骤，下方第一个大for循环用于累加，参考书中“4.2.3 贝叶斯估计 式4.10”，下方第一个大for循环内部是</span></span><br><span class="line">    <span class="comment">#用于计算式4.10的分子，至于分子的+1以及分母的计算在下方第二个大For内</span></span><br><span class="line">    <span class="comment">#初始化为全0矩阵，用于存放所有情况下的条件概率</span></span><br><span class="line">    Px_y = np.zeros((classNum, featureNum, <span class="number">2</span>))</span><br><span class="line">    <span class="comment">#对标记集进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(trainLabelArr)):</span><br><span class="line">        <span class="comment">#获取当前循环所使用的标记</span></span><br><span class="line">        label = trainLabelArr[i]</span><br><span class="line">        <span class="comment">#获取当前要处理的样本</span></span><br><span class="line">        x = trainDataArr[i]</span><br><span class="line">        <span class="comment">#对该样本的每一维特诊进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(featureNum):</span><br><span class="line">            <span class="comment">#在矩阵中对应位置加1</span></span><br><span class="line">            <span class="comment">#这里还没有计算条件概率，先把所有数累加，全加完以后，在后续步骤中再求对应的条件概率</span></span><br><span class="line">            Px_y[label][j][x[j]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#第二个大for，计算式4.10的分母，以及分子和分母之间的除法</span></span><br><span class="line">    <span class="comment">#循环每一个标记（共10个）</span></span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> range(classNum):</span><br><span class="line">        <span class="comment">#循环每一个标记对应的每一个特征</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(featureNum):</span><br><span class="line">            <span class="comment">#获取y=label，第j个特诊为0的个数</span></span><br><span class="line">            Px_y0 = Px_y[label][j][<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#获取y=label，第j个特诊为1的个数</span></span><br><span class="line">            Px_y1 = Px_y[label][j][<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#对式4.10的分子和分母进行相除，再除之前依据贝叶斯估计，分母需要加上2（为每个特征可取值个数）</span></span><br><span class="line">            <span class="comment">#分别计算对于y= label，x第j个特征为0和1的条件概率分布</span></span><br><span class="line">            Px_y[label][j][<span class="number">0</span>] = np.log((Px_y0 + <span class="number">1</span>) / (Px_y0 + Px_y1 + <span class="number">2</span>))</span><br><span class="line">            Px_y[label][j][<span class="number">1</span>] = np.log((Px_y1 + <span class="number">1</span>) / (Px_y0 + Px_y1 + <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回先验概率分布和条件概率分布</span></span><br><span class="line">    <span class="keyword">return</span> Py, Px_y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># 获取训练集</span></span><br><span class="line">    print(<span class="string">'start read transSet'</span>)</span><br><span class="line">    trainDataArr, trainLabelArr = loadData(<span class="string">'../Mnist/mnist_train.csv'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取测试集</span></span><br><span class="line">    print(<span class="string">'start read testSet'</span>)</span><br><span class="line">    testDataArr, testLabelArr = loadData(<span class="string">'../Mnist/mnist_test.csv'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始训练，学习先验概率分布和条件概率分布</span></span><br><span class="line">    print(<span class="string">'start to train'</span>)</span><br><span class="line">    Py, Px_y = getAllProbability(trainDataArr, trainLabelArr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用习得的先验概率分布和条件概率分布对测试集进行测试</span></span><br><span class="line">    print(<span class="string">'start to test'</span>)</span><br><span class="line">    accuracy = test(Py, Px_y, testDataArr, testLabelArr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打印准确率</span></span><br><span class="line">    print(<span class="string">'the accuracy is:'</span>, accuracy)</span><br><span class="line">    <span class="comment">#打印时间</span></span><br><span class="line">    print(<span class="string">'time span:'</span>, time.time() -start)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 朴素贝叶斯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 朴素贝叶斯 </tag>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="2020/04/07/React/"/>
      <url>2020/04/07/React/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="2020/04/07/python/"/>
      <url>2020/04/07/python/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提升效率集锦</title>
      <link href="2020/02/08/%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>2020/02/08/%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac提升效率软件"><a href="#Mac提升效率软件" class="headerlink" title="Mac提升效率软件"></a>Mac提升效率软件</h2><h3 id="1-Alfred"><a href="#1-Alfred" class="headerlink" title="1.Alfred"></a>1.Alfred</h3><p>无论在mac上还是win上，在提升效率这一领域，永远是不断的追寻制高点，从win转mac也有将近半年之久了，谈起”如何提高效率“，无疑是我平时休闲之余最爱的关注点，例如像win上的everything：它将我的电脑中的所有文件存为字典以便秒速访问，类似于Mac上的Alfred，设定快捷方式：option+空格来唤醒，找文件：find+文件名；使用搜索功能可以用默认，也可以自定义：比如我自定义了：zh+内容（跳转知乎搜索）；db+内容（豆瓣搜索）…，大大提升了切换页面浏览器的效率！<br><img src="https://img-blog.csdnimg.cn/20200408154437692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><br><img src="https://img-blog.csdnimg.cn/20200408154556965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><br>这还不是最强的，work flow功能可以嵌入自定义脚本，脚本可以去github上找，我最喜欢用的是：OCR功能，工作流：先截图（存到了剪切板）—》调出Alfred，输出OCR，将图片转化为文字返回到剪切板，速度大概在2秒左右：（教程直接百度有，但是其中要去百度OCR申请key，不麻烦）<br><img src="https://img-blog.csdnimg.cn/20200408154826135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><br>当然，还可以当做计算器，偶尔用一下：<br><img src="https://img-blog.csdnimg.cn/20200408155105607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><h3 id="2-Paste"><a href="#2-Paste" class="headerlink" title="2.Paste"></a>2.Paste</h3><p>强推这个复制粘贴板，简单来说就是将近期复制粘贴的内容存在一块板上，可以访问历史，我平时用的非常多！command+shift+v调出剪切板<img src="https://img-blog.csdnimg.cn/20200408155300597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="3-截图软件：Snipaste-amp-Xnip"><a href="#3-截图软件：Snipaste-amp-Xnip" class="headerlink" title="3.截图软件：Snipaste &amp; Xnip"></a>3.截图软件：Snipaste &amp; Xnip</h3><p>下载Xnip完全是因为它可以截长图；Snipaste我从win一直用到mac，用到的最多功能就是贴图：可以将任意截图贴在屏幕上、到剪切板上、保存图片。（码代码+写论文必备）</p><p><img src="https://img-blog.csdnimg.cn/20200408155638201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="4-快捷键一览表cheatsheet"><a href="#4-快捷键一览表cheatsheet" class="headerlink" title="4.快捷键一览表cheatsheet"></a>4.快捷键一览表cheatsheet</h3><p>一个command键调出任何软件全部的快捷键，不多说，喜欢快捷键的必备！</p><h3 id="5-思维导图Xmind-Zen"><a href="#5-思维导图Xmind-Zen" class="headerlink" title="5.思维导图Xmind Zen"></a>5.思维导图Xmind Zen</h3><p>有很多高质量的模板，也适合做知识点的梳理！<br><img src="https://img-blog.csdnimg.cn/20200408160556881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /><br><img src="https://img-blog.csdnimg.cn/202004081607343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" style="zoom:50%;" /></p><h3 id="6-Mactex：论文排版必备"><a href="#6-Mactex：论文排版必备" class="headerlink" title="6.Mactex：论文排版必备"></a>6.Mactex：论文排版必备</h3><p>就是win中的Latex，安装教程稍微有点复杂，主要在配环境上，我的另外一篇博客已经有详细教程<a href="https://blog.csdn.net/popofzk/article/details/103447119" target="_blank" rel="noopener">传送门</a><br><img src="https://img-blog.csdnimg.cn/20191208193437645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="7-Omnifocus：时间管理软件"><a href="#7-Omnifocus：时间管理软件" class="headerlink" title="7.Omnifocus：时间管理软件"></a>7.Omnifocus：时间管理软件</h3><p>管理时间的重要性不多说，虽然我依然做的不够好，但是还是要规划好时间!<br><img src="https://img-blog.csdnimg.cn/20200408161747675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="8-Chrome浏览器：重在插件！"><a href="#8-Chrome浏览器：重在插件！" class="headerlink" title="8.Chrome浏览器：重在插件！"></a>8.Chrome浏览器：重在插件！</h3><p><strong>谷歌学术插件：</strong><br><img src="https://img-blog.csdnimg.cn/20200408162043415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>消除广告插件：<strong>Adblock plus</strong><br>最好用的插件：<strong>暴力猴</strong>：支持js脚本扩展，很多脚本多特定网页做了优化!<br>比如：豆瓣电影：相应脚本会在右边显示可供观看的资源<br><img src="https://img-blog.csdnimg.cn/20200408162345553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>再比如SCI-hub，去谷歌搜论文时，SCi-hub脚本插件可以识别出论文doi，直接跳转下载pdf：<br>即使右侧没有pdf，也能通过doi，转到sci-hub网页下载，实现英文论文全覆盖<br><img src="https://img-blog.csdnimg.cn/20200408162513139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br><strong>Onetab插件：</strong><br>页面多了后，一键汇总，将全部网页显示在一个页面上<br><img src="https://img-blog.csdnimg.cn/20200408162824506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>The Great Suspender 插件：将长时间没观看的网页从内存中关掉，当你想看的时候再次唤醒即可，可以大大减小内存消耗！<br><img src="https://img-blog.csdnimg.cn/2020040816301262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="9-Mathphix：公式OCR必备"><a href="#9-Mathphix：公式OCR必备" class="headerlink" title="9.Mathphix：公式OCR必备"></a>9.Mathphix：公式OCR必备</h3><p>不多说，知道就是赚到，不用手敲公式了，直接截图调入OCR识别出Latex格式的公式，如果想放进word：先粘贴到mathtype软件，再粘贴到word；如果用Latex，就直接粘贴到Latex即可！每个月限制50次，如果超了，再换个邮箱即可，谁还没几个邮箱啊！<br><img src="https://img-blog.csdnimg.cn/20200408163301561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="10-调用远端服务器必备：Royal-Tsx-amp-FileZilla"><a href="#10-调用远端服务器必备：Royal-Tsx-amp-FileZilla" class="headerlink" title="10.调用远端服务器必备：Royal Tsx &amp; FileZilla"></a>10.调用远端服务器必备：Royal Tsx &amp; FileZilla</h3><p>Royal TSX类似于Xshell，不多说！ FileZilla传文件非常快，和自身网速相当，传文件到远端很方便！<img src="https://img-blog.csdnimg.cn/20200408164500393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200408164411811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 提升效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 学术 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用TextCNN对IMDB做文本分类任务</title>
      <link href="2020/02/01/%E5%88%A9%E7%94%A8TextCNN%E5%AF%B9Cnews%E5%81%9A%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/"/>
      <url>2020/02/01/%E5%88%A9%E7%94%A8TextCNN%E5%AF%B9Cnews%E5%81%9A%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>参考博客：</p><p><a href="https://blog.csdn.net/weixin_44766179/article/details/90286846?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158373686819724845042300%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&request_id=158373686819724845042300&biz_id=0&utm_source=distribute.pc_search_result.none-task" target="_blank" rel="noopener">imdb预处理</a></p><p><a href="https://blog.csdn.net/asialee_bird/article/details/88813385#1%E3%80%81%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86" target="_blank" rel="noopener">TextCNN模型</a></p><h3 id="1-下载kaggle数据集-并进行文本预处理："><a href="#1-下载kaggle数据集-并进行文本预处理：" class="headerlink" title="1.下载kaggle数据集,并进行文本预处理："></a>1.下载kaggle数据集,并进行文本预处理：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相应的包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> nltk.stem <span class="keyword">import</span> WordNetLemmatizer</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.sequence <span class="keyword">import</span> pad_sequences</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, LSTM, Embedding, Dropout, Conv1D, MaxPooling1D, Bidirectional</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#　读取数据</span></span><br><span class="line">df1 = pd.read_csv(<span class="string">'word2vec-nlp-tutorial/labeledTrainData.tsv'</span>, sep=<span class="string">'\t'</span>, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line">df2 = pd.read_csv(<span class="string">'word2vec-nlp-tutorial/imdb_master.csv'</span>, encoding=<span class="string">"latin-1"</span>)</span><br><span class="line">df3 = pd.read_csv(<span class="string">'word2vec-nlp-tutorial/testData.tsv'</span>, sep=<span class="string">'\t'</span>, error_bad_lines=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">df2 = df2.drop([<span class="string">'Unnamed: 0'</span>,<span class="string">'type'</span>,<span class="string">'file'</span>],axis=<span class="number">1</span>)</span><br><span class="line">df2.columns = [<span class="string">"review"</span>,<span class="string">"sentiment"</span>]</span><br><span class="line">df2 = df2[df2.sentiment != <span class="string">'unsup'</span>]</span><br><span class="line">df2[<span class="string">'sentiment'</span>] = df2[<span class="string">'sentiment'</span>].map(&#123;<span class="string">'pos'</span>: <span class="number">1</span>, <span class="string">'neg'</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并数据</span></span><br><span class="line">df = pd.concat([df1, df2]).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_texts = df.review</span><br><span class="line">train_labels = df.sentiment</span><br><span class="line">test_texts = df3.review</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英文缩写替换</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_abbreviations</span><span class="params">(text)</span>:</span></span><br><span class="line">    texts = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text:</span><br><span class="line">        item = item.lower().replace(<span class="string">"it's"</span>, <span class="string">"it is"</span>).replace(<span class="string">"i'm"</span>, <span class="string">"i am"</span>).replace(<span class="string">"he's"</span>, <span class="string">"he is"</span>).replace(<span class="string">"she's"</span>, <span class="string">"she is"</span>)\</span><br><span class="line">            .replace(<span class="string">"we're"</span>, <span class="string">"we are"</span>).replace(<span class="string">"they're"</span>, <span class="string">"they are"</span>).replace(<span class="string">"you're"</span>, <span class="string">"you are"</span>).replace(<span class="string">"that's"</span>, <span class="string">"that is"</span>)\</span><br><span class="line">            .replace(<span class="string">"this's"</span>, <span class="string">"this is"</span>).replace(<span class="string">"can't"</span>, <span class="string">"can not"</span>).replace(<span class="string">"don't"</span>, <span class="string">"do not"</span>).replace(<span class="string">"doesn't"</span>, <span class="string">"does not"</span>)\</span><br><span class="line">            .replace(<span class="string">"we've"</span>, <span class="string">"we have"</span>).replace(<span class="string">"i've"</span>, <span class="string">" i have"</span>).replace(<span class="string">"isn't"</span>, <span class="string">"is not"</span>).replace(<span class="string">"won't"</span>, <span class="string">"will not"</span>)\</span><br><span class="line">            .replace(<span class="string">"hasn't"</span>, <span class="string">"has not"</span>).replace(<span class="string">"wasn't"</span>, <span class="string">"was not"</span>).replace(<span class="string">"weren't"</span>, <span class="string">"were not"</span>).replace(<span class="string">"let's"</span>, <span class="string">"let us"</span>)\</span><br><span class="line">            .replace(<span class="string">"didn't"</span>, <span class="string">"did not"</span>).replace(<span class="string">"hadn't"</span>, <span class="string">"had not"</span>).replace(<span class="string">"waht's"</span>, <span class="string">"what is"</span>).replace(<span class="string">"couldn't"</span>, <span class="string">"could not"</span>)\</span><br><span class="line">            .replace(<span class="string">"you'll"</span>, <span class="string">"you will"</span>).replace(<span class="string">"you've"</span>, <span class="string">"you have"</span>)</span><br><span class="line">    </span><br><span class="line">        item = item.replace(<span class="string">"'s"</span>, <span class="string">""</span>)</span><br><span class="line">        texts.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> texts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标点符号及其它字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_review</span><span class="params">(text)</span>:</span></span><br><span class="line">    texts = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text:</span><br><span class="line">        item = item.replace(<span class="string">"&lt;br /&gt;&lt;br /&gt;"</span>, <span class="string">""</span>)</span><br><span class="line">        item = re.sub(<span class="string">"[^a-zA-Z]"</span>, <span class="string">" "</span>, item.lower())</span><br><span class="line">        texts.append(<span class="string">" "</span>.join(item.split()))</span><br><span class="line">    <span class="keyword">return</span> texts</span><br><span class="line"></span><br><span class="line"><span class="comment"># ＃　删除停用词　＋　词形还原</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stemed_words</span><span class="params">(text)</span>:</span></span><br><span class="line">    stop_words = stopwords.words(<span class="string">"english"</span>)</span><br><span class="line">    lemma = WordNetLemmatizer()</span><br><span class="line">    texts = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> text:</span><br><span class="line">        words = [lemma.lemmatize(w, pos=<span class="string">'v'</span>) <span class="keyword">for</span> w <span class="keyword">in</span> item.split() <span class="keyword">if</span> w <span class="keyword">not</span> <span class="keyword">in</span> stop_words]</span><br><span class="line">        texts.append(<span class="string">" "</span>.join(words))</span><br><span class="line">    <span class="keyword">return</span> texts</span><br><span class="line">            </span><br><span class="line"><span class="comment"># ＃　文本预处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(text)</span>:</span></span><br><span class="line">    text = replace_abbreviations(text)</span><br><span class="line">    text = clear_review(text)</span><br><span class="line">    text = stemed_words(text)    </span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">  </span><br><span class="line">train_texts = preprocess(train_texts)</span><br><span class="line">test_texts = preprocess(test_texts)</span><br></pre></td></tr></table></figure><h3 id="2-token编码、padding操作、切分数据集"><a href="#2-token编码、padding操作、切分数据集" class="headerlink" title="2.token编码、padding操作、切分数据集"></a>2.token编码、padding操作、切分数据集</h3><p>也就是建立onehot向量，这里只取频率排行前6000个单词构建词典，令max_features = 6000; 然后将每个样本（句子）定为长度130（不够长补0，多余截断）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">max_features = <span class="number">6000</span></span><br><span class="line">texts = train_texts + test_texts</span><br><span class="line"><span class="comment"># 转换为onehot向量，num_words：保留词频前max_features的词汇，其他词删去。仅num_words-1保留最常用的词。</span></span><br><span class="line">tok = Tokenizer(num_words=max_features)</span><br><span class="line">tok.fit_on_texts(texts)</span><br><span class="line">vocab = tok.word_index</span><br><span class="line"><span class="comment"># 将文本按照词典编号的方式进行编码</span></span><br><span class="line">list_tok = tok.texts_to_sequences(texts)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对每个样本最大长度做限制，定为130，其余补0</span></span><br><span class="line">maxlen = <span class="number">130</span></span><br><span class="line">seq_tok = pad_sequences(list_tok, maxlen=maxlen)</span><br><span class="line"></span><br><span class="line">x_train = seq_tok[:len(train_texts)]  <span class="comment">#只取到train_texts的样本</span></span><br><span class="line">y_train = train_labels</span><br><span class="line"></span><br><span class="line">embed_size = <span class="number">128</span> <span class="comment">#此为通过embedding矩阵乘法，我们想让一个样本（句子）中每个单词压缩成的向量维度</span></span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x_train,y_train) <span class="comment">#切分训练、测试集</span></span><br></pre></td></tr></table></figure><p>3.整理好数据后，采用TensorFlow中的CNN模型或者TextCNN模型进行训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> jieba </span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers.merge <span class="keyword">import</span> concatenate </span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> to_categorical </span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer </span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.sequence <span class="keyword">import</span> pad_sequences </span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> keras.layers.embeddings <span class="keyword">import</span> Embedding </span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Conv1D, MaxPooling1D, Flatten, Dropout, Dense, Input, Lambda,BatchNormalization </span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, f1_score </span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Model</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#构建TextCNN模型</span></span><br><span class="line"><span class="comment">#模型结构：词嵌入-卷积池化*3-拼接-全连接-dropout-全连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TextCNN_model_1</span><span class="params">(x_train_padded_seqs,y_train,x_test_padded_seqs,y_test)</span>:</span></span><br><span class="line">    main_input = Input(shape=(<span class="number">130</span>,), dtype=<span class="string">'float64'</span>)</span><br><span class="line">    <span class="comment"># 词嵌入（使用预训练的词向量）</span></span><br><span class="line">    embedder = Embedding(len(vocab) + <span class="number">1</span>, <span class="number">300</span>, input_length=<span class="number">130</span>, trainable=<span class="literal">False</span>)</span><br><span class="line">    embed = embedder(main_input)</span><br><span class="line">    <span class="comment"># 词窗大小分别为3,4,5</span></span><br><span class="line">    cnn1 = Conv1D(<span class="number">256</span>, <span class="number">3</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">    cnn1 = MaxPooling1D(pool_size=<span class="number">128</span>)(cnn1)</span><br><span class="line">    cnn2 = Conv1D(<span class="number">256</span>, <span class="number">4</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">    cnn2 = MaxPooling1D(pool_size=<span class="number">127</span>)(cnn2)</span><br><span class="line">    cnn3 = Conv1D(<span class="number">256</span>, <span class="number">5</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">    cnn3 = MaxPooling1D(pool_size=<span class="number">126</span>)(cnn3)</span><br><span class="line">    <span class="comment"># 合并三个模型的输出向量</span></span><br><span class="line">    cnn = concatenate([cnn1, cnn2, cnn3], axis=<span class="number">-1</span>)</span><br><span class="line">    flat = Flatten()(cnn)</span><br><span class="line">    drop = Dropout(<span class="number">0.2</span>)(flat)</span><br><span class="line">    main_output = Dense(<span class="number">2</span>, activation=<span class="string">'softmax'</span>)(drop)</span><br><span class="line">    model = Model(inputs=main_input, outputs=main_output)</span><br><span class="line">    model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"> </span><br><span class="line">    one_hot_labels = keras.utils.to_categorical(y_train, num_classes=<span class="number">2</span>)  <span class="comment"># 将标签转换为one-hot编码</span></span><br><span class="line">    model.fit(x_train_padded_seqs, one_hot_labels, batch_size=<span class="number">800</span>, epochs=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#y_test_onehot = keras.utils.to_categorical(y_test, num_classes=3)  # 将标签转换为one-hot编码</span></span><br><span class="line">    result = model.predict(x_test_padded_seqs)  <span class="comment"># 预测样本属于每个类别的概率</span></span><br><span class="line">    result_labels = np.argmax(result, axis=<span class="number">1</span>)  <span class="comment"># 获得最大概率对应的标签</span></span><br><span class="line"><span class="comment">#     y_predict = list(map(str, result_labels))</span></span><br><span class="line"><span class="comment">#     print('准确率', metrics.accuracy_score(y_test, y_predict))</span></span><br><span class="line"><span class="comment">#     print('平均f1-score:', metrics.f1_score(y_test, y_predict, average='weighted'))</span></span><br><span class="line">    print(<span class="string">'准确率'</span>, accuracy_score(y_test, result_labels))</span><br><span class="line">    print(<span class="string">'平均f1-score:'</span>, f1_score(y_test, result_labels, average=<span class="string">'weighted'</span>))</span><br></pre></td></tr></table></figure><h3 id="4-训练结果-在colab上训练-："><a href="#4-训练结果-在colab上训练-：" class="headerlink" title="4.训练结果(在colab上训练)："></a>4.训练结果(在colab上训练)：</h3><p><img src="https://img-blog.csdnimg.cn/20200313225139123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p><a href="https://blog.csdn.net/asialee_bird/article/details/88813385#1、读取数据集" target="_blank" rel="noopener"></a></p><img src="https://img-blog.csdnimg.cn/20200313225417151.png#pic_center#pic_center = 200x300" style="zoom:50%;" /><img src="https://img-blog.csdnimg.cn/20200313225437275.png#pic_center" style="zoom:50%;" /><h3 id="5-模型理解："><a href="#5-模型理解：" class="headerlink" title="5.模型理解："></a>5.模型理解：</h3><p>这里可以通过model.summary或者keras中的plot_model来输出模型整体结构，帮助理解，<a href="https://blog.csdn.net/popofzk/article/details/104689669" target="_blank" rel="noopener">plot_model报错踩坑</a></p><p>尤其是像这种有concatenate函数合并的结构，图形可视化很直观，方便学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">main_input = Input(shape=(<span class="number">50</span>,), dtype=<span class="string">'float64'</span>)</span><br><span class="line"><span class="comment"># 词嵌入（使用预训练的词向量）</span></span><br><span class="line">embedder = Embedding(<span class="number">10000</span> + <span class="number">1</span>, <span class="number">300</span>, input_length=<span class="number">50</span>, trainable=<span class="literal">False</span>)</span><br><span class="line">embed = embedder(main_input)</span><br><span class="line"><span class="comment"># 词窗大小分别为3,4,5</span></span><br><span class="line">cnn1 = Conv1D(<span class="number">256</span>, <span class="number">3</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">cnn1 = MaxPooling1D(pool_size=<span class="number">48</span>)(cnn1)</span><br><span class="line">cnn2 = Conv1D(<span class="number">256</span>, <span class="number">4</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">cnn2 = MaxPooling1D(pool_size=<span class="number">47</span>)(cnn2)</span><br><span class="line">cnn3 = Conv1D(<span class="number">256</span>, <span class="number">5</span>, padding=<span class="string">'same'</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>)(embed)</span><br><span class="line">cnn3 = MaxPooling1D(pool_size=<span class="number">46</span>)(cnn3)</span><br><span class="line"><span class="comment"># 合并三个模型的输出向量</span></span><br><span class="line">cnn = concatenate([cnn1, cnn2, cnn3], axis=<span class="number">-1</span>)</span><br><span class="line">flat = Flatten()(cnn)</span><br><span class="line">drop = Dropout(<span class="number">0.2</span>)(flat)</span><br><span class="line">main_output = Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>)(drop)</span><br><span class="line">model = Model(inputs=main_input, outputs=main_output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> plot_model</span><br><span class="line"><span class="keyword">import</span> pydot</span><br><span class="line">plot_model(model,to_file=<span class="string">'TextCNNmodel2.png'</span>,show_shapes=<span class="literal">True</span>,show_layer_names=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20200313225735218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" /><p>​                                                                                            <center><strong>图一</strong></center></p><img src="https://img-blog.csdnimg.cn/20200313225816747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" /><p>​                                                                                            <center><strong>图二</strong></center></p><img src="https://img-blog.csdnimg.cn/20200313225852804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center"  style="zoom:50%;" /><p>​                                                                                            <center><strong>图三</strong></center></p><p>​        相比于图像领域的CNN，文本处理中的TextCNN有一定的差异，第一是在维度上面，由图二（普通CNN）：每一个<strong>卷积核宽度就是每个词向量的长度</strong>，从上向下滑动，没有图像领域中的横向滑动，故调用Conv1D，每次滑动几个单词就是卷积核的高度，如图三：三种不同高度的卷积核，能够每次读取不同相邻个数的单词，这里有点像n-gram的感觉，不同高度的卷积核能够提取不同的特征，而这些特征恰好能够<strong>体现词与词之间的关联</strong>，</p><p>​        图一中：每一层的第一个维度是None，这里的None就是你的batchsize，每次处理的样本个数，因为这个参数是在model.fit中定义，所以这里显示none；</p><ol><li><p><strong>输入层</strong>：维度为batchsize $\times$ input_length ,input_length就是我们的一个句子的长度，就像图二中 输入层左边从上到下就是一句话，一个句子就是一个样本。</p></li><li><p><strong>embedding层</strong>：将batchsize $\times$ input_length输入embedding层中，embedding层的参数300，就是我们想要每个词向量维度变成的长度，为什么要这么做呢？因为如果每个词都是用onehot向量，那么整个单词词典有多长，词向量就有多长，这样第一：计算能力要求会非常高，当词典无限大的时候也没法办了，第二：onehot向量只体现了词频，无法体现语义上的含义，我们更希望采用一个低维的向量来刻画单词本身，embedding的作用就是降维，当输入之后，embedding层用input_length $\times$(len(vocab)+1) 来与 (len(vocab)+1)$\times$300相乘，就将每个句子变成了：input_length $\times$300的矩阵，从而实现词向量的降维，而这一层刚开始就是起到初始化的作用。这里不同于word2vec的是：word2vec的目的是训练词向量，而embedding是训练词向量的一种方式，或者说在整个模型任务达到收敛后，embedding层训练出来的词向量就是切合任务需求的（这里模型后面层可能是二分类，也可能是多分类或者等等任务）。</p></li><li><p><strong>卷积层</strong>：这里TextCNN设置了3、4、5的三个不同高度的卷积核，每次滑动的时候进行向量乘法，padding选为same就是让卷积之后得到的长度和原来长度（50）一致，举例：当卷积核高度为3时，步长为1向下滑动，每滑动一次生成一个向量值，那么要保证前后长度都为50的话，就要在原来的50长度下面加2个padding值。</p></li><li><p><strong>池化层</strong>：参数中如果不特别设定步长，keras默认和池化大小（pool_size）相同，定为48就是因为没算padding的0.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> TextCNN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TextCNN </tag>
            
            <tag> Imdb </tag>
            
            <tag> 文本分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mactex写论文</title>
      <link href="2019/12/22/Mactex%E5%86%99%E8%AE%BA%E6%96%87/"/>
      <url>2019/12/22/Mactex%E5%86%99%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两个下载mactex花了不少时间，参考了不少文章，有的推荐texstudio、texpad等等，最终还是比较喜欢mactex+sublime text3+skim，环境配置方面并不算麻烦，只要一步一步来就ok！<br>本文主要分为如下几个部分，帮助大家迅速安装Mac版的latex，成为论文高产者！</p><h1 id="安装Mactex"><a href="#安装Mactex" class="headerlink" title="安装Mactex"></a>安装Mactex</h1><p>如果在<a href="https://tug.org/mactex/" target="_blank" rel="noopener">官网</a>下载mactex，速度非常慢，这里推荐使用mac的必备终端插件homebrew，不用担心学习成本，很简单几步就可以完成可以参考<a href="https://zhuanlan.zhihu.com/p/59805070" target="_blank" rel="noopener">网站</a>：</p><ol><li><p>打开mac终端(在实用工具里面) </p></li><li><p>输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure></li><li><p>更改为国内中科大镜像资源：<br>在访达中搜索： brew_install,用文本编辑器打开：<br><img src="https://img-blog.csdnimg.cn/2019120819014149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>将下方内容用#注释:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO &#x3D; “https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;brew“.freeze</span><br></pre></td></tr></table></figure><p>并在下面一行添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BREW_REPO &#x3D; &quot;git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;brew.git&quot;.freeze</span><br></pre></td></tr></table></figure></li><li><p>安装brew：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby ~&#x2F;brew_install</span><br></pre></td></tr></table></figure></li><li><p>用brew安装 mactex</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install mactex</span><br></pre></td></tr></table></figure><p>等待几十分钟（有进度条），中间不要断网息屏，matex最终安装成功！！</p><h1 id="下载-amp-配置sublime"><a href="#下载-amp-配置sublime" class="headerlink" title="下载&amp;配置sublime"></a>下载&amp;配置sublime</h1><p>此处我是直接在公众号找链接下载的，很多公众号都可以下载（微信搜索mac软件会有一堆），找到sublime text3的资源并下载安装即可，很简单！可以设置中文<br><img src="https://img-blog.csdnimg.cn/20191208190906823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>再配置</p></li><li><p>进入<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control</a> 官网，复制灰色区块的代码（记得对应好版本）；</p></li><li><p>打开下载好的 Sublime Text；<br>使用快捷键“control+”（就在Esc键的下方）打开 Console，这时，会在底部看到弹出一个白色窗口；然后，将刚才复制的代码粘贴到控制面板；按下“Enter”回车键。待 install 完成后， 退出并重启软件；</p><ol start="3"><li>Sublime Text重启后，按下 ’ Command+Shift+P ‘ 打开 Command pallet，输入命令“Install Package”，按下Enter回车建。</li><li>完成之后，再输入“LaTeX Tools”，找到这一项并安装；</li><li>安装完成后，退出并重启Sublime Text。<br>从而完成了Mac LaTeX 的配置了。</li></ol></li></ol><h1 id="安装pdf预览器skim"><a href="#安装pdf预览器skim" class="headerlink" title="安装pdf预览器skim"></a>安装pdf预览器skim</h1><p>为了方便左边编译，右边实时更新pdf，这里需要调用skim软件：<br><a href="https://skim.en.softonic.com/mac" target="_blank" rel="noopener">下载地址</a><br><img src="https://img-blog.csdnimg.cn/20191208191631649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>在左上角skim中选项一栏进行设置：将预设编译器改为sublime，打钩检查文件变化，<br>好了，到这里基本上就完成了<br>好了，现在新建一个sublime文件就可以了，由于很生成很多文件，所以一定在新建文件夹里面新建一个.tex的文件（这一步很重要，否则编译不出来），编译的快捷键为：command+B<br>下面给两个大家来测试一下：</p><ol><li>包含中文的代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%!TEX program &#x3D; xelatex  </span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xeCJK, fontspec, xunicode, xltxtra&#125;  </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">hello world!</span><br><span class="line">成功</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure></li><li>IEEE官方提供的会议论文模板<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[conference]&#123;IEEEtran&#125;</span><br><span class="line">\IEEEoverridecommandlockouts</span><br><span class="line">% The preceding line is only needed to identify funding in the first footnote. If that is unneeded, please comment it out.</span><br><span class="line">\usepackage&#123;cite&#125;</span><br><span class="line">\usepackage&#123;amsmath,amssymb,amsfonts&#125;</span><br><span class="line">\usepackage&#123;algorithmic&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;textcomp&#125;</span><br><span class="line">\usepackage&#123;xcolor&#125;</span><br><span class="line">\def\BibTeX&#123;&#123;\rm B\kern-.05em&#123;\sc i\kern-.025em b&#125;\kern-.08em</span><br><span class="line">    T\kern-.1667em\lower.7ex\hbox&#123;E&#125;\kern-.125emX&#125;&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\title&#123;Real-vessel trajectory data-based in crowed inland waterway\\</span><br><span class="line">&#123;\footnotesize \textsuperscript&#123;*&#125;Note: Sub-titles are not captured in Xplore and</span><br><span class="line">should not be used&#125;</span><br><span class="line">\thanks&#123;Identify applicable funding agency here. If none, delete this.&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\author&#123;\IEEEauthorblockN&#123;1\textsuperscript&#123;st&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;2\textsuperscript&#123;nd&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;3\textsuperscript&#123;rd&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;4\textsuperscript&#123;th&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;5\textsuperscript&#123;th&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">\and</span><br><span class="line">\IEEEauthorblockN&#123;6\textsuperscript&#123;th&#125; Given Name Surname&#125;</span><br><span class="line">\IEEEauthorblockA&#123;\textit&#123;dept. name of organization (of Aff.)&#125; \\</span><br><span class="line">\textit&#123;name of organization (of Aff.)&#125;\\</span><br><span class="line">City, Country \\</span><br><span class="line">email address&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\maketitle</span><br><span class="line"></span><br><span class="line">\begin&#123;abstract&#125;</span><br><span class="line">This document is a model and instructions for \LaTeX.</span><br><span class="line">This and the IEEEtran.cls file define the components of your paper [title, text, heads, etc.]. *CRITICAL: Do Not Use Symbols, Special Characters, Footnotes, </span><br><span class="line">or Math in Paper Title or Abstract.</span><br><span class="line">\end&#123;abstract&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;IEEEkeywords&#125;</span><br><span class="line">component, formatting, style, styling, insert</span><br><span class="line">\end&#123;IEEEkeywords&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;Introduction&#125;</span><br><span class="line">This document is a model and instructions for \LaTeX.</span><br><span class="line">Please observe the conference page limits. </span><br><span class="line"></span><br><span class="line">\section&#123;Ease of Use&#125;</span><br><span class="line"></span><br><span class="line">\subsection&#123;Maintaining the Integrity of the Specifications&#125;</span><br><span class="line"></span><br><span class="line">The IEEEtran class file is used to format your paper and style the text. All margins, </span><br><span class="line">column widths, line spaces, and text fonts are prescribed; please do not </span><br><span class="line">alter them. You may note peculiarities. For example, the head margin</span><br><span class="line">measures proportionately more than is customary. This measurement </span><br><span class="line">and others are deliberate, using specifications that anticipate your paper </span><br><span class="line">as one part of the entire proceedings, and not as an independent document. </span><br><span class="line">Please do not revise any of the current designations.</span><br><span class="line"></span><br><span class="line">\section&#123;Prepare Your Paper Before Styling&#125;</span><br><span class="line">Before you begin to format your paper, first write and save the content as a </span><br><span class="line">separate text file. Complete all content and organizational editing before </span><br><span class="line">formatting. Please note sections \ref&#123;AA&#125;--\ref&#123;SCM&#125; below for more information on </span><br><span class="line">proofreading, spelling and grammar.</span><br><span class="line"></span><br><span class="line">Keep your text and graphic files separate until after the text has been </span><br><span class="line">formatted and styled. Do not number text heads---&#123;\LaTeX&#125; will do that </span><br><span class="line">for you.</span><br><span class="line"></span><br><span class="line">\subsection&#123;Abbreviations and Acronyms&#125;\label&#123;AA&#125;</span><br><span class="line">Define abbreviations and acronyms the first time they are used in the text, </span><br><span class="line">even after they have been defined in the abstract. Abbreviations such as </span><br><span class="line">IEEE, SI, MKS, CGS, ac, dc, and rms do not have to be defined. Do not use </span><br><span class="line">abbreviations in the title or heads unless they are unavoidable.</span><br><span class="line"></span><br><span class="line">\subsection&#123;Units&#125;</span><br><span class="line">\begin&#123;itemize&#125;</span><br><span class="line">\item Use either SI (MKS) or CGS as primary units. (SI units are encouraged.) English units may be used as secondary units (in parentheses). An exception would be the use of English units as identifiers in trade, such as &#96;&#96;3.5-inch disk drive&#39;&#39;.</span><br><span class="line">\item Avoid combining SI and CGS units, such as current in amperes and magnetic field in oersteds. This often leads to confusion because equations do not balance dimensionally. If you must use mixed units, clearly state the units for each quantity that you use in an equation.</span><br><span class="line">\item Do not mix complete spellings and abbreviations of units: &#96;&#96;Wb&#x2F;m\textsuperscript&#123;2&#125;&#39;&#39; or &#96;&#96;webers per square meter&#39;&#39;, not &#96;&#96;webers&#x2F;m\textsuperscript&#123;2&#125;&#39;&#39;. Spell out units when they appear in text: &#96;&#96;. . . a few henries&#39;&#39;, not &#96;&#96;. . . a few H&#39;&#39;.</span><br><span class="line">\item Use a zero before decimal points: &#96;&#96;0.25&#39;&#39;, not &#96;&#96;.25&#39;&#39;. Use &#96;&#96;cm\textsuperscript&#123;3&#125;&#39;&#39;, not &#96;&#96;cc&#39;&#39;.)</span><br><span class="line">\end&#123;itemize&#125;</span><br><span class="line"></span><br><span class="line">\subsection&#123;Equations&#125;</span><br><span class="line">Number equations consecutively. To make your </span><br><span class="line">equations more compact, you may use the solidus (~&#x2F;~), the exp function, or </span><br><span class="line">appropriate exponents. Italicize Roman symbols for quantities and variables, </span><br><span class="line">but not Greek symbols. Use a long dash rather than a hyphen for a minus </span><br><span class="line">sign. Punctuate equations with commas or periods when they are part of a </span><br><span class="line">sentence, as in:</span><br><span class="line">\begin&#123;equation&#125;</span><br><span class="line">a+b&#x3D;\gamma\label&#123;eq&#125;</span><br><span class="line">\end&#123;equation&#125;</span><br><span class="line"></span><br><span class="line">Be sure that the </span><br><span class="line">symbols in your equation have been defined before or immediately following </span><br><span class="line">the equation. Use &#96;&#96;\eqref&#123;eq&#125;&#39;&#39;, not &#96;&#96;Eq.~\eqref&#123;eq&#125;&#39;&#39; or &#96;&#96;equation \eqref&#123;eq&#125;&#39;&#39;, except at </span><br><span class="line">the beginning of a sentence: &#96;&#96;Equation \eqref&#123;eq&#125; is . . .&#39;&#39;</span><br><span class="line"></span><br><span class="line">\subsection&#123;\LaTeX-Specific Advice&#125;</span><br><span class="line"></span><br><span class="line">Please use &#96;&#96;soft&#39;&#39; (e.g., \verb|\eqref&#123;Eq&#125;|) cross references instead</span><br><span class="line">of &#96;&#96;hard&#39;&#39; references (e.g., \verb|(1)|). That will make it possible</span><br><span class="line">to combine sections, add equations, or change the order of figures or</span><br><span class="line">citations without having to go through the file line by line.</span><br><span class="line"></span><br><span class="line">Please don&#39;t use the \verb|&#123;eqnarray&#125;| equation environment. Use</span><br><span class="line">\verb|&#123;align&#125;| or \verb|&#123;IEEEeqnarray&#125;| instead. The \verb|&#123;eqnarray&#125;|</span><br><span class="line">environment leaves unsightly spaces around relation symbols.</span><br><span class="line"></span><br><span class="line">Please note that the \verb|&#123;subequations&#125;| environment in &#123;\LaTeX&#125;</span><br><span class="line">will increment the main equation counter even when there are no</span><br><span class="line">equation numbers displayed. If you forget that, you might write an</span><br><span class="line">article in which the equation numbers skip from (17) to (20), causing</span><br><span class="line">the copy editors to wonder if you&#39;ve discovered a new method of</span><br><span class="line">counting.</span><br><span class="line"></span><br><span class="line">&#123;\BibTeX&#125; does not work by magic. It doesn&#39;t get the bibliographic</span><br><span class="line">data from thin air but from .bib files. If you use &#123;\BibTeX&#125; to produce a</span><br><span class="line">bibliography you must send the .bib files. </span><br><span class="line"></span><br><span class="line">&#123;\LaTeX&#125; can&#39;t read your mind. If you assign the same label to a</span><br><span class="line">subsubsection and a table, you might find that Table I has been cross</span><br><span class="line">referenced as Table IV-B3. </span><br><span class="line"></span><br><span class="line">&#123;\LaTeX&#125; does not have precognitive abilities. If you put a</span><br><span class="line">\verb|\label| command before the command that updates the counter it&#39;s</span><br><span class="line">supposed to be using, the label will pick up the last counter to be</span><br><span class="line">cross referenced instead. In particular, a \verb|\label| command</span><br><span class="line">should not go before the caption of a figure or a table.</span><br><span class="line"></span><br><span class="line">Do not use \verb|\nonumber| inside the \verb|&#123;array&#125;| environment. It</span><br><span class="line">will not stop equation numbers inside \verb|&#123;array&#125;| (there won&#39;t be</span><br><span class="line">any anyway) and it might stop a wanted equation number in the</span><br><span class="line">surrounding equation.</span><br><span class="line"></span><br><span class="line">\subsection&#123;Some Common Mistakes&#125;\label&#123;SCM&#125;</span><br><span class="line">\begin&#123;itemize&#125;</span><br><span class="line">\item The word &#96;&#96;data&#39;&#39; is plural, not singular.</span><br><span class="line">\item The subscript for the permeability of vacuum $\mu_&#123;0&#125;$, and other common scientific constants, is zero with subscript formatting, not a lowercase letter &#96;&#96;o&#39;&#39;.</span><br><span class="line">\item In American English, commas, semicolons, periods, question and exclamation marks are located within quotation marks only when a complete thought or name is cited, such as a title or full quotation. When quotation marks are used, instead of a bold or italic typeface, to highlight a word or phrase, punctuation should appear outside of the quotation marks. A parenthetical phrase or statement at the end of a sentence is punctuated outside of the closing parenthesis (like this). (A parenthetical sentence is punctuated within the parentheses.)</span><br><span class="line">\item A graph within a graph is an &#96;&#96;inset&#39;&#39;, not an &#96;&#96;insert&#39;&#39;. The word alternatively is preferred to the word &#96;&#96;alternately&#39;&#39; (unless you really mean something that alternates).</span><br><span class="line">\item Do not use the word &#96;&#96;essentially&#39;&#39; to mean &#96;&#96;approximately&#39;&#39; or &#96;&#96;effectively&#39;&#39;.</span><br><span class="line">\item In your paper title, if the words &#96;&#96;that uses&#39;&#39; can accurately replace the word &#96;&#96;using&#39;&#39;, capitalize the &#96;&#96;u&#39;&#39;; if not, keep using lower-cased.</span><br><span class="line">\item Be aware of the different meanings of the homophones &#96;&#96;affect&#39;&#39; and &#96;&#96;effect&#39;&#39;, &#96;&#96;complement&#39;&#39; and &#96;&#96;compliment&#39;&#39;, &#96;&#96;discreet&#39;&#39; and &#96;&#96;discrete&#39;&#39;, &#96;&#96;principal&#39;&#39; and &#96;&#96;principle&#39;&#39;.</span><br><span class="line">\item Do not confuse &#96;&#96;imply&#39;&#39; and &#96;&#96;infer&#39;&#39;.</span><br><span class="line">\item The prefix &#96;&#96;non&#39;&#39; is not a word; it should be joined to the word it modifies, usually without a hyphen.</span><br><span class="line">\item There is no period after the &#96;&#96;et&#39;&#39; in the Latin abbreviation &#96;&#96;et al.&#39;&#39;.</span><br><span class="line">\item The abbreviation &#96;&#96;i.e.&#39;&#39; means &#96;&#96;that is&#39;&#39;, and the abbreviation &#96;&#96;e.g.&#39;&#39; means &#96;&#96;for example&#39;&#39;.</span><br><span class="line">\end&#123;itemize&#125;</span><br><span class="line">An excellent style manual for science writers is \cite&#123;b7&#125;.</span><br><span class="line"></span><br><span class="line">\subsection&#123;Authors and Affiliations&#125;</span><br><span class="line">\textbf&#123;The class file is designed for, but not limited to, six authors.&#125; A </span><br><span class="line">minimum of one author is required for all conference articles. Author names </span><br><span class="line">should be listed starting from left to right and then moving down to the </span><br><span class="line">next line. This is the author sequence that will be used in future citations </span><br><span class="line">and by indexing services. Names should not be listed in columns nor group by </span><br><span class="line">affiliation. Please keep your affiliations as succinct as possible (for </span><br><span class="line">example, do not differentiate among departments of the same organization).</span><br><span class="line"></span><br><span class="line">\subsection&#123;Identify the Headings&#125;</span><br><span class="line">Headings, or heads, are organizational devices that guide the reader through </span><br><span class="line">your paper. There are two types: component heads and text heads.</span><br><span class="line"></span><br><span class="line">Component heads identify the different components of your paper and are not </span><br><span class="line">topically subordinate to each other. Examples include Acknowledgments and </span><br><span class="line">References and, for these, the correct style to use is &#96;&#96;Heading 5&#39;&#39;. Use </span><br><span class="line">&#96;&#96;figure caption&#39;&#39; for your Figure captions, and &#96;&#96;table head&#39;&#39; for your </span><br><span class="line">table title. Run-in heads, such as &#96;&#96;Abstract&#39;&#39;, will require you to apply a </span><br><span class="line">style (in this case, italic) in addition to the style provided by the drop </span><br><span class="line">down menu to differentiate the head from the text.</span><br><span class="line"></span><br><span class="line">Text heads organize the topics on a relational, hierarchical basis. For </span><br><span class="line">example, the paper title is the primary text head because all subsequent </span><br><span class="line">material relates and elaborates on this one topic. If there are two or more </span><br><span class="line">sub-topics, the next level head (uppercase Roman numerals) should be used </span><br><span class="line">and, conversely, if there are not at least two sub-topics, then no subheads </span><br><span class="line">should be introduced.</span><br><span class="line"></span><br><span class="line">\subsection&#123;Figures and Tables&#125;</span><br><span class="line">\paragraph&#123;Positioning Figures and Tables&#125; Place figures and tables at the top and </span><br><span class="line">bottom of columns. Avoid placing them in the middle of columns. Large </span><br><span class="line">figures and tables may span across both columns. Figure captions should be </span><br><span class="line">below the figures; table heads should appear above the tables. Insert </span><br><span class="line">figures and tables after they are cited in the text. Use the abbreviation </span><br><span class="line">&#96;&#96;Fig.~\ref&#123;fig&#125;&#39;&#39;, even at the beginning of a sentence.</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[htbp]</span><br><span class="line">\caption&#123;Table Type Styles&#125;</span><br><span class="line">\begin&#123;center&#125;</span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">\textbf&#123;Table&#125;&amp;\multicolumn&#123;3&#125;&#123;|c|&#125;&#123;\textbf&#123;Table Column Head&#125;&#125; \\</span><br><span class="line">\cline&#123;2-4&#125; </span><br><span class="line">\textbf&#123;Head&#125; &amp; \textbf&#123;\textit&#123;Table column subhead&#125;&#125;&amp; \textbf&#123;\textit&#123;Subhead&#125;&#125;&amp; \textbf&#123;\textit&#123;Subhead&#125;&#125; \\</span><br><span class="line">\hline</span><br><span class="line">copy&amp; More table copy$^&#123;\mathrm&#123;a&#125;&#125;$&amp; &amp;  \\</span><br><span class="line">\hline</span><br><span class="line">\multicolumn&#123;4&#125;&#123;l&#125;&#123;$^&#123;\mathrm&#123;a&#125;&#125;$Sample of a Table footnote.&#125;</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\label&#123;tab1&#125;</span><br><span class="line">\end&#123;center&#125;</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">%\centerline&#123;\includegraphics&#123;fig1.png&#125;&#125;</span><br><span class="line">\caption&#123;Example of a figure caption.&#125;</span><br><span class="line">\label&#123;fig&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">Figure Labels: Use 8 point Times New Roman for Figure labels. Use words </span><br><span class="line">rather than symbols or abbreviations when writing Figure axis labels to </span><br><span class="line">avoid confusing the reader. As an example, write the quantity </span><br><span class="line">&#96;&#96;Magnetization&#39;&#39;, or &#96;&#96;Magnetization, M&#39;&#39;, not just &#96;&#96;M&#39;&#39;. If including </span><br><span class="line">units in the label, present them within parentheses. Do not label axes only </span><br><span class="line">with units. In the example, write &#96;&#96;Magnetization (A&#x2F;m)&#39;&#39; or &#96;&#96;Magnetization </span><br><span class="line">\&#123;A[m(1)]\&#125;&#39;&#39;, not just &#96;&#96;A&#x2F;m&#39;&#39;. Do not label axes with a ratio of </span><br><span class="line">quantities and units. For example, write &#96;&#96;Temperature (K)&#39;&#39;, not </span><br><span class="line">&#96;&#96;Temperature&#x2F;K&#39;&#39;.</span><br><span class="line"></span><br><span class="line">\section*&#123;Acknowledgment&#125;</span><br><span class="line"></span><br><span class="line">The preferred spelling of the word &#96;&#96;acknowledgment&#39;&#39; in America is without </span><br><span class="line">an &#96;&#96;e&#39;&#39; after the &#96;&#96;g&#39;&#39;. Avoid the stilted expression &#96;&#96;one of us (R. B. </span><br><span class="line">G.) thanks $\ldots$&#39;&#39;. Instead, try &#96;&#96;R. B. G. thanks$\ldots$&#39;&#39;. Put sponsor </span><br><span class="line">acknowledgments in the unnumbered footnote on the first page.</span><br><span class="line"></span><br><span class="line">\section*&#123;References&#125;</span><br><span class="line"></span><br><span class="line">Please number citations consecutively within brackets \cite&#123;IEEEhowto:IEEEtranpage&#125;. The </span><br><span class="line">sentence punctuation follows the bracket \cite&#123;b2&#125;. Refer simply to the reference </span><br><span class="line">number, as in \cite&#123;b3&#125;---do not use &#96;&#96;Ref. \cite&#123;b3&#125;&#39;&#39; or &#96;&#96;reference \cite&#123;b3&#125;&#39;&#39; except at </span><br><span class="line">the beginning of a sentence: &#96;&#96;Reference \cite&#123;b3&#125; was the first $\ldots$&#39;&#39;</span><br><span class="line"></span><br><span class="line">Number footnotes separately in superscripts. Place the actual footnote at </span><br><span class="line">the bottom of the column in which it was cited. Do not put footnotes in the </span><br><span class="line">abstract or reference list. Use letters for table footnotes.</span><br><span class="line"></span><br><span class="line">Unless there are six authors or more give all authors&#39; names; do not use </span><br><span class="line">&#96;&#96;et al.&#39;&#39;. Papers that have not been published, even if they have been </span><br><span class="line">submitted for publication, should be cited as &#96;&#96;unpublished&#39;&#39; \cite&#123;b4&#125;. Papers </span><br><span class="line">that have been accepted for publication should be cited as &#96;&#96;in press&#39;&#39; \cite&#123;b5&#125;. </span><br><span class="line">Capitalize only the first word in a paper title, except for proper nouns and </span><br><span class="line">element symbols.</span><br><span class="line"></span><br><span class="line">For papers published in translation journals, please give the English </span><br><span class="line">citation first, followed by the original foreign-language citation \cite&#123;b6&#125;.</span><br><span class="line"></span><br><span class="line">\bibliographystyle&#123;.&#x2F;bibliography&#x2F;IEEEtran&#125;</span><br><span class="line">\bibliography&#123;.&#x2F;bibliography&#x2F;IEEEabrv,.&#x2F;bibliography&#x2F;IEEEexample&#125;</span><br><span class="line"></span><br><span class="line">\vspace&#123;12pt&#125;</span><br><span class="line">\color&#123;red&#125;</span><br><span class="line">IEEE conference templates contain guidance text for composing and formatting conference papers. Please ensure that all template text is removed from your conference paper prior to submission to the conference. Failure to remove the template text from your paper may result in your paper not being published.</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>按下command+B，就会自动调出skim的pdf啦！英文期刊、会议的模板，都可以在<a href="https://www.overleaf.com" target="_blank" rel="noopener">overleaf</a>在线latex网站下载，要注册账号（如果登不了就用梯），然后就可以替换对应的文字部分生成论文了，当然，公式还是要一点点语句功底的，可以对照latex公式手册来进行就好！遇到不会的地方直接百度即可！</li></ol><p><img src="https://img-blog.csdnimg.cn/20191208193437645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20191208192348163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>参考博客：<br><a href="https://www.jianshu.com/p/b1e3b029ded5" target="_blank" rel="noopener">https://www.jianshu.com/p/b1e3b029ded5</a><br><a href="https://zhuanlan.zhihu.com/p/59805070" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/59805070</a></p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 论文排版 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 学术 </tag>
            
            <tag> Mac </tag>
            
            <tag> 论文排版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本抽取算法Textrank</title>
      <link href="2019/12/20/%E6%96%87%E6%9C%AC%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95Textrank/"/>
      <url>2019/12/20/%E6%96%87%E6%9C%AC%E6%8A%BD%E5%8F%96%E7%AE%97%E6%B3%95Textrank/</url>
      
        <content type="html"><![CDATA[<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="Textrank"><a href="#Textrank" class="headerlink" title="Textrank"></a>Textrank</h2><p>实际上，<strong>TextRank</strong>就是<strong>PageRank</strong>在文本上的应用。<br>PageRank是一种用于排序网页的随机算法，它的工作原理是将互联网看作有向图，互联网上的网页视作节点，节点$V_i$到节点$V_j$，的超链接视作有向边，初始化时每个节点的权重$S(V_i)$都是1，以迭代的方式更新每个节点的权重。每次迭代权重的更新表达式如下：<br>$$S(V_i)=(1-d)+d\times{\sum_{V_j\in{In(V_j)}}\frac{1}{|Out(V_j)|}}$$</p><p>其中$d$是一个介于$(0，1)$之间的常数因子，在PageRank中模拟用户点击链接从而跳出当前网站的概率<br>. $In(V_j)$表示链接到的节点集合<br>. $Out(V_j)$表示从$V_j$出发链接到的节点集合<br><br>可见，并不是外链越多，网站的PageRank就越高。网站给别的网站做外链越多，每条外链的权重就越低（如垃圾网站之间相互链接）。因为根据式中的分式$\frac{1}{|Out(V_j)|}$，外链权重跟外链总数成反比，与提供外链的网站权重成正比。如果一个网站的外链都是这种权重很低的外链，那么在迭代中它的PageRank会下降。<br><br>对于文本关键词提取也是类似的，与之前的TF-IDF算法需要依赖语料库不同，基于TextRank的关键词抽取算法，可以把文本中的每个词看作是一个节点/网页，把文本中词的共现关系看作是边/链接。与PageRank不同的是，PageRank中是有向边，而TextRank中是无向边或可以看作是双向边，具有共现关系的两个词互相指向。<br><a href="https://blog.csdn.net/sdu_hao/article/details/86768966" target="_blank" rel="noopener">参考链接</a><br>所谓的共现关系，就是对文本进行预处理(分词，去停用词，以及词性标注/筛选)后，设置一个默认大小为m的窗口,在文本中从头到尾依次滑动，同一个窗口中的任意两个词之间都连一条边(无向边，入度$In(V_j)$和出度$Out(V_j)$完全一致)。画出图之后，对每个词$S(V_i)$赋于一个初始值$S_0(V_i)$,然后代入上述公式进行迭代，直到收敛(在某次更新前后，$S(V_i)$不再变化).最终选择按词语/节点的Rank值降序排列，选择TopN作为我们的关键词。<br></p><h3 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h3><ol><li><p>对给定的文本进行断句，按?。!等进行分隔</p></li><li><p>对于每个句子，进行分词，去除停用词，词性标注。并保留指定的词性，如名词、动词等,去掉其他无关词性的词语。作为<strong>候选关键词</strong>。</p></li><li><p>基于候选关键词，构建图G=(V,E),其中V是节点集/候选关键词集合，通过设置窗口和共现关系构造任意两个节点/词语之间的边，两个节点/词语之间存在边当且仅当这两个节点/词语在长度为m的窗口中共同出现过，窗口从头到尾不断滑动。</p></li><li><p>根据PageRank迭代公式，初始化每个节点/词语的权重/Rank值(可以是1/N，N为节点/词语数量),针对每个节点/词语，代入上述公式进行迭代，直至收敛。</p></li><li><p>对所有节点/词语最终的权重/Rank值进行降序排列，选择TopN作为我们的关键词</p></li><li><p>由5得到最重要的N个词，在原始文本中进行标记，若形成相邻词组，则组合成多词关键词。例如，文本中有句子“Matlab code for plotting ambiguity function”，如果“Matlab”和“code”均属于候选关键词，则组合成“Matlab code”加入关键词序列。</p></li></ol><h2 id="TextRank与TF-IDF比较"><a href="#TextRank与TF-IDF比较" class="headerlink" title="TextRank与TF-IDF比较"></a>TextRank与TF-IDF比较</h2><p>1.tf-idf中计算idf值需要依赖于语料库,这给他带来了统计上的优势,即它能够预先知道一个词的重要程度.这是它优于textrank的地方. 而textrank只依赖文章本身,它认为一开始每个词的重要程度是一样的.</p><p>2.tf-idf是纯粹用词频的思想(无论是tf还是idf都是)来计算一个词的得分,最终来提取关键词,完全没有用到词之间的关联性. 而textrank用到了词之间的关联性(将相邻的词链接起来),这是其优于tf-idf的地方.</p><p>TF-IDF和TextRank各有优劣，在实际使用中效果差异不大，可以同时使用互相参考。</p><p><strong>参考链接</strong><br><a href="https://blog.csdn.net/sdu_hao/article/details/86768966" target="_blank" rel="noopener">https://blog.csdn.net/sdu_hao/article/details/86768966</a><br><a href="https://blog.csdn.net/sdu_hao/article/details/86768966" target="_blank" rel="noopener">https://blog.csdn.net/sdu_hao/article/details/86768966</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 文本抽取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Textrank </tag>
            
            <tag> 关键词抽取 </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC软件集锦</title>
      <link href="2019/12/08/MAC/"/>
      <url>2019/12/08/MAC/</url>
      
        <content type="html"><![CDATA[<h2 id="装机必备："><a href="#装机必备：" class="headerlink" title="装机必备："></a>装机必备：</h2><p>搜狗输入法  去官网下 mac</p><h2 id="装软件必备地址："><a href="#装软件必备地址：" class="headerlink" title="装软件必备地址："></a>装软件必备地址：</h2><p>下载软件：<br>网址：<br><a href="https://xclient.info/" target="_blank" rel="noopener">https://xclient.info/</a>  下载安装解压密码：xclient.info<br><a href="https://www.macappbox.com/" target="_blank" rel="noopener">https://www.macappbox.com/</a><br>公众号：Mac软件…</p><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>浏览器：chrome （信息量非常大，另起一篇博客细说）<br>pdf：自带用的多；修改方面：pdf expert；acrobat；marginote；<br>思维导图：xmind zen；<br>office：wps<br>写论文：虚拟机：paralles desktop；<br>欧路词典：下载破解的  在csdn上找，Mac天空 - <a href="http://www.mac69.com；" target="_blank" rel="noopener">www.mac69.com；</a><br>markdown：typora<br>看视频用的必备！：inna；自带的QuickTime；<br>压缩文件 解压文件：keka（设置默认打开方式：右键文件–显示简介–全部更改）</p><h2 id="提升效率："><a href="#提升效率：" class="headerlink" title="提升效率："></a>提升效率：</h2><p>插件：alfred：工作流：ocr功能：调用百度文本识别api；找文件：用find+空格+文件名；找软件直接搜（详细教程另起）<br>贴图、截图：snipaste<br>截图：xnip<br>最喜欢的剪切板：paste conda deactivate<br>展现快捷键：cheatsheet<br>替代xshell：royal tsx；iterm<br>Latex：mactex；<br>新建文件菜单：mac不自带，需要下载插件<br>Downie ：下载网页视频：<br>系统：CleanMyMac   Geekbench</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 提升效率 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 效率 </tag>
            
            <tag> 学术 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归</title>
      <link href="2019/11/15/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
      <url>2019/11/15/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="（五）逻辑回归"><a href="#（五）逻辑回归" class="headerlink" title="（五）逻辑回归"></a>（五）逻辑回归</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>当给定一个训练集（矩阵），如下：</p><table><thead><tr><th align="center">年龄</th><th>工资</th><th>学历</th><th align="center">逾期</th></tr></thead><tbody><tr><td align="center">20</td><td>4000</td><td>本科</td><td align="center">YES（Y=1）</td></tr><tr><td align="center">25</td><td>5000</td><td>专科</td><td align="center">NO（Y=0）</td></tr><tr><td align="center">22</td><td>6000</td><td>本科</td><td align="center">NO</td></tr><tr><td align="center">28</td><td>5000</td><td>专科</td><td align="center">YES</td></tr><tr><td align="center">27</td><td>8000</td><td>本科</td><td align="center"></td></tr></tbody></table><p>我们需要去预测最后一个人是否会逾期，归根到底就是要学习从输入到输出的映射$$f:X \rightarrow Y$$</p><p>最后求出一个条件概率$P(Y|X)$，即$P(Y=1|27，8000，本科)$，其概率大则逾期可能性大，或者说就是比较$P(Y=1|27，8000，本科)$和$P(Y=0|27，8000，本科)$的大小。</p><p>那么能否用线性回归来表示呢？比如：$P(Y=1)=w^Tx+b$,观察过值域后会发现是不行的，概率不大于1，而右边值域为负无穷到正无穷，为了使得等号成立，则需要采用逻辑函数$\sigma$,$$\sigma(x)=\frac{1}{1+e^{-x}}$$</p><p><img src="https://img-blog.csdnimg.cn/20200114131425132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>逻辑函数$\sigma(x)$的值域为$(0,1)$满足概率的值域范围，将$w^Tx+b$作为自变量替换即可，条件概率即为：</p><p>$$P(Y|X)=\frac{1}{1+e^{-(w^T+b)}}$$</p><p>对于二分类问题来说：</p><p>$$P(Y=1|X)=\frac{1}{1+e^{-w^T+b}}$$</p><p>$$P(Y=0|X)=\frac{e^{-w^T+b}}{1+e^{-w^T+b}}$$</p><p>两个式子可以合并为：</p><p>$P(y|x,w)=p(y=1|x,w)^y[1-p(y=1|x,w)]^{(1-y)}$</p><p>合并的式子可这样理解：当$y=1$时：$p(y=1|x,w)=p(y=1|x,w)\times1$</p><p>当$y=0$时：$p(y=0|x,w)=1-p(y=1|x,w)$</p><p><strong>逻辑函数为线性分类器</strong></p><p>证明如下：</p><p><img src="https://img-blog.csdnimg.cn/20191127192443953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>这是感知机里面的图片，相同的，逻辑回归也是将平面上各种点进行了分类，为了证明逻辑回归是线性的分类器，我们将落在分离平面上的点组成的线方程给求出来，是直线则是线性分类，落在分离平面上的点有一个特点，它到两边的距离都差不多，也就是说它是$y=1$和$y=0$的概率相等：</p><p>$$P(Y=1|X)=P(Y=0|X)$$</p><p>$$\frac{1}{1+e^{-w^T+b}}=\frac{e^{-w^T+b}}{1+e^{-w^T+b}}$$</p><p>推导可得：</p><p>$$w^Tx+b=0$$</p><p>即：分离平面（边界）为<strong>线性分类器</strong></p><p><strong>逻辑回归的目标函数：</strong></p><p>前面已经定义了合并后的：</p><p>$$P(y|x,w)=p(y=1|x,w)^y[1-p(y=1|x,w)]^{1-y}$$</p><p>下面我们要来由训练集训练出最好的权重$(w)$和偏置$(b)$,从而使得能够最好的拟合我们的数据集$(X)$,因此我们需要最大化：给定样本数据的$x_i,w,b$情况下，对应为label$(y_i)$的概率，也就是条件概率$p(y_i|x_i,w,b)$（最大似然）,想让每一项都最大，那么每个样本条件概率相乘也就最大。</p><p>即最大化目标函数：</p><p>$$\hat{w},\hat{b}=armax_{w,b}\prod_{i=1}^{n}p(y_i|x_i,w,b)$$（寻找$w,b$使得连乘式最大化）</p><p>$armax_{w,b}\prod_{i=1}^{n}p(y_i|x_i,w,b)=argmax_{w,b}\log(\prod_{i=1}^{n}p(y_i|x_i,w,b))=argmax_{w,b}\sum_{i=1}^{n} \\log p(y_i|x_i,w,b)$</p><p>通常我们不喜欢去求最大值，而是转化为最小值求解，即：</p><p>$$argmin_{w,b}=-\sum_{i=1}^{n}\log{p(y_i|x_i,w)}$$</p><p><strong>逻辑回归的梯度下降法：</strong></p><p>$argmin_{w,b}-\sum_{i=1}^{n}\log{p(y_i|x_i,w)} \\ =argmin_{w,b}-\sum_{i=1}^{n}\log p(y_i=1|x,w)^{y_i}[1-p(y_i=1|x,w)]^{1-y_i} \\ =argmax_{w,b}-\sum_{i=1}^{n}y_i\log p(y_i=1|x,w)+(1-y_i)\log p(y_i=1|x,w)$</p><p>令$-\sum_{i=1}^{n}y_i\log \sigma (w^Tx+b)+(1-y_i)\log \sigma (w^Tx+b)$为$L(w,b)$</p><p><strong>对权重$w$求导：</strong> 求导知识：$\begin{cases}\sigma(x)=\frac{1}{1+e^{-x}}\\sigma^{’}(x)=\sigma(x)[1-\sigma(x)]\\ (\log x)^{’} =\frac{1}{x} \end{cases}$</p><p>$\frac{\partial L(w,b)}{\partial w}=-\sum_{i=1}^{n}y_i\frac{\sigma(w^Tx+b)[1-\sigma(w^Tx+b)]}{\sigma(w^Tx+b)}x_i+(1-y_i)\frac{-\sigma(w^Tx+b)[1-\sigma(w^Tx+b)]}{1-\sigma(w^Tx+b)}x_i \\ =-\sum_{i=1}^{n}y_i[1-\sigma(w^Tx+b)]x_i+(y_i-1)\sigma(w^Tx+b)x_i \\ =-\sum_{i=1}^{n}[y_i-\sigma(w^Tx+b)]x_i \\ =\sum_{i=1}^{n}[\sigma(w^Tx+b)-y_i]x_i$</p><p><strong>对偏置$b$求导：</strong></p><p>$\frac{\partial L(w,b)}{\partial b}=\sum_{i=1}^{n}[\sigma(w^Tx+b)-y_i]$</p><p>（两者相比较，相差一个外部$x_i$相乘）</p><p><strong>梯度下降：</strong></p><p>初始化$w^1,b^1$</p><p>$For ：t=1,2…$</p><p>​    $w^{t+1}=w^t-\eta \sum_{i=1}^{n}[\sigma(w^Tx+b)-y_i]x_i \\ b^{t+1}=b^t-\eta \sum_{i=1}^{n}[\sigma(w^Tx+b)-y_i]$</p><p>梯度下降方式又分为：$\begin{cases}1.标准梯度下降 \\ 2.随机梯度下降 \\ 3.Mini-batch梯度下降 \end{cases}$<br>标准梯度下降是在权值更新前对所有样例汇总误差,而随机梯度下降的权值是通过考查某个训练样例来更新的，而mini-batch则是两者的折中。<br>一般来说不管是机器学习还是深度学习算法，我们一般都常用mini-batch，其原因在于，假如我们每次将全部样本丢进去计算，此时的计算量（例如导数、w、b、激活值等等缓存值）占用内存相当之大！对于一般计算机而言承担不起，所以mini-batch的选择其实主要还是根据自身硬件水平，比如深度学习中用GPU时要考虑显卡大小，显卡越好，mini-batch可以越大（一般来说是这样）。</p><p><strong>参考博客：</strong><br><a href="https://www.cnblogs.com/limitlessun/p/8611103.html" target="_blank" rel="noopener">https://www.cnblogs.com/limitlessun/p/8611103.html</a><br><a href="https://www.pkudodo.com" target="_blank" rel="noopener">https://www.pkudodo.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 逻辑回归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学习方法 </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="2019/11/13/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>2019/11/13/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="（四）决策树"><a href="#（四）决策树" class="headerlink" title="（四）决策树"></a>（四）决策树</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>书中实例：贷款申请样本，通过一个人的年龄、是否有工作、是否有自己的房子、信贷情况这四个特征判定，最终构建模型来判别是否给予贷款，如图：<br><img src="https://img-blog.csdnimg.cn/20191208162829471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>希望通过所给的训练数据学习一个贷款申请的决策树，用来对未来贷款申请进行分类（二分类），决策树可以理解成：有一个根节点开始，往下进行分支，越重要的节点应该离根越近，我们将重要的、影响度大的特征作为根节点，依次向下，其次重要的往下面街接，如图：<br><img src="https://img-blog.csdnimg.cn/20191209103004602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><strong>熵与条件熵的定义：</strong><br><strong>熵:</strong> 表示随机变量不确定性的度量，设$X$是一个取有限个值的离散随机变量，其概率分布为：$$P(X=x_i)=p_i,  i=1,2,…,n$$<br>则随机变量$X$的熵定义为：<br>$$H(X)=-\sum_{i=1}^{n}p_i\log{p_i}$$<br>越大的概率，得到的熵值越小，也就是说概率大的确定性大，不确定不就小了嘛，反之亦然；<br>举例：$A$集合：[1,1,1,1,1,1,1,2,2]<br>   &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$B$集合：[1,2,3,4,5,6,7,8,9]<br>   显然$A$集合的熵值要低，因为A里面只有两种类别，相对稳定一些，而B中类别太多，熵值就会大很多，而在分类问题中我们当然是希望分支后的数据类别的熵值小，确定性就大嘛，熵值越低，分类效果越好撒<br>同理<strong>条件熵</strong> 就是表示在已知随机变量X的条件下随机变量Y的不确定性$H(Y|X)$,定义为$X$给定条件下Y的条件概率分布的熵对X的数学期望：<br>$$H(Y|X)=\sum_{i=1}^{n}p_iH(Y|X=x_i)$$</p><p><strong>信息增益：</strong><br>做决策树目的就是在过程中将熵值不断减小，增益呢，就是熵值下降了多少，通过信息增益来遍历计算所有特征，哪个特征使得我们的信息增益最大，最大的哪个特征就拿过来当做根节点，接着同理把剩下的特征也这么来排序，排出第二个节点，第三个节点。。。<br>信息增益表示得知特征$X$的信息而使得类$Y$的信息不确定性减少的程度。<br> 特征$A$对训练数据集$D$的信息增益$g(D,A)$,定义为集合$D$的经验熵，经验熵就是不考虑特征，只考虑整个样本label的熵，附上书中实例：<br> <img src="https://img-blog.csdnimg.cn/20191209110159625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br> $H(D)$与特征$A$给定条件下$D$的经验条件熵$H(D|A)$之差，即：<br>$$g(D,A)=H(D)-H(D|A)$$<br>熵$H(Y)$与条件熵$H(Y|X)$之差成为互信息，此时信息增益等于互信息。<br><strong>信息增益算法：</strong><br>输入：训练数据集$D$和特征$A$；<br>输出：特征$A$对训练数据集$D$的信息增益$g(D,A)$。<br>(1)计算数据集$D$的经验熵$H(D)$<br>$$H(D)=-\sum_{k=1}^{k}\frac{|C_k|}{|D|}\log{\frac{|C_k|}{|D|}}$$<br>(2)计算特征$A$对数据集$D$的经验条件熵$H(D|A)$<br>$$H(D|A)=\sum_{i=1}^{n}\frac{|D_I|}{|D|}H(D_i)=-\sum_{i=1}^{n}\frac{|D_i|}{D}\sum_{k=1}^{k}\frac{|D_{ik}|}{D_i}\log_{2}\frac{|D_{ik}|}{|D_i|}$$<br>(3)计算信息增益：<br>$$g(D,A)=H(D)-H(D,A)$$</p><p><strong>信息增益比：</strong><br>以信息增益作为划分训练集的特征，存在偏向于选择取值较多的特征的问题，使用信息增益比对其校正：特征$A$对训练数据集$D$的信息增益比$g_R(D,A)$定义为其信息增益$g(D,A$与训练数据集$D$关于特征$A$的值的熵$H_A(D)$之比，即：<br>$$g_R(D,A)=\frac{g(D,A)}{H_A(D)}$$<br>以上讨论都是离散值，如果是连续值呢？</p><p><strong>ID3算法</strong>:<br>核心是在决策树各个结点上应用信息增益准则选择信息增益最大且大于阈值的特征，递归地构建决策树.ID3相当于用极大似然法进行概率模型的选择.甶于算法只有树的生成，所以容易产生过拟合。<br><img src="https://img-blog.csdnimg.cn/2019120817050284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191208170537141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>决策树剪枝策略：</strong><br>为什么要剪枝：决策树过拟合风险很大，<br>预剪枝：边建立决策树边进行剪枝的操作<br>后剪枝：当建立完决策树后进行剪枝操作</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p><a href="https://www.pkudodo.com" target="_blank" rel="noopener">参考代码:</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#Author:Dodo</span></span><br><span class="line"><span class="comment">#Date:2018-11-21</span></span><br><span class="line"><span class="comment">#Email:lvtengchao@pku.edu.cn</span></span><br><span class="line"><span class="comment">#Blog:www.pkudodo.com</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据集：Mnist</span></span><br><span class="line"><span class="string">训练集数量：60000</span></span><br><span class="line"><span class="string">测试集数量：10000</span></span><br><span class="line"><span class="string">------------------------------</span></span><br><span class="line"><span class="string">运行结果：ID3(未剪枝)</span></span><br><span class="line"><span class="string">    正确率：85.9%</span></span><br><span class="line"><span class="string">    运行时长：356s</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载文件</span></span><br><span class="line"><span class="string">    :param fileName:要加载的文件路径</span></span><br><span class="line"><span class="string">    :return: 数据集和标签集</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#存放数据及标记</span></span><br><span class="line">    dataArr = []; labelArr = []</span><br><span class="line">    <span class="comment">#读取文件</span></span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="comment">#遍历文件中的每一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        <span class="comment">#获取当前行，并按“，”切割成字段放入列表中</span></span><br><span class="line">        <span class="comment">#strip：去掉每行字符串首尾指定的字符（默认空格或换行符）</span></span><br><span class="line">        <span class="comment">#split：按照指定的字符将字符串切割成每个字段，返回列表形式</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment">#将每行中除标记外的数据放入数据集中（curLine[0]为标记信息）</span></span><br><span class="line">        <span class="comment">#在放入的同时将原先字符串形式的数据转换为整型</span></span><br><span class="line">        <span class="comment">#此外将数据进行了二值化处理，大于128的转换成1，小于的转换成0，方便后续计算</span></span><br><span class="line">        dataArr.append([int(int(num) &gt; <span class="number">128</span>) <span class="keyword">for</span> num <span class="keyword">in</span> curLine[<span class="number">1</span>:]])</span><br><span class="line">        <span class="comment">#将标记信息放入标记集中</span></span><br><span class="line">        <span class="comment">#放入的同时将标记转换为整型</span></span><br><span class="line">        labelArr.append(int(curLine[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#返回数据集和标记</span></span><br><span class="line">    <span class="keyword">return</span> dataArr, labelArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorClass</span><span class="params">(labelArr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    找到当前标签集中占数目最大的标签</span></span><br><span class="line"><span class="string">    :param labelArr: 标签集</span></span><br><span class="line"><span class="string">    :return: 最大的标签</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#建立字典，用于不同类别的标签技术</span></span><br><span class="line">    classDict = &#123;&#125;</span><br><span class="line">    <span class="comment">#遍历所有标签</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(labelArr)):</span><br><span class="line">        <span class="comment">#当第一次遇到A标签时，字典内还没有A标签，这时候直接幅值加1是错误的，</span></span><br><span class="line">        <span class="comment">#所以需要判断字典中是否有该键，没有则创建，有就直接自增</span></span><br><span class="line">        <span class="keyword">if</span> labelArr[i] <span class="keyword">in</span> classDict.keys():</span><br><span class="line">            <span class="comment"># 若在字典中存在该标签，则直接加1</span></span><br><span class="line">            classDict[labelArr[i]] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#若无该标签，设初值为1，表示出现了1次了</span></span><br><span class="line">            classDict[labelArr[i]] = <span class="number">1</span></span><br><span class="line">    <span class="comment">#对字典依据值进行降序排序</span></span><br><span class="line">    classSort = sorted(classDict.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#返回最大一项的标签，即占数目最多的标签</span></span><br><span class="line">    <span class="keyword">return</span> classSort[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_H_D</span><span class="params">(trainLabelArr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算数据集D的经验熵，参考公式5.7 经验熵的计算</span></span><br><span class="line"><span class="string">    :param trainLabelArr:当前数据集的标签集</span></span><br><span class="line"><span class="string">    :return: 经验熵</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#初始化为0</span></span><br><span class="line">    H_D = <span class="number">0</span></span><br><span class="line">    <span class="comment">#将当前所有标签放入集合中，这样只要有的标签都会在集合中出现，且出现一次。</span></span><br><span class="line">    <span class="comment">#遍历该集合就可以遍历所有出现过的标记并计算其Ck</span></span><br><span class="line">    <span class="comment">#这么做有一个很重要的原因：首先假设一个背景，当前标签集中有一些标记已经没有了，比如说标签集中</span></span><br><span class="line">    <span class="comment">#没有0（这是很正常的，说明当前分支不存在这个标签）。 式5.7中有一项Ck，那按照式中的针对不同标签k</span></span><br><span class="line">    <span class="comment">#计算Cl和D并求和时，由于没有0，那么C0=0，此时C0/D0=0,log2(C0/D0) = log2(0)，事实上0并不在log的</span></span><br><span class="line">    <span class="comment">#定义区间内，出现了问题</span></span><br><span class="line">    <span class="comment">#所以使用集合的方式先知道当前标签中都出现了那些标签，随后对每个标签进行计算，如果没出现的标签那一项就</span></span><br><span class="line">    <span class="comment">#不在经验熵中出现（未参与，对经验熵无影响），保证log的计算能一直有定义</span></span><br><span class="line">    trainLabelSet = set([label <span class="keyword">for</span> label <span class="keyword">in</span> trainLabelArr])</span><br><span class="line">    <span class="comment">#遍历每一个出现过的标签</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trainLabelSet:</span><br><span class="line">        <span class="comment">#计算|Ck|/|D|</span></span><br><span class="line">        <span class="comment">#trainLabelArr == i：当前标签集中为该标签的的位置</span></span><br><span class="line">        <span class="comment">#例如a = [1, 0, 0, 1], c = (a == 1): c == [True, false, false, True]</span></span><br><span class="line">        <span class="comment">#trainLabelArr[trainLabelArr == i]：获得为指定标签的样本</span></span><br><span class="line">        <span class="comment">#trainLabelArr[trainLabelArr == i].size：获得为指定标签的样本的大小，即标签为i的样本</span></span><br><span class="line">        <span class="comment">#数量，就是|Ck|</span></span><br><span class="line">        <span class="comment">#trainLabelArr.size：整个标签集的数量（也就是样本集的数量），即|D|</span></span><br><span class="line">        p = trainLabelArr[trainLabelArr == i].size / trainLabelArr.size</span><br><span class="line">        <span class="comment">#对经验熵的每一项累加求和</span></span><br><span class="line">        H_D += <span class="number">-1</span> * p * np.log2(p)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回经验熵</span></span><br><span class="line">    <span class="keyword">return</span> H_D</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcH_D_A</span><span class="params">(trainDataArr_DevFeature, trainLabelArr)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算经验条件熵</span></span><br><span class="line"><span class="string">    :param trainDataArr_DevFeature:切割后只有feature那列数据的数组</span></span><br><span class="line"><span class="string">    :param trainLabelArr: 标签集数组</span></span><br><span class="line"><span class="string">    :return: 经验条件熵</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#初始为0</span></span><br><span class="line">    H_D_A = <span class="number">0</span></span><br><span class="line">    <span class="comment">#在featue那列放入集合中，是为了根据集合中的数目知道该feature目前可取值数目是多少</span></span><br><span class="line">    trainDataSet = set([label <span class="keyword">for</span> label <span class="keyword">in</span> trainDataArr_DevFeature])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对于每一个特征取值遍历计算条件经验熵的每一项</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trainDataSet:</span><br><span class="line">        <span class="comment">#计算H(D|A)</span></span><br><span class="line">        <span class="comment">#trainDataArr_DevFeature[trainDataArr_DevFeature == i].size / trainDataArr_DevFeature.size:|Di| / |D|</span></span><br><span class="line">        <span class="comment">#calc_H_D(trainLabelArr[trainDataArr_DevFeature == i]):H(Di)</span></span><br><span class="line">        H_D_A += trainDataArr_DevFeature[trainDataArr_DevFeature == i].size / trainDataArr_DevFeature.size \</span><br><span class="line">                * calc_H_D(trainLabelArr[trainDataArr_DevFeature == i])</span><br><span class="line">    <span class="comment">#返回得出的条件经验熵</span></span><br><span class="line">    <span class="keyword">return</span> H_D_A</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcBestFeature</span><span class="params">(trainDataList, trainLabelList)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算信息增益最大的特征</span></span><br><span class="line"><span class="string">    :param trainDataList: 当前数据集</span></span><br><span class="line"><span class="string">    :param trainLabelList: 当前标签集</span></span><br><span class="line"><span class="string">    :return: 信息增益最大的特征及最大信息增益值</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#将数据集和标签集转换为数组形式</span></span><br><span class="line">    <span class="comment">#trainLabelArr转换后需要转置，这样在取数时方便</span></span><br><span class="line">    <span class="comment">#例如a = np.array([1, 2, 3]); b = np.array([1, 2, 3]).T</span></span><br><span class="line">    <span class="comment">#若不转置，a[0] = [1, 2, 3]，转置后b[0] = 1, b[1] = 2</span></span><br><span class="line">    <span class="comment">#对于标签集来说，能够很方便地取到每一位是很重要的</span></span><br><span class="line">    trainDataArr = np.array(trainDataList)</span><br><span class="line">    trainLabelArr = np.array(trainLabelList).T</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取当前特征数目，也就是数据集的横轴大小</span></span><br><span class="line">    featureNum = trainDataArr.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化最大信息增益</span></span><br><span class="line">    maxG_D_A = <span class="number">-1</span></span><br><span class="line">    <span class="comment">#初始化最大信息增益的特征</span></span><br><span class="line">    maxFeature = <span class="number">-1</span></span><br><span class="line">    <span class="comment">#对每一个特征进行遍历计算</span></span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> range(featureNum):</span><br><span class="line">        <span class="comment">#“5.2.2 信息增益”中“算法5.1（信息增益的算法）”第一步：</span></span><br><span class="line">        <span class="comment">#1.计算数据集D的经验熵H(D)</span></span><br><span class="line">        H_D = calc_H_D(trainLabelArr)</span><br><span class="line">        <span class="comment">#2.计算条件经验熵H(D|A)</span></span><br><span class="line">        <span class="comment">#由于条件经验熵的计算过程中只涉及到标签以及当前特征，为了提高运算速度（全部样本</span></span><br><span class="line">        <span class="comment">#做成的矩阵运算速度太慢，需要剔除不需要的部分），将数据集矩阵进行切割</span></span><br><span class="line">        <span class="comment">#数据集在初始时刻是一个Arr = 60000*784的矩阵，针对当前要计算的feature，在训练集中切割下</span></span><br><span class="line">        <span class="comment">#Arr[:, feature]这么一条来，因为后续计算中数据集中只用到这个（没明白的跟着算一遍例5.2）</span></span><br><span class="line">        <span class="comment">#trainDataArr[:, feature]:在数据集中切割下这么一条</span></span><br><span class="line">        <span class="comment">#trainDataArr[:, feature].flat：将这么一条转换成竖着的列表</span></span><br><span class="line">        <span class="comment">#np.array(trainDataArr[:, feature].flat)：再转换成一条竖着的矩阵，大小为60000*1（只是初始是</span></span><br><span class="line">        <span class="comment">#这么大，运行过程中是依据当前数据集大小动态变的）</span></span><br><span class="line">        trainDataArr_DevideByFeature = np.array(trainDataArr[:, feature].flat)</span><br><span class="line">        <span class="comment">#3.计算信息增益G(D|A)    G(D|A) = H(D) - H(D | A)</span></span><br><span class="line">        G_D_A = H_D - calcH_D_A(trainDataArr_DevideByFeature, trainLabelArr)</span><br><span class="line">        <span class="comment">#不断更新最大的信息增益以及对应的feature</span></span><br><span class="line">        <span class="keyword">if</span> G_D_A &gt; maxG_D_A:</span><br><span class="line">            maxG_D_A = G_D_A</span><br><span class="line">            maxFeature = feature</span><br><span class="line">    <span class="keyword">return</span> maxFeature, maxG_D_A</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSubDataArr</span><span class="params">(trainDataArr, trainLabelArr, A, a)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    更新数据集和标签集</span></span><br><span class="line"><span class="string">    :param trainDataArr:要更新的数据集</span></span><br><span class="line"><span class="string">    :param trainLabelArr: 要更新的标签集</span></span><br><span class="line"><span class="string">    :param A: 要去除的特征索引</span></span><br><span class="line"><span class="string">    :param a: 当data[A]== a时，说明该行样本时要保留的</span></span><br><span class="line"><span class="string">    :return: 新的数据集和标签集</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#返回的数据集</span></span><br><span class="line">    retDataArr = []</span><br><span class="line">    <span class="comment">#返回的标签集</span></span><br><span class="line">    retLabelArr = []</span><br><span class="line">    <span class="comment">#对当前数据的每一个样本进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(trainDataArr)):</span><br><span class="line">        <span class="comment">#如果当前样本的特征为指定特征值a</span></span><br><span class="line">        <span class="keyword">if</span> trainDataArr[i][A] == a:</span><br><span class="line">            <span class="comment">#那么将该样本的第A个特征切割掉，放入返回的数据集中</span></span><br><span class="line">            retDataArr.append(trainDataArr[i][<span class="number">0</span>:A] + trainDataArr[i][A+<span class="number">1</span>:])</span><br><span class="line">            <span class="comment">#将该样本的标签放入返回标签集中</span></span><br><span class="line">            retLabelArr.append(trainLabelArr[i])</span><br><span class="line">    <span class="comment">#返回新的数据集和标签集</span></span><br><span class="line">    <span class="keyword">return</span> retDataArr, retLabelArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(*dataSet)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    递归创建决策树</span></span><br><span class="line"><span class="string">    :param dataSet:(trainDataList， trainLabelList) &lt;&lt;-- 元祖形式</span></span><br><span class="line"><span class="string">    :return:新的子节点或该叶子节点的值</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#设置Epsilon，“5.3.1 ID3算法”第4步提到需要将信息增益与阈值Epsilon比较，若小于则</span></span><br><span class="line">    <span class="comment">#直接处理后返回T</span></span><br><span class="line">    <span class="comment">#该值的大小在设置上并未考虑太多，观察到信息增益前期在运行中为0.3左右，所以设置了0.1</span></span><br><span class="line">    Epsilon = <span class="number">0.1</span></span><br><span class="line">    <span class="comment">#从参数中获取trainDataList和trainLabelList</span></span><br><span class="line">    <span class="comment">#之所以使用元祖作为参数，是由于后续递归调用时直数据集需要对某个特征进行切割，在函数递归</span></span><br><span class="line">    <span class="comment">#调用上直接将切割函数的返回值放入递归调用中，而函数的返回值形式是元祖的，等看到这个函数</span></span><br><span class="line">    <span class="comment">#的底部就会明白了，这样子的用处就是写程序的时候简洁一点，方便一点</span></span><br><span class="line">    trainDataList = dataSet[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    trainLabelList = dataSet[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="comment">#打印信息：开始一个子节点创建，打印当前特征向量数目及当前剩余样本数目</span></span><br><span class="line">    print(<span class="string">'start a node'</span>, len(trainDataList[<span class="number">0</span>]), len(trainLabelList))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将标签放入一个字典中，当前样本有多少类，在字典中就会有多少项</span></span><br><span class="line">    <span class="comment">#也相当于去重，多次出现的标签就留一次。举个例子，假如处理结束后字典的长度为1，那说明所有的样本</span></span><br><span class="line">    <span class="comment">#都是同一个标签，那就可以直接返回该标签了，不需要再生成子节点了。</span></span><br><span class="line">    classDict = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> trainLabelList&#125;</span><br><span class="line">    <span class="comment">#如果D中所有实例属于同一类Ck，则置T为单节点数，并将Ck作为该节点的类，返回T</span></span><br><span class="line">    <span class="comment">#即若所有样本的标签一致，也就不需要再分化，返回标记作为该节点的值，返回后这就是一个叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> len(classDict) == <span class="number">1</span>:</span><br><span class="line">        <span class="comment">#因为所有样本都是一致的，在标签集中随便拿一个标签返回都行，这里用的第0个（因为你并不知道</span></span><br><span class="line">        <span class="comment">#当前标签集的长度是多少，但运行中所有标签只要有长度都会有第0位。</span></span><br><span class="line">        <span class="keyword">return</span> trainLabelList[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果A为空集，则置T为单节点数，并将D中实例数最大的类Ck作为该节点的类，返回T</span></span><br><span class="line">    <span class="comment">#即如果已经没有特征可以用来再分化了，就返回占大多数的类别</span></span><br><span class="line">    <span class="keyword">if</span> len(trainDataList[<span class="number">0</span>]) == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#返回当前标签集中占数目最大的标签</span></span><br><span class="line">        <span class="keyword">return</span> majorClass(trainLabelList)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#否则，按式5.10计算A中个特征值的信息增益，选择信息增益最大的特征Ag</span></span><br><span class="line">    Ag, EpsilonGet = calcBestFeature(trainDataList, trainLabelList)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果Ag的信息增益比小于阈值Epsilon，则置T为单节点树，并将D中实例数最大的类Ck</span></span><br><span class="line">    <span class="comment">#作为该节点的类，返回T</span></span><br><span class="line">    <span class="keyword">if</span> EpsilonGet &lt; Epsilon:</span><br><span class="line">        <span class="keyword">return</span> majorClass(trainLabelList)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#否则，对Ag的每一可能值ai，依Ag=ai将D分割为若干非空子集Di，将Di中实例数最大的</span></span><br><span class="line">    <span class="comment"># 类作为标记，构建子节点，由节点及其子节点构成树T，返回T</span></span><br><span class="line">    treeDict = &#123;Ag:&#123;&#125;&#125;</span><br><span class="line">    <span class="comment">#特征值为0时，进入0分支</span></span><br><span class="line">    <span class="comment">#getSubDataArr(trainDataList, trainLabelList, Ag, 0)：在当前数据集中切割当前feature，返回新的数据集和标签集</span></span><br><span class="line">    treeDict[Ag][<span class="number">0</span>] = createTree(getSubDataArr(trainDataList, trainLabelList, Ag, <span class="number">0</span>))</span><br><span class="line">    treeDict[Ag][<span class="number">1</span>] = createTree(getSubDataArr(trainDataList, trainLabelList, Ag, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> treeDict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(testDataList, tree)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    预测标签</span></span><br><span class="line"><span class="string">    :param testDataList:样本</span></span><br><span class="line"><span class="string">    :param tree: 决策树</span></span><br><span class="line"><span class="string">    :return: 预测结果</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># treeDict = copy.deepcopy(tree)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#死循环，直到找到一个有效地分类</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment">#因为有时候当前字典只有一个节点</span></span><br><span class="line">        <span class="comment">#例如&#123;73: &#123;0: &#123;74:6&#125;&#125;&#125;看起来节点很多，但是对于字典的最顶层来说，只有73一个key，其余都是value</span></span><br><span class="line">        <span class="comment">#若还是采用for来读取的话不太合适，所以使用下行这种方式读取key和value</span></span><br><span class="line">        (key, value), = tree.items()</span><br><span class="line">        <span class="comment">#如果当前的value是字典，说明还需要遍历下去</span></span><br><span class="line">        <span class="keyword">if</span> type(tree[key]).__name__ == <span class="string">'dict'</span>:</span><br><span class="line">            <span class="comment">#获取目前所在节点的feature值，需要在样本中删除该feature</span></span><br><span class="line">            <span class="comment">#因为在创建树的过程中，feature的索引值永远是对于当时剩余的feature来设置的</span></span><br><span class="line">            <span class="comment">#所以需要不断地删除已经用掉的特征，保证索引相对位置的一致性</span></span><br><span class="line">            dataVal = testDataList[key]</span><br><span class="line">            <span class="keyword">del</span> testDataList[key]</span><br><span class="line">            <span class="comment">#将tree更新为其子节点的字典</span></span><br><span class="line">            tree = value[dataVal]</span><br><span class="line">            <span class="comment">#如果当前节点的子节点的值是int，就直接返回该int值</span></span><br><span class="line">            <span class="comment">#例如&#123;403: &#123;0: 7, 1: &#123;297:7&#125;&#125;，dataVal=0</span></span><br><span class="line">            <span class="comment">#此时上一行tree = value[dataVal]，将tree定位到了7，而7不再是一个字典了，</span></span><br><span class="line">            <span class="comment">#这里就可以直接返回7了，如果tree = value[1]，那就是一个新的子节点，需要继续遍历下去</span></span><br><span class="line">            <span class="keyword">if</span> type(tree).__name__ == <span class="string">'int'</span>:</span><br><span class="line">                <span class="comment">#返回该节点值，也就是分类值</span></span><br><span class="line">                <span class="keyword">return</span> tree</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#如果当前value不是字典，那就返回分类值</span></span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(testDataList, testLabelList, tree)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试准确率</span></span><br><span class="line"><span class="string">    :param testDataList:待测试数据集</span></span><br><span class="line"><span class="string">    :param testLabelList: 待测试标签集</span></span><br><span class="line"><span class="string">    :param tree: 训练集生成的树</span></span><br><span class="line"><span class="string">    :return: 准确率</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#错误次数计数</span></span><br><span class="line">    errorCnt = <span class="number">0</span></span><br><span class="line">    <span class="comment">#遍历测试集中每一个测试样本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(testDataList)):</span><br><span class="line">        <span class="comment">#判断预测与标签中结果是否一致</span></span><br><span class="line">        <span class="keyword">if</span> testLabelList[i] != predict(testDataList[i], tree):</span><br><span class="line">            errorCnt += <span class="number">1</span></span><br><span class="line">    <span class="comment">#返回准确率</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - errorCnt / len(testDataList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#开始时间</span></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取训练集</span></span><br><span class="line">    trainDataList, trainLabelList = loadData(<span class="string">'../Mnist/mnist_train.csv'</span>)</span><br><span class="line">    <span class="comment"># 获取测试集</span></span><br><span class="line">    testDataList, testLabelList = loadData(<span class="string">'../Mnist/mnist_test.csv'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建决策树</span></span><br><span class="line">    print(<span class="string">'start create tree'</span>)</span><br><span class="line">    tree = createTree((trainDataList, trainLabelList))</span><br><span class="line">    print(<span class="string">'tree is:'</span>, tree)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#测试准确率</span></span><br><span class="line">    print(<span class="string">'start test'</span>)</span><br><span class="line">    accur = test(testDataList, testLabelList, tree)</span><br><span class="line">    print(<span class="string">'the accur is:'</span>, accur)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#结束时间</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'time span:'</span>, end - start)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 决策树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学习方法 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 决策树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机、KNN</title>
      <link href="2019/11/08/%E6%84%9F%E7%9F%A5%E6%9C%BA%E3%80%81KNN/"/>
      <url>2019/11/08/%E6%84%9F%E7%9F%A5%E6%9C%BA%E3%80%81KNN/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong><br>参考了一位NLP学长的博客，受益颇多，跟着学长学习李航老师的《统计学习方法》，希望整理一些重点，便于翻阅，日积月累，为三年后的面试打下基础！<br>代码来自：<br><a href="https://www.pkudodo.com" target="_blank" rel="noopener">https://www.pkudodo.com</a></p><h1 id="（一）感知机"><a href="#（一）感知机" class="headerlink" title="（一）感知机"></a>（一）感知机</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>感知机是二分类的线性模型,属于判别模型.感知机学习旨在求出将训练数据进行<strong>线性划分</strong>的分离超平面.是神经网络和支持向量机的基础。</p><p>个人理解：结合看过的《深度学习入门基于python的理论与实现》，感知机说白了就是接受一些信号，输出信号的模型（就像理工科电工科中讲到的逻辑电路一个道理），多个输入信号都有各自固有的权重，这些权重发挥着控制各个信号的重要性的作用，也就是说，权重越大，对应该权重的信号的重要性就越高。<br><br><img src="https://img-blog.csdnimg.cn/20191127190937753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:70%;" /><br>那么，有同学就疑问了，为什么是线性呢，非线性不能吗，这里可以看看两张图：<br><img src="https://img-blog.csdnimg.cn/20191127192443953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:70%;" /><br><img src="https://img-blog.csdnimg.cn/20191127192528864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" style="zoom:80%;" /></p><p>用一条直线是可以将图1正常分割开，而无法将第二张图分割，第一张图在编程实现时用到的是简单的逻辑电路（与门、与非门、或门），但是第二张图这种异或门只能通过多层感知机，也就是神经网络才能够实现。</p><p><strong>感知机的几何解释:</strong><br>模型公式:$f(x)=sign(w\cdot x+b)$<br>$w$叫作权值向量,$b$叫做偏置,$sign$是符号函数.<br>$w\cdot x+b$对应于特征空间中的一个分离超平面$S$,其中$w$是$S$的法向量,$b$是$S$的截距.$S$将特征空间划分为两个部分,位于两个部分的点分别被分为正负两类.<br><br>策略:<br>假设训练数据集是线性可分的,感知机的损失函数是误分类点到超平面$S$的总距离。因为误分类点到超平面S的距离是$\frac{1}{||w||}|w\cdot{x_0}+b|$.且对于误分类的数据来说,总有:$-y_i(w\cdot{x_i}+b)&gt;0$成立,因此不考虑$\frac{1}{||w||}$,就得到感知机的<strong>损失函数</strong>:<br>$L(w,b)=-\sum_{x_i\in{M}} y_i(w\cdot{x_i}+b)$,其中$M$是误分类点的集合.感知机学习的策略就是选取使<strong>损失函数最小的模型参数</strong>.<br></p><p>算法:感知机的最优化方法采用随机梯度下降法.首先任意选取一个超平面$w_0$,$b_0$,然后不断地极小化目标函数.在极小化过程中一次随机选取一个误分类点更新$w,b$,直到损失函数为0:<br>$$w\longleftarrow w+\eta y_ix_i$$<br>$$b\longleftarrow b+\eta y_i$$<br>其中$η$表示步长.该算法的直观解释是:当一个点被误分类,就调整$w,b$使分离超平面向该误分类点接近.感知机的解可以不同.</p><p><strong>对偶形式:</strong> 假设原始形式中的$w_0$和$b_0$均为0,设逐步修改$w$和$b$共$n$次,令$a=nη$,最后学习到的$w,b$可以表示为$w=\sum_{i=1}^{N}\alpha y_i x_i,$.那么对偶算法就变为设初始a和b均为0,每次选取数据更新a和b直至没有误分类点为止.对偶形式的意义在于可以将训练集中实例间的内积计算出来,存在Gram矩阵中,可以大大加快训练速度</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p><a href="https://www.pkudodo.com" target="_blank" rel="noopener">参考代码:</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#Author:Dodo</span></span><br><span class="line"><span class="comment">#Date:2018-11-15</span></span><br><span class="line"><span class="comment">#Email:lvtengchao@pku.edu.cn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据集：Mnist</span></span><br><span class="line"><span class="string">训练集数量：60000</span></span><br><span class="line"><span class="string">测试集数量：10000</span></span><br><span class="line"><span class="string">------------------------------</span></span><br><span class="line"><span class="string">运行结果：</span></span><br><span class="line"><span class="string">正确率：81.72%（二分类）</span></span><br><span class="line"><span class="string">运行时长：78.6s</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载Mnist数据集</span></span><br><span class="line"><span class="string">    :param fileName:要加载的数据集路径</span></span><br><span class="line"><span class="string">    :return: list形式的数据集及标记</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'start to read data'</span>)</span><br><span class="line">    <span class="comment"># 存放数据及标记的list</span></span><br><span class="line">    dataArr = []; labelArr = []</span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    fr = open(fileName, <span class="string">'r'</span>)</span><br><span class="line">    <span class="comment"># 将文件按行读取</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        <span class="comment"># 对每一行数据按切割福','进行切割，返回字段列表</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment"># Mnsit有0-9是个标记，由于是二分类任务，所以将&gt;=5的作为1，&lt;5为-1</span></span><br><span class="line">        <span class="keyword">if</span> int(curLine[<span class="number">0</span>]) &gt;= <span class="number">5</span>:</span><br><span class="line">            labelArr.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            labelArr.append(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment">#存放标记</span></span><br><span class="line">        <span class="comment">#[int(num) for num in curLine[1:]] -&gt; 遍历每一行中除了以第一哥元素（标记）外将所有元素转换成int类型</span></span><br><span class="line">        <span class="comment">#[int(num)/255 for num in curLine[1:]] -&gt; 将所有数据除255归一化(非必须步骤，可以不归一化)</span></span><br><span class="line">        dataArr.append([int(num)/<span class="number">255</span> <span class="keyword">for</span> num <span class="keyword">in</span> curLine[<span class="number">1</span>:]])</span><br><span class="line">    <span class="comment">#返回data和label</span></span><br><span class="line">    <span class="keyword">return</span> dataArr, labelArr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perceptron</span><span class="params">(dataArr, labelArr, iter=<span class="number">50</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    感知器训练过程</span></span><br><span class="line"><span class="string">    :param dataArr:训练集的数据 (list)</span></span><br><span class="line"><span class="string">    :param labelArr: 训练集的标签(list)</span></span><br><span class="line"><span class="string">    :param iter: 迭代次数，默认50</span></span><br><span class="line"><span class="string">    :return: 训练好的w和b</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'start to trans'</span>)</span><br><span class="line">    <span class="comment">#将数据转换成矩阵形式（在机器学习中因为通常都是向量的运算，转换成矩阵形式方便运算）</span></span><br><span class="line">    <span class="comment">#转换后的数据中每一个样本的向量都是横向的</span></span><br><span class="line">    dataMat = np.mat(dataArr)</span><br><span class="line">    <span class="comment">#将标签转换成矩阵，之后转置(.T为转置)。</span></span><br><span class="line">    <span class="comment">#转置是因为在运算中需要单独取label中的某一个元素，如果是1xN的矩阵的话，无法用label[i]的方式读取</span></span><br><span class="line">    <span class="comment">#对于只有1xN的label可以不转换成矩阵，直接label[i]即可，这里转换是为了格式上的统一</span></span><br><span class="line">    labelMat = np.mat(labelArr).T</span><br><span class="line">    <span class="comment">#获取数据矩阵的大小，为m*n</span></span><br><span class="line">    m, n = np.shape(dataMat)</span><br><span class="line">    <span class="comment">#创建初始权重w，初始值全为0。</span></span><br><span class="line">    <span class="comment">#np.shape(dataMat)的返回值为m，n -&gt; np.shape(dataMat)[1])的值即为n，与</span></span><br><span class="line">    <span class="comment">#样本长度保持一致</span></span><br><span class="line">    w = np.zeros((<span class="number">1</span>, np.shape(dataMat)[<span class="number">1</span>]))<span class="comment"># 初始化权重w为1*N的0矩阵</span></span><br><span class="line">    <span class="comment">#初始化偏置b为0</span></span><br><span class="line">    b = <span class="number">0</span></span><br><span class="line">    <span class="comment">#初始化步长，也就是梯度下降过程中的n，控制梯度下降速率</span></span><br><span class="line">    h = <span class="number">0.0001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#进行iter次迭代计算</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(iter):</span><br><span class="line">        <span class="comment">#对于每一个样本进行梯度下降</span></span><br><span class="line">        <span class="comment">#李航书中在2.3.1开头部分使用的梯度下降，是全部样本都算一遍以后，统一</span></span><br><span class="line">        <span class="comment">#进行一次梯度下降</span></span><br><span class="line">        <span class="comment">#在2.3.1的后半部分可以看到（例如公式2.6 2.7），求和符号没有了，此时用</span></span><br><span class="line">        <span class="comment">#的是随机梯度下降，即计算一个样本就针对该样本进行一次梯度下降。</span></span><br><span class="line">        <span class="comment">#两者的差异各有千秋，但较为常用的是随机梯度下降。</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment">#获取当前样本的向量</span></span><br><span class="line">            xi = dataMat[i]</span><br><span class="line">            <span class="comment">#获取当前样本所对应的标签</span></span><br><span class="line">            yi = labelMat[i]</span><br><span class="line">            <span class="comment">#判断是否是误分类样本</span></span><br><span class="line">            <span class="comment">#误分类样本特征为： -yi(w*xi+b)&gt;=0，详细可参考书中2.2.2小节</span></span><br><span class="line">            <span class="comment">#在书的公式中写的是&gt;0，实际上如果=0，说明改点在超平面上，也是不正确的</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">-1</span> * yi * (w * xi.T + b) &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#对于误分类样本，进行梯度下降，更新w和b</span></span><br><span class="line">                w = w + h *  yi * xi</span><br><span class="line">                b = b + h * yi</span><br><span class="line">        <span class="comment">#打印训练进度</span></span><br><span class="line">        print(<span class="string">'Round %d:%d training'</span> % (k, iter))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回训练完的w、b</span></span><br><span class="line">    <span class="keyword">return</span> w, b</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(dataArr, labelArr, w, b)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试准确率</span></span><br><span class="line"><span class="string">    :param dataArr:测试集</span></span><br><span class="line"><span class="string">    :param labelArr: 测试集标签</span></span><br><span class="line"><span class="string">    :param w: 训练获得的权重w</span></span><br><span class="line"><span class="string">    :param b: 训练获得的偏置b</span></span><br><span class="line"><span class="string">    :return: 正确率</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'start to test'</span>)</span><br><span class="line">    <span class="comment">#将数据集转换为矩阵形式方便运算</span></span><br><span class="line">    dataMat = np.mat(dataArr)</span><br><span class="line">    <span class="comment">#将label转换为矩阵并转置，详细信息参考上文perceptron中</span></span><br><span class="line">    <span class="comment">#对于这部分的解说</span></span><br><span class="line">    labelMat = np.mat(labelArr).T</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取测试数据集矩阵的大小</span></span><br><span class="line">    m, n = np.shape(dataMat)</span><br><span class="line">    <span class="comment">#错误样本数计数</span></span><br><span class="line">    errorCnt = <span class="number">0</span></span><br><span class="line">    <span class="comment">#遍历所有测试样本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment">#获得单个样本向量</span></span><br><span class="line">        xi = dataMat[i]</span><br><span class="line">        <span class="comment">#获得该样本标记</span></span><br><span class="line">        yi = labelMat[i]</span><br><span class="line">        <span class="comment">#获得运算结果</span></span><br><span class="line">        result = <span class="number">-1</span> * yi * (w * xi.T + b)</span><br><span class="line">        <span class="comment">#如果-yi(w*xi+b)&gt;=0，说明该样本被误分类，错误样本数加一</span></span><br><span class="line">        <span class="keyword">if</span> result &gt;= <span class="number">0</span>: errorCnt += <span class="number">1</span></span><br><span class="line">    <span class="comment">#正确率 = 1 - （样本分类错误数 / 样本总数）</span></span><br><span class="line">    accruRate = <span class="number">1</span> - (errorCnt / m)</span><br><span class="line">    <span class="comment">#返回正确率</span></span><br><span class="line">    <span class="keyword">return</span> accruRate</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#获取当前时间</span></span><br><span class="line">    <span class="comment">#在文末同样获取当前时间，两时间差即为程序运行时间</span></span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取训练集及标签</span></span><br><span class="line">    trainData, trainLabel = loadData(<span class="string">'./mnist_train.csv'</span>)</span><br><span class="line">    <span class="comment">#获取测试集及标签</span></span><br><span class="line">    testData, testLabel = loadData(<span class="string">'./mnist_test.csv'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#训练获得权重</span></span><br><span class="line">    w, b = perceptron(trainData, trainLabel, iter = <span class="number">30</span>)</span><br><span class="line">    <span class="comment">#进行测试，获得正确率</span></span><br><span class="line">    accruRate = test(testData, testLabel, w, b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取当前时间，作为结束时间</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="comment">#显示正确率</span></span><br><span class="line">    print(<span class="string">'accuracy rate is:'</span>, accruRate)</span><br><span class="line">    <span class="comment">#显示用时时长</span></span><br><span class="line">    print(<span class="string">'time span:'</span>, end - start)</span><br></pre></td></tr></table></figure><h1 id="（二）K-邻近"><a href="#（二）K-邻近" class="headerlink" title="（二）K-邻近"></a>（二）K-邻近</h1><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>$k$近邻法根据其$k$个最邻的训练实例的类别,通过<strong>多数表决</strong>等方式进行预测.<br><br>什么是多数表决？我们为了对样本$x$进行归类，通过它周围最近的$k$个点来“投票”，这$k$个点大多数是哪个类型的，则定样本$x$为这个类型，故称为多数表决</p><p>模型说明:<br>(1)<strong>训练集</strong>（样本$x$以及样本$x$对应的label:$y$）<br>(2)<strong>距离度量</strong>(欧氏距离or曼哈顿距离) 特征空间中两个实例点的距离是相似程度的反映,k近邻算法一般使用<strong>欧氏距离</strong>,也可以使用曼哈顿距离.<br>欧式距离：<br>曼哈顿距离：<br>(3)<strong>k值</strong> k值较小时,整体模型变得复杂,容易发生过拟合;k值较大时,整体模型变得简单.在应用中k一般取较小的值,通过交叉验证法选取最优的k.</p><p>但是K邻近算法也有其局限性：</p><ol><li><p>在预测样本类别时，待预测样本需要与训练集中所有样本计算距离，当训练集数量过高时（例如Mnsit训练集有60000个样本），每预测一个样本都要计算60000个距离，计算代价过高，尤其当测试集数目也较大时（Mnist测试集有10000个）。</p></li><li><p>K近邻在高维情况下时（高维在机器学习中并不少见），待预测样本需要与依次与所有样本求距离。向量维度过高时使得欧式距离的计算变得不太迅速了。本文在60000训练集的情况下，将10000个测试集缩减为200个，整个过程仍然需要308秒（曼哈顿距离为246秒，但准确度大幅下降）。</p></li><li><p>使用欧氏距离还是曼哈顿距离，性能上的差别相对来说不是很大，说明欧式距离并不是制约计算速度的主要方式。最主要的是训练集的大小，每次预测都需要与60000个样本进行比对，同时选出距离最近的$k$项</p><br></li></ol><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><p><a href="https://www.pkudodo.com" target="_blank" rel="noopener">参考代码:</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#Author:Dodo</span></span><br><span class="line"><span class="comment">#Date:2018-11-16</span></span><br><span class="line"><span class="comment">#Email:lvtengchao@pku.edu.cn</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据集：Mnist</span></span><br><span class="line"><span class="string">训练集数量：60000</span></span><br><span class="line"><span class="string">测试集数量：10000（实际使用：200）</span></span><br><span class="line"><span class="string">------------------------------</span></span><br><span class="line"><span class="string">运行结果：（邻近k数量：25）</span></span><br><span class="line"><span class="string">向量距离使用算法——欧式距离</span></span><br><span class="line"><span class="string">    正确率：97%</span></span><br><span class="line"><span class="string">    运行时长：308s</span></span><br><span class="line"><span class="string">向量距离使用算法——曼哈顿距离</span></span><br><span class="line"><span class="string">    正确率：14%</span></span><br><span class="line"><span class="string">    运行时长：246s</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(fileName)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    加载文件</span></span><br><span class="line"><span class="string">    :param fileName:要加载的文件路径</span></span><br><span class="line"><span class="string">    :return: 数据集和标签集</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'start read file'</span>)</span><br><span class="line">    <span class="comment">#存放数据及标记</span></span><br><span class="line">    dataArr = []; labelArr = []</span><br><span class="line">    <span class="comment">#读取文件</span></span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="comment">#遍历文件中的每一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        <span class="comment">#获取当前行，并按“，”切割成字段放入列表中</span></span><br><span class="line">        <span class="comment">#strip：去掉每行字符串首尾指定的字符（默认空格或换行符）</span></span><br><span class="line">        <span class="comment">#split：按照指定的字符将字符串切割成每个字段，返回列表形式</span></span><br><span class="line">        curLine = line.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="comment">#将每行中除标记外的数据放入数据集中（curLine[0]为标记信息）</span></span><br><span class="line">        <span class="comment">#在放入的同时将原先字符串形式的数据转换为整型</span></span><br><span class="line">        dataArr.append([int(num) <span class="keyword">for</span> num <span class="keyword">in</span> curLine[<span class="number">1</span>:]])</span><br><span class="line">        <span class="comment">#将标记信息放入标记集中</span></span><br><span class="line">        <span class="comment">#放入的同时将标记转换为整型</span></span><br><span class="line">        labelArr.append(int(curLine[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#返回数据集和标记</span></span><br><span class="line">    <span class="keyword">return</span> dataArr, labelArr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcDist</span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    计算两个样本点向量之间的距离</span></span><br><span class="line"><span class="string">    使用的是欧氏距离，即 样本点每个元素相减的平方  再求和  再开方</span></span><br><span class="line"><span class="string">    欧式举例公式这里不方便写，可以百度或谷歌欧式距离（也称欧几里得距离）</span></span><br><span class="line"><span class="string">    :param x1:向量1</span></span><br><span class="line"><span class="string">    :param x2:向量2</span></span><br><span class="line"><span class="string">    :return:向量之间的欧式距离</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.sum(np.square(x1 - x2)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#马哈顿距离计算公式</span></span><br><span class="line">    <span class="comment"># return np.sum(x1 - x2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getClosest</span><span class="params">(trainDataMat, trainLabelMat, x, topK)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    预测样本x的标记。</span></span><br><span class="line"><span class="string">    获取方式通过找到与样本x最近的topK个点，并查看它们的标签。</span></span><br><span class="line"><span class="string">    查找里面占某类标签最多的那类标签</span></span><br><span class="line"><span class="string">    （书中3.1 3.2节）</span></span><br><span class="line"><span class="string">    :param trainDataMat:训练集数据集</span></span><br><span class="line"><span class="string">    :param trainLabelMat:训练集标签集</span></span><br><span class="line"><span class="string">    :param x:要预测的样本x</span></span><br><span class="line"><span class="string">    :param topK:选择参考最邻近样本的数目（样本数目的选择关系到正确率，详看3.2.3 K值的选择）</span></span><br><span class="line"><span class="string">    :return:预测的标记</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#建立一个存放向量x与每个训练集中样本距离的列表</span></span><br><span class="line">    <span class="comment">#列表的长度为训练集的长度，distList[i]表示x与训练集中第</span></span><br><span class="line">    <span class="comment">## i个样本的距离</span></span><br><span class="line">    distList = [<span class="number">0</span>] * len(trainLabelMat)</span><br><span class="line">    <span class="comment">#遍历训练集中所有的样本点，计算与x的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(trainDataMat)):</span><br><span class="line">        <span class="comment">#获取训练集中当前样本的向量</span></span><br><span class="line">        x1 = trainDataMat[i]</span><br><span class="line">        <span class="comment">#计算向量x与训练集样本x的距离</span></span><br><span class="line">        curDist = calcDist(x1, x)</span><br><span class="line">        <span class="comment">#将距离放入对应的列表位置中</span></span><br><span class="line">        distList[i] = curDist</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对距离列表进行排序</span></span><br><span class="line">    <span class="comment">#argsort：函数将数组的值从小到大排序后，并按照其相对应的索引值输出</span></span><br><span class="line">    <span class="comment">#例如：</span></span><br><span class="line">    <span class="comment">#   &gt;&gt;&gt; x = np.array([3, 1, 2])</span></span><br><span class="line">    <span class="comment">#   &gt;&gt;&gt; np.argsort(x)</span></span><br><span class="line">    <span class="comment">#   array([1, 2, 0])</span></span><br><span class="line">    <span class="comment">#返回的是列表中从小到大的元素索引值，对于我们这种需要查找最小距离的情况来说很合适</span></span><br><span class="line">    <span class="comment">#array返回的是整个索引值列表，我们通过[:topK]取列表中前topL个放入list中。</span></span><br><span class="line">    <span class="comment">#----------------优化点-------------------</span></span><br><span class="line">    <span class="comment">#由于我们只取topK小的元素索引值，所以其实不需要对整个列表进行排序，而argsort是对整个</span></span><br><span class="line">    <span class="comment">#列表进行排序的，存在时间上的浪费。字典有现成的方法可以只排序top大或top小，可以自行查阅</span></span><br><span class="line">    <span class="comment">#对代码进行稍稍修改即可</span></span><br><span class="line">    <span class="comment">#这里没有对其进行优化主要原因是KNN的时间耗费大头在计算向量与向量之间的距离上，由于向量高维</span></span><br><span class="line">    <span class="comment">#所以计算时间需要很长，所以如果要提升时间，在这里优化的意义不大。（当然不是说就可以不优化了，</span></span><br><span class="line">    <span class="comment">#主要是我太懒了）</span></span><br><span class="line">    topKList = np.argsort(np.array(distList))[:topK]        <span class="comment">#升序排序</span></span><br><span class="line">    <span class="comment">#建立一个长度时的列表，用于选择数量最多的标记</span></span><br><span class="line">    <span class="comment">#3.2.4提到了分类决策使用的是投票表决，topK个标记每人有一票，在数组中每个标记代表的位置中投入</span></span><br><span class="line">    <span class="comment">#自己对应的地方，随后进行唱票选择最高票的标记</span></span><br><span class="line">    labelList = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">    <span class="comment">#对topK个索引进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> topKList:</span><br><span class="line">        <span class="comment">#trainLabelMat[index]：在训练集标签中寻找topK元素索引对应的标记</span></span><br><span class="line">        <span class="comment">#int(trainLabelMat[index])：将标记转换为int（实际上已经是int了，但是不int的话，报错）</span></span><br><span class="line">        <span class="comment">#labelList[int(trainLabelMat[index])]：找到标记在labelList中对应的位置</span></span><br><span class="line">        <span class="comment">#最后加1，表示投了一票</span></span><br><span class="line">        labelList[int(trainLabelMat[index])] += <span class="number">1</span></span><br><span class="line">    <span class="comment">#max(labelList)：找到选票箱中票数最多的票数值</span></span><br><span class="line">    <span class="comment">#labelList.index(max(labelList))：再根据最大值在列表中找到该值对应的索引，等同于预测的标记</span></span><br><span class="line">    <span class="keyword">return</span> labelList.index(max(labelList))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(trainDataArr, trainLabelArr, testDataArr, testLabelArr, topK)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试正确率</span></span><br><span class="line"><span class="string">    :param trainDataArr:训练集数据集</span></span><br><span class="line"><span class="string">    :param trainLabelArr: 训练集标记</span></span><br><span class="line"><span class="string">    :param testDataArr: 测试集数据集</span></span><br><span class="line"><span class="string">    :param testLabelArr: 测试集标记</span></span><br><span class="line"><span class="string">    :param topK: 选择多少个邻近点参考</span></span><br><span class="line"><span class="string">    :return: 正确率</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">'start test'</span>)</span><br><span class="line">    <span class="comment">#将所有列表转换为矩阵形式，方便运算</span></span><br><span class="line">    trainDataMat = np.mat(trainDataArr); trainLabelMat = np.mat(trainLabelArr).T</span><br><span class="line">    testDataMat = np.mat(testDataArr); testLabelMat = np.mat(testLabelArr).T</span><br><span class="line"></span><br><span class="line">    <span class="comment">#错误值技术</span></span><br><span class="line">    errorCnt = <span class="number">0</span></span><br><span class="line">    <span class="comment">#遍历测试集，对每个测试集样本进行测试</span></span><br><span class="line">    <span class="comment">#由于计算向量与向量之间的时间耗费太大，测试集有6000个样本，所以这里人为改成了</span></span><br><span class="line">    <span class="comment">#测试200个样本点，如果要全跑，将行注释取消，再下一行for注释即可，同时下面的print</span></span><br><span class="line">    <span class="comment">#和return也要相应的更换注释行</span></span><br><span class="line">    <span class="comment"># for i in range(len(testDataMat)):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">        <span class="comment"># print('test %d:%d'%(i, len(trainDataArr)))</span></span><br><span class="line">        print(<span class="string">'test %d:%d'</span> % (i, <span class="number">200</span>))</span><br><span class="line">        <span class="comment">#读取测试集当前测试样本的向量</span></span><br><span class="line">        x = testDataMat[i]</span><br><span class="line">        <span class="comment">#获取预测的标记</span></span><br><span class="line">        y = getClosest(trainDataMat, trainLabelMat, x, topK)</span><br><span class="line">        <span class="comment">#如果预测标记与实际标记不符，错误值计数加1</span></span><br><span class="line">        <span class="keyword">if</span> y != testLabelMat[i]: errorCnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回正确率</span></span><br><span class="line">    <span class="comment"># return 1 - (errorCnt / len(testDataMat))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - (errorCnt / <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取训练集</span></span><br><span class="line">    trainDataArr, trainLabelArr = loadData(<span class="string">'./mnist_train.csv'</span>)</span><br><span class="line">    <span class="comment">#获取测试集</span></span><br><span class="line">    testDataArr, testLabelArr = loadData(<span class="string">'./mnist_test.csv'</span>)</span><br><span class="line">    <span class="comment">#计算测试集正确率</span></span><br><span class="line">    accur = test(trainDataArr, trainLabelArr, testDataArr, testLabelArr, <span class="number">25</span>)</span><br><span class="line">    <span class="comment">#打印正确率</span></span><br><span class="line">    print(<span class="string">'accur is:%d'</span>%(accur * <span class="number">100</span>), <span class="string">'%'</span>)</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="comment">#显示花费时间</span></span><br><span class="line">print(<span class="string">'time span:'</span>, end - start)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 感知机&amp;KNN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感知机 </tag>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP入门实战之——基于词频和TF-IDF，利用朴素贝叶斯机器学习方法新闻分类</title>
      <link href="2019/11/07/NLP%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B9%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E8%AF%8D%E9%A2%91%E5%92%8CTF-IDF%EF%BC%8C%E5%88%A9%E7%94%A8%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%96%B0%E9%97%BB%E5%88%86%E7%B1%BB/"/>
      <url>2019/11/07/NLP%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E4%B9%8B%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%E8%AF%8D%E9%A2%91%E5%92%8CTF-IDF%EF%BC%8C%E5%88%A9%E7%94%A8%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%96%B0%E9%97%BB%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>本人是零基础的小白，现在从零开始学习NLP，这是学习的一些简单的笔记，如有错误请指正。<br>编译环境：Jupyter Notebook<br>Windows x64<br>本文数据处理主要分为两个板块：<br>一 是数据<strong>预处理</strong>（Data Preparation）从而获得所需要的特征（feature），如将数据层层处理（分词、停用词过滤、向量化），本文向量化内容由于使用sklearn库，放置第二板块讲解。<br>二 是利用<strong>模型</strong>（Modeling）解决具体的问题，本文主要采用朴素贝叶斯经典机器学习方法对文本进行分类。</p><p><a href="基本内容">TOC</a></p><h2 id="一、理论基础"><a href="#一、理论基础" class="headerlink" title="一、理论基础"></a>一、理论基础</h2><p>下面简单回顾一下理论部分（可以直接跳过到实战部分）</p><h3 id="1-1-词频-TF"><a href="#1-1-词频-TF" class="headerlink" title="1.1 词频(TF)"></a>1.1 词频(TF)</h3><p><strong>词频（term frequency）</strong> 指的是某一个给定的词语在该文件中出现的频率。对于在某一文件里的词语$t_i$来说，它的重要性可表示为：<br>$$ tf_{ij}=\frac{n_{i,j}}{\sum_kn_{k,j}} $$<br>其中，$n_{i,j}$是该词在文件$d_j$中出现次数，而分母是文件$d_j$中所有字词出现的次数总和。</p><h3 id="1-2-逆向文本频率（IDF）"><a href="#1-2-逆向文本频率（IDF）" class="headerlink" title="1.2 逆向文本频率（IDF）"></a>1.2 逆向文本频率（IDF）</h3><p><strong>逆向文件频率（inverse document frequency）</strong> 是一个词语普遍重要性的度量。某一特定词语的idf，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取以10为底的对数得到，个人理解为：对词频向量的改进，原因在于：词语出现的越多，并不能代表它就越重要，相反，文档中出现的越多，其实它的重要性是降低的，所以TFIDF考虑了单词的重要性而做的对词频的改进，可表示为：<br>$$ tfidf(w)=tf(d,w)\times{idf(w)}$$<br>（1）其中 $tf(d,w)$ 代表文档d中w的词频<br>（2）$idf(w)=\log\frac{N}{N(w)}$，${N}$代表语料库中的文档总数，${N(w)}$代表词语w出现在多少个文档中，出现在文档的次数越多，$\log$值越小，故称为逆向文本频率</p><h3 id="1-3-朴素贝叶斯（Naive-Bayesian-Model，NBM）"><a href="#1-3-朴素贝叶斯（Naive-Bayesian-Model，NBM）" class="headerlink" title="1.3 朴素贝叶斯（Naive Bayesian Model，NBM）"></a>1.3 朴素贝叶斯（Naive Bayesian Model，NBM）</h3><p><strong>朴素贝叶斯</strong>的中心思想，在于利用各类别在训练样本中的分布以及类别中各特征元素的分布，计算后验概率，使用极大似然法判断测试样本所属,一般用于简单分类。<br>贝叶斯公式：<br>$$P(B\mid{A})=\frac{P(A\mid{B})P(B)}{P(A)}$$<br>对应分类任务则为：<br>$$P(类别\mid{特征})=\frac{P(特征\mid{类别})P(类别)}{P(特征)}$$<br><strong>垃圾邮件分类</strong>（判别模型）举例：<br>$P(特征\mid{类别})$ 相当于<strong>先验概率</strong>，也就是我们已知的概率，比如垃圾邮件分类里面，我们已有的数据中正常的类别邮件里面包含“购买”一词的概率，以及垃圾类别里面包含“购买”一次的概率等，$P(类别)$ 就是正常或者垃圾邮件在数据集中的概率，这些概率都已知。<br>那么要判断邮件为正常还是垃圾，则要判断：</p><p>$P(正常\mid内容)$ 与 $P(垃圾\mid内容)$ 的大小</p><p>$$P(正常\mid内容)=\frac{P(内容\mid正常)P(正常)}{P(内容)}$$<br>$$P(垃圾\mid内容)=\frac{P(内容\mid垃圾)P(垃圾)}{P(内容)}$$<br>$P(正常)$，$P(垃圾)$ 均已知，$P(内容)$消去，剩下就是要比较$P(内容\mid正常)$ 和$P(内容\mid垃圾)$<br>$P(内容\mid正常)=P(购买，物品，广告，产品\mid正常)\<br>=P(购买\mid正常)P(物品\mid正常)P(广告\mid正常)P(产品\mid正常)$，而这些先验概率前面都已算过，带入计算作比较大小即可。</p><h2 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h2><p>数据预处理部分可谓是耗费了大部分的时间，参考了一些博客，但是感觉不是特别详细，其中也遇到了不少麻烦，下面一一讲解到位，非常适合小白参考。</p><h3 id="2-1-数据下载及导入"><a href="#2-1-数据下载及导入" class="headerlink" title="2.1 数据下载及导入"></a>2.1 数据下载及导入</h3><p>首先下载搜狗实验室的文本数据（精简版347MB，tar.gz格式）：<br><a href="http://www.sogou.com/labs/resource/ca.php" target="_blank" rel="noopener">下载链接</a><br><img src="https://img-blog.csdnimg.cn/20191122154221125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/20191122154242974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20191122154242974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center</a> =500x80)<br>解压后，得到如下128个txt文件<br><img src="https://img-blog.csdnimg.cn/20191122154428104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>文件格式如下：<br><img src="https://img-blog.csdnimg.cn/20191122154821454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>对于特定格式的文本，我们一般采用<strong>正则表达式</strong>来提取所需要的信息，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> jieba;</span><br><span class="line"><span class="comment"># 定义正则表达式</span></span><br><span class="line">patternURL = re.compile(<span class="string">r'&lt;url&gt;(.*?)&lt;/url&gt;'</span>, re.S)</span><br><span class="line">patternCtt = re.compile(<span class="string">r'&lt;content&gt;(.*?)&lt;/content&gt;'</span>, re.S)</span><br><span class="line">contents_total = []</span><br><span class="line">urls_total=[]</span><br><span class="line">labels = []</span><br><span class="line"><span class="comment"># os.listdir()返回文件夹里所有文件名</span></span><br><span class="line">file = os.listdir(<span class="string">"C:/Users/84747/Desktop/新建文件夹/SogouCS.reduced"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(file)):  </span><br><span class="line">    file0=file[i]</span><br><span class="line">    file_path = os.path.join(<span class="string">"C:/Users/84747/Desktop/新建文件夹/SogouCS.reduced/"</span>, file0)</span><br><span class="line"><span class="comment"># os.path.join()将路径进行拼接，从而打开每一个txt文件</span></span><br><span class="line">    text = open(file_path, <span class="string">'rb'</span>).read().decode(<span class="string">"gbk"</span>, <span class="string">'ignore'</span>)</span><br><span class="line">    <span class="comment"># 正则匹配出url和content</span></span><br><span class="line">    urls = patternURL.findall(text)</span><br><span class="line">    contents = patternCtt.findall(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到所有contents和urls</span></span><br><span class="line">    urls_total=urls_total + urls</span><br><span class="line">    contents_total = contents_total + contents</span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">'URL'</span>:urls_total,<span class="string">'content'</span>:contents_total&#125;)</span><br><span class="line"><span class="comment">#将目前处理的数据用dataframe可视化一下，方便查错</span></span><br><span class="line">df.head()  <span class="comment"># 显示dataframe的前五行</span></span><br></pre></td></tr></table></figure><p>结果如下（有空值、内容也很乱），后面一步步处理：<br><img src="https://img-blog.csdnimg.cn/20191122160210727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下面我们再将URL内容再次正则一下，提取官方的分类label：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">labels=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(urls_total)):</span><br><span class="line">    patternClass = re.compile(<span class="string">r'http://(.*?).sohu.com'</span>, re.S)</span><br><span class="line">    labels.append(patternClass.findall(urls_total[i]))</span><br><span class="line">df=pd.DataFrame(&#123;<span class="string">'label'</span>:labels,<span class="string">'URL'</span>:urls_total,<span class="string">'content'</span>:contents_total&#125;).dropna()</span><br><span class="line">df.head() <span class="comment">#如果想显示最后五行可用.tail()</span></span><br></pre></td></tr></table></figure><p>其中传统dataframe中dropna() 函数删空值的方法在这里并不适用，结果如下,待会会处理，我们先把label里面的格式调整一下，调整的原因：目前的label格式为list of list，为了方便后面筛选label来替换中文等后续操作，先脱去一层list：<br><img src="https://img-blog.csdnimg.cn/20191122162056992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type(labels)</span><br><span class="line"><span class="comment"># print(labels[0:100])</span></span><br><span class="line">labels2 = []</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(labels)):</span><br><span class="line">    labels2.append(<span class="string">' '</span>.join(labels[index]))  <span class="comment">#将list of list转换为list</span></span><br><span class="line">labels2[<span class="number">0</span>:<span class="number">100</span>]  </span><br><span class="line">df.label.unique()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122162659457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=pd.DataFrame(&#123;<span class="string">'label'</span>:labels2,<span class="string">'URL'</span>:urls_total,<span class="string">'content'</span>:contents_total&#125;)</span><br><span class="line">df.tail()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019112216292511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>好了，到这里label格式已经调好了，接下来需要对label进行中文替换，所以我们需要先把各类label筛选出来，总共有以下label：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(df.label.unique()) <span class="comment">#将所有不重复的label显示出来</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122163634116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>将所需要的label对应的内容进行筛选查看（替换‘career’为各个label，查看相关内容），方便人为辨识类别<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">'label'</span>]== <span class="string">'career'</span>].tail(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122163606411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>接下来就是替换label，通过人为的观察上述各label所对应的分类，将中文替换到下列map映射之中，最后完成label替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label_mapping=&#123;<span class="string">'sports'</span>:<span class="string">'体育'</span>, <span class="string">'house'</span>:<span class="string">'房屋'</span>,<span class="string">'it'</span>:<span class="string">'科技'</span>, <span class="string">'2008'</span>:<span class="string">'奥运'</span>, <span class="string">'women'</span>:<span class="string">'女人'</span>,\</span><br><span class="line">               <span class="string">'auto'</span>:<span class="string">'汽车'</span>,<span class="string">'yule'</span>:<span class="string">'娱乐'</span>, <span class="string">'news'</span>:<span class="string">'时事'</span>,<span class="string">'learning'</span>:<span class="string">'教育'</span>, <span class="string">'business'</span>:<span class="string">'财经'</span>,\</span><br><span class="line">               <span class="string">'mil.news'</span>:<span class="string">'军事'</span>, <span class="string">'travel'</span>:<span class="string">'旅游'</span>, <span class="string">'health'</span>:<span class="string">'健康'</span>, <span class="string">'cul'</span>:<span class="string">'文化'</span>, <span class="string">'career'</span>:<span class="string">'职场'</span>&#125;</span><br><span class="line">df[<span class="string">'label'</span>] = df[<span class="string">'label'</span>].map(label_mapping) <span class="comment">#将label进行替换</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122163853926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>回到刚刚提到的<strong>空值问题</strong>，明明有很多空值，但isnull()查阅后仍然显示false，<strong>原因在于</strong>：pandas里空值是指NA，包括numpy的np.nan,python的None，pandas对空值进行操作可以用isnull／notnull／isna／notna／fillna／dropna等等，但是，这些操作对<strong>空字符串</strong>均无效（此处参考<a href="https://blog.csdn.net/maotianyi941005/article/details/84315965" target="_blank" rel="noopener">链接</a>）。<br>空字符串即“ ”（一个或多个空格），但在excel表格里其实是看不出来，pandas也把它当成有值进行操作。<br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.content.replace(to_replace=<span class="string">r'^\s*$'</span>,value=np.nan,regex=<span class="literal">True</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122223459783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>这样一来，就将空值转换成了NaN，从而再可以使用dropna()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df2=df.dropna(axis=<span class="number">0</span>, how=<span class="string">'any'</span>) <span class="comment"># 对任意含有NaN的行（axis=0）进行删除</span></span><br><span class="line">df2.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122223704748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br>再将索引重新排列一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df3=df2.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">df3.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122223755930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="2-2-结巴分词及停用词过滤"><a href="#2-2-结巴分词及停用词过滤" class="headerlink" title="2.2 结巴分词及停用词过滤"></a>2.2 结巴分词及停用词过滤</h3><p>此处我没有用前面的数据进行处理（毕竟有42w行数据，作为新手使用小数据集练手足够，后面可能还会发42w行的运行结果，这里采用了前辈整理好的5000行数据进行处理），格式和我之前处理得到的基本一致，不影响大家参考。<br>样例数据导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gensim</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="comment">#python -m pip install --user gensim  (gensim包)</span></span><br><span class="line"><span class="comment">#pip install jieba</span></span><br><span class="line">df_news = pd.read_table(<span class="string">'./val.txt'</span>,names=[<span class="string">'category'</span>,<span class="string">'theme'</span>,<span class="string">'URL'</span>,<span class="string">'content'</span>],encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(df_news.head())</span><br><span class="line">print(df_news.shape)  <span class="comment">#数据类型</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122224841747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20191122225124219.png" alt=""></p><h4 id="2-2-1-结巴分词："><a href="#2-2-1-结巴分词：" class="headerlink" title="2.2.1 结巴分词："></a>2.2.1 结巴分词：</h4><p>分词之前首先我们要将dataframe的格式转换为list才能适应jieba库，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">content = df_news.content.values.tolist()    <span class="comment">#将datafrmae中content转化为list</span></span><br><span class="line">content_S = []            <span class="comment">#对content中内容进行分词</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content:</span><br><span class="line">    current_segment = jieba.lcut(line)</span><br><span class="line">    <span class="keyword">if</span> len(current_segment) &gt; <span class="number">1</span> <span class="keyword">and</span> current_segment != <span class="string">'\r\n'</span>: <span class="comment">#换行符</span></span><br><span class="line">        content_S.append(current_segment)</span><br><span class="line">df_content=pd.DataFrame(&#123;<span class="string">'content_S'</span>:content_S&#125;) <span class="comment">#### 将分完词的list转换为dataframe</span></span><br><span class="line">df_content.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122225442723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><h4 id="2-2-2-停用词过滤："><a href="#2-2-2-停用词过滤：" class="headerlink" title="2.2.2 停用词过滤："></a>2.2.2 停用词过滤：</h4><p>需要先下载好一份停用词表，网上有很多，此处提供前辈整理好的素材，很方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">topwords=pd.read_csv(<span class="string">"stopwords.txt"</span>,index_col=<span class="literal">False</span>,sep=<span class="string">"\t"</span>,quoting=<span class="number">3</span>,names=[<span class="string">'stopword'</span>], encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">stopwords.head(<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191122225842468.png#pic_center" alt="Alt"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_stopwords</span><span class="params">(contents,stopwords)</span>:</span></span><br><span class="line">    contents_clean = []</span><br><span class="line">    all_words = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> contents:</span><br><span class="line">        line_clean = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> stopwords:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            line_clean.append(word)</span><br><span class="line">        contents_clean.append(line_clean)</span><br><span class="line">    <span class="keyword">return</span> contents_clean,all_words</span><br><span class="line">    <span class="comment">#print (contents_clean)</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">contents = df_content.content_S.values.tolist()    <span class="comment">#df转换为list</span></span><br><span class="line">stopwords = stopwords.stopword.values.tolist()     <span class="comment">#转换为list</span></span><br><span class="line">contents_clean,all_words = drop_stopwords(contents,stopwords)</span><br><span class="line"></span><br><span class="line">df_content=pd.DataFrame(&#123;<span class="string">'contents_clean'</span>:contents_clean&#125;)  <span class="comment">#将分完词的list再转换为df</span></span><br><span class="line">df_content.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019112223122286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"></p><h2 id="三、模型（modeling）贝叶斯分类器"><a href="#三、模型（modeling）贝叶斯分类器" class="headerlink" title="三、模型（modeling）贝叶斯分类器"></a>三、模型（modeling）贝叶斯分类器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_train=pd.DataFrame(&#123;<span class="string">'contents_clean'</span>:contents_clean,<span class="string">'label'</span>:df_news[<span class="string">'category'</span>]&#125;)</span><br><span class="line">df_train.tail() <span class="comment">#tail（）展示最后几个数据（一共是5000个数据）</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191123122355798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df_train.label.unique()</span><br><span class="line"><span class="comment">#对label做映射</span></span><br><span class="line">label_mapping = &#123;<span class="string">"汽车"</span>: <span class="number">1</span>, <span class="string">"财经"</span>: <span class="number">2</span>, <span class="string">"科技"</span>: <span class="number">3</span>, <span class="string">"健康"</span>: <span class="number">4</span>, <span class="string">"体育"</span>:<span class="number">5</span>, <span class="string">"教育"</span>: <span class="number">6</span>,<span class="string">"文化"</span>: <span class="number">7</span>,<span class="string">"军事"</span>: <span class="number">8</span>,<span class="string">"娱乐"</span>: <span class="number">9</span>,<span class="string">"时尚"</span>: <span class="number">0</span>&#125;</span><br><span class="line">df_train[<span class="string">'label'</span>] = df_train[<span class="string">'label'</span>].map(label_mapping) <span class="comment">#将label进行替换</span></span><br><span class="line">df_train.head()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191123122423785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcG9mems=,size_16,color_FFFFFF,t_70" alt=""></p><p>将数据切分为训练集（x_train，y_train）和测试集（x_test，y_test）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment">#将数据集切分为训练和测试集，x代表content，y代表label</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(df_train[<span class="string">'contents_clean'</span>].values, df_train[<span class="string">'label'</span>].values, random_state=<span class="number">1</span>)</span><br><span class="line">print(len(x_train),len(x_test),len(y_train),len(y_test))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191123093639126.png" alt=""></p><h3 id="3-1-文本数据向量化"><a href="#3-1-文本数据向量化" class="headerlink" title="3.1 文本数据向量化"></a>3.1 文本数据向量化</h3><p>数据向量化之前，我们先要将类型转换为list以适合<strong>CountVectorizer（词频）/TfidfVectorizer（逆向文本频率IDF）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将x_train（numpy.array型转换为list类型，</span></span><br><span class="line"><span class="comment">#以适合CountVectorizer/TfidfVectorizer向量化操作）</span></span><br><span class="line">words = []</span><br><span class="line"><span class="keyword">for</span> line_index <span class="keyword">in</span> range(len(x_train)):</span><br><span class="line">words.append(<span class="string">' '</span>.join(x_train[line_index]))  <span class="comment">#numpy.array转换为list</span></span><br><span class="line"></span><br><span class="line">test_words = []</span><br><span class="line"><span class="keyword">for</span> line_index <span class="keyword">in</span> range(len(x_test)):</span><br><span class="line">test_words.append(<span class="string">' '</span>.join(x_test[line_index]))</span><br></pre></td></tr></table></figure><h4 id="3-1-1-基于词频向量化"><a href="#3-1-1-基于词频向量化" class="headerlink" title="3.1.1 基于词频向量化"></a>3.1.1 基于词频向量化</h4><p>导入sklearn机器学习库中的CountVectorizer词频向量化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">vec = CountVectorizer(analyzer=<span class="string">'word'</span>, max_features=<span class="number">4000</span>,  lowercase = <span class="literal">False</span>) <span class="comment">#建立向量</span></span><br><span class="line">vec.fit(words)</span><br></pre></td></tr></table></figure><p>导入贝叶斯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB  <span class="comment">#导入贝叶斯</span></span><br><span class="line">classifier = MultinomialNB()</span><br><span class="line">classifier.fit(vec.transform(words), y_train)</span><br><span class="line">classifier.score(vec.transform(test_words), y_test)  <span class="comment">#基于词频向量构造的结果</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191123094520866.png" alt=""></p><h4 id="3-1-2-基于TFIDF向量化"><a href="#3-1-2-基于TFIDF向量化" class="headerlink" title="3.1.2 基于TFIDF向量化"></a>3.1.2 基于TFIDF向量化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer  <span class="comment">#基于TF-IDF向量</span></span><br><span class="line"></span><br><span class="line">vectorizer = TfidfVectorizer(analyzer=<span class="string">'word'</span>, max_features=<span class="number">4000</span>,  lowercase = <span class="literal">False</span>)</span><br><span class="line">vectorizer.fit(words)</span><br><span class="line"><span class="comment"># 导入贝叶斯</span></span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line">classifier = MultinomialNB()</span><br><span class="line">classifier.fit(vectorizer.transform(words), y_train)</span><br><span class="line"><span class="comment"># 计算分类器精度</span></span><br><span class="line">classifier.score(vectorizer.transform(test_words), y_test)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20191123094823354.png" alt=""><br>相比之下，TFIDF向量化的结果会偏高一点点，当然，这里采用的是很小的数据集（才5000行），精度很低，如果将42w的数据进行训练，精度应该会提升不少。到此为止，整个搜狗新闻文本分类任务就完成了。</p><p>本文到这里就全部结束了，如果有错误或者引用不当，还请指出，我会加以改进！欢迎大家评论留言，相互学习和进步！（前辈整理的数据集后面会上传到csdn上，如有需要可以联系）<br><br><br><br></p><p><strong>参考文章：</strong><br><a href="https://blog.csdn.net/weixin_43269174/article/details/88634129" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43269174/article/details/88634129</a><br><a href="https://blog.csdn.net/sadfassd/article/details/80568321" target="_blank" rel="noopener">https://blog.csdn.net/sadfassd/article/details/80568321</a><br><a href="https://www.jianshu.com/p/edad714110fb" target="_blank" rel="noopener">https://www.jianshu.com/p/edad714110fb</a><br><a href="https://blog.csdn.net/maotianyi941005/article/details/84315965" target="_blank" rel="noopener">https://blog.csdn.net/maotianyi941005/article/details/84315965</a><br><a href="https://www.cnblogs.com/datou-swag/articles/10060532.html" target="_blank" rel="noopener">https://www.cnblogs.com/datou-swag/articles/10060532.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 朴素贝叶斯 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
